<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>导航栏</title>
    <url>/2022/06/30/NavigationBar/</url>
    <content><![CDATA[<h2 id="java-学习系列"><a class="markdownIt-Anchor" href="#java-学习系列"></a> Java 学习系列</h2>
<ul>
<li>Java 基础入门 阶段1 &amp; 阶段2 <a href="http://atopos-blog.cn/2022/04/18/JAVA/01JavaBasic/">【传送门】</a></li>
<li>Java 基础入门 阶段3 <a href="http://atopos-blog.cn/2022/04/18/JAVA/02JavaBasic/">【传送门】</a></li>
<li>Java 基础入门 Java8 <a href="http://atopos-blog.cn/2022/05/01/JAVA/03JavaBasic/">【传送门】</a></li>
<li>Java 企业开发基础 MySQL <a href="http://atopos-blog.cn/2022/06/06/JAVA/04JavaMySQL/">【传送门】</a></li>
<li>Java 企业开发基础 JavaWeb <a href="http://atopos-blog.cn/2022/09/25/JAVA/05JavaWeb/"> 【传送门】 </a></li>
<li>Java 企业开发基础 Spring <a href="http://atopos-blog.cn/categories/JAVA/%E9%98%B6%E6%AE%B53/Spring/"> 【传送门】 </a></li>
</ul>
<h2 id="acwing-系列"><a class="markdownIt-Anchor" href="#acwing-系列"></a> AcWing 系列</h2>
<ul>
<li>AcWing 算法基础课 <a href="http://atopos-blog.cn/2022/03/20/AcWing/Algorithm_Basic/">【传送门】</a></li>
<li>AcWing SpringBoot框架课 <a href="http://atopos-blog.cn/2022/06/29/AcWing/SpringCourse/">【传送门】</a></li>
</ul>
<h2 id="ubuntu-问题系列"><a class="markdownIt-Anchor" href="#ubuntu-问题系列"></a> Ubuntu 问题系列</h2>
<ul>
<li>Ubuntu 安装<code>Python3</code>以及<code>pip3</code> <a href="http://atopos-blog.cn/2022/06/08/Ubuntu/01installPythonAndPIP/">【传送门】</a></li>
<li>Ubuntu 安装<code>LLVM7.1.0</code>和 <code>clang</code> <a href="http://atopos-blog.cn/2022/06/15/Ubuntu/02InstallLLVM/">【传送门】</a></li>
<li>Ubuntu <code>apt-get</code>安装时报错 <a href="http://atopos-blog.cn/2022/06/22/Ubuntu/03apt-get/">【传送门】</a></li>
<li>Ubuntu <code>pip</code>系列问题 <a href="http://atopos-blog.cn/2022/06/22/Ubuntu/04pip/">【传送门】</a></li>
<li>Ubuntu 安装LLFI及所用的工具 <a href="http://atopos-blog.cn/2022/06/25/Ubuntu/05InstallLLFI/">【传送门】</a></li>
<li>LLVM CFG控制流图可视化 <a href="http://atopos-blog.cn/2022/07/04/Ubuntu/07drawCFG/">【传送门】</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">::: tips</span><br><span class="line">**提示**</span><br><span class="line">这是一个提示</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: warning</span><br><span class="line">**注意**</span><br><span class="line">这是一个警告</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: danger</span><br><span class="line">**警告**</span><br><span class="line">这是一个危险信号</span><br><span class="line">:::</span><br><span class="line"></span><br><span class="line">::: success</span><br><span class="line">**成功**</span><br><span class="line">这是一个成功信号</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>
<h3 id="details"><a class="markdownIt-Anchor" href="#details"></a> Details</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">summary</span>&gt;</span></span> <span class="language-xml"><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span></span><br><span class="line">//内容</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<details yellow open>
<summary>Hello Hexo</summary>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello Hexo&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note simple"><p>默认 提示块标籤</p>
</div>
<div class="note default simple"><p>default 提示块标籤</p>
</div>
<div class="note primary simple"><p>primary 提示块标籤</p>
</div>
<div class="note success simple"><p>success 提示块标籤</p>
</div>
<div class="note info simple"><p>info 提示块标籤</p>
</div>
<div class="note warning simple"><p>warning 提示块标籤</p>
</div>
<div class="note danger simple"><p>danger 提示块标籤</p>
</div>
<h3 id="tabs"><a class="markdownIt-Anchor" href="#tabs"></a> Tabs</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
  </entry>
  <entry>
    <title>3375.成绩排序</title>
    <url>/2022/05/12/AcWing/20220512-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://www.acwing.com/problem/content/3378/"> 成绩排序 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>使用 <code>stable_sort</code> 进行排序，因为 <code>stable_sort</code> 是稳定的，可确保不需要排序的数据相对位置不改变。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n, x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stable_sort 使用</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">minTomax</span><span class="params">(vector&lt;pair&lt;string, <span class="type">int</span>&gt;&gt;&amp; arr)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stable_sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), [&amp;](<span class="type">const</span> pair&lt;string, <span class="type">int</span>&gt; &amp;a, <span class="type">const</span> pair&lt;string, <span class="type">int</span>&gt; &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.second &lt; b.second; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maxTomin</span><span class="params">(vector&lt;pair&lt;string, <span class="type">int</span>&gt;&gt;&amp; arr)</span></span>&#123;</span><br><span class="line">    <span class="built_in">stable_sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), [&amp;](<span class="type">const</span> pair&lt;string, <span class="type">int</span>&gt; &amp;a, <span class="type">const</span> pair&lt;string, <span class="type">int</span>&gt; &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.second &gt; b.second; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    vector&lt;pair&lt;string, <span class="type">int</span>&gt;&gt; arr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        string a;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        arr.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="built_in">maxTomin</span>(arr);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">minTomax</span>(arr);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cout &lt;&lt; arr[i].first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; arr[i].second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * logn)</em>，其中 <em>n</em> 是学生的个数</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：31 ms</p>
<p>内存消耗：340KB</p>
<p>通过测试用例：10/10</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>AcWing</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>3376.成绩排序2</title>
    <url>/2022/05/12/AcWing/20220512-02/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://www.acwing.com/problem/content/3379/"> 成绩排序2 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>自定义 <code>sort</code> 排序</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; arr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        arr.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自定义排序</span></span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), [](pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &amp;a, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.second != b.second) </span><br><span class="line">            <span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        cout &lt;&lt; arr[i].first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; arr[i].second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * logn)</em>，其中 <em>n</em> 是学生的个数</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：18 ms</p>
<p>内存消耗：220KB</p>
<p>通过测试用例：10/10</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>AcWing</category>
      </categories>
      <tags>
        <tag>AcWing</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 算法模板</title>
    <url>/2022/10/31/AcWing/AlgorithmTemplate/</url>
    <content><![CDATA[<h1 id="基础算法"><a class="markdownIt-Anchor" href="#基础算法"></a> 基础算法</h1>
<h2 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;  <span class="comment">// 函数实现</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">quick_sort</span>(q, <span class="number">1</span>, n - <span class="number">1</span>);  <span class="comment">// 调用函数</span></span><br></pre></td></tr></table></figure>
<h2 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span>  <span class="comment">// 函数实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);  <span class="comment">// 调用函数</span></span><br></pre></td></tr></table></figure>
<h2 id="整数二分"><a class="markdownIt-Anchor" href="#整数二分"></a> 整数二分</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="浮点数二分"><a class="markdownIt-Anchor" href="#浮点数二分"></a> 浮点数二分</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="离散化"><a class="markdownIt-Anchor" href="#离散化"></a> 离散化</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; alls; <span class="comment">// 存储所有待离散化的值，存储的是位置而不是值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()); <span class="comment">// 将所有值排序</span></span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());   <span class="comment">// 去掉重复元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分求出x对应的离散化的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">// 找到第一个大于等于x的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>; <span class="comment">// 映射到1, 2, ...n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h1>
<h2 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头插入一个数a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = a, ne[idx] = head, head = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将头结点删除，需要保证头结点存在</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = ne[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双链表"><a class="markdownIt-Anchor" href="#双链表"></a> 双链表</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0是左端点，1是右端点</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在节点a的右边插入一个数x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    l[idx] = a, r[idx] = r[a];</span><br><span class="line">    l[r[a]] = idx, r[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[r[a]] = l[a];</span><br><span class="line">    r[l[a]] = r[a];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tt表示栈顶</span></span><br><span class="line"><span class="type">int</span> stk[N], tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向栈顶插入一个数</span></span><br><span class="line">stk[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈顶弹出一个数</span></span><br><span class="line">tt -- ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈顶的值</span></span><br><span class="line">stk[tt];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="keyword">if</span> (tt &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="普通队列"><a class="markdownIt-Anchor" href="#普通队列"></a> 普通队列</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hh 表示队头，tt表示队尾</span></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span> (hh &lt;= tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="循环队列"><a class="markdownIt-Anchor" href="#循环队列"></a> 循环队列</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hh 表示队头，tt表示队尾的后一个位置</span></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[tt ++ ] = x;</span><br><span class="line"><span class="keyword">if</span> (tt == N) tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"><span class="keyword">if</span> (hh == N) hh = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span> (hh != tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> kmp</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span></span><br><span class="line">求模式串的Next数组：</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    <span class="keyword">if</span> (j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="trie树"><a class="markdownIt-Anchor" href="#trie树"></a> Trie树</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"><span class="comment">// 0号点既是根节点，又是空节点</span></span><br><span class="line"><span class="comment">// son[][]存储树中每个节点的子节点</span></span><br><span class="line"><span class="comment">// cnt[]存储以每个节点结尾的单词数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入一个字符串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询字符串出现的次数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h2>
<ul>
<li><code>p[i]</code> 存放的是节点 i 的父节点</li>
<li>判断两个节点是否属于一个集合，直接判断两个节点的祖宗节点是否相等即可。</li>
<li><code>find(x)</code> 函数返回的就是x的祖宗节点，其中还进行了优化，将每一个节点都直接指向了祖宗节点。</li>
<li>合并a、b两个节点，就是将a的祖宗节点指向b的祖宗节点即可。相当于给 a 的祖宗节点找了个爸😄。<code>p[find(a)] = find(b)</code></li>
</ul>
<h3 id="朴素并查集"><a class="markdownIt-Anchor" href="#朴素并查集"></a> 朴素并查集</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> p[N]; <span class="comment">//存储每个点的祖宗节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回x的祖宗节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br></pre></td></tr></table></figure>
<h3 id="维护-size-的并查集"><a class="markdownIt-Anchor" href="#维护-size-的并查集"></a> 维护 <code>size</code> 的并查集</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> p[N], size[N];</span><br><span class="line"><span class="comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回x的祖宗节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    size[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">size[<span class="built_in">find</span>(b)] += size[<span class="built_in">find</span>(a)];</span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="维护到祖宗节点距离的并查集"><a class="markdownIt-Anchor" href="#维护到祖宗节点距离的并查集"></a> 维护到祖宗节点距离的并查集</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> p[N], d[N];</span><br><span class="line"><span class="comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回x的祖宗节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        d[x] += d[p[x]];</span><br><span class="line">        p[x] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    d[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">d[<span class="built_in">find</span>(a)] = distance; <span class="comment">// 根据具体问题，初始化find(a)的偏移量</span></span><br></pre></td></tr></table></figure>
<h2 id="堆"><a class="markdownIt-Anchor" href="#堆"></a> 堆</h2>
<p>堆是一颗完全二叉树。</p>
<p><strong>小根堆</strong>：每个节点的值都小于等于左右子节点的值，</p>
<p><strong>大根堆</strong>：每个节点的值都大于等于左右子节点的值。</p>
<p><code>priority_queue</code> 是STL中的堆，默认是大根堆，定义为小根堆的方式，<code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q</code></p>
<p>插入新的元素，将数据插入数组末尾，然后用<code>up</code>函数依次交换。</p>
<ul>
<li><code>heap[++ size] = x; up(size);</code></li>
</ul>
<p>删除元素，将需要删除的元素和末尾元素交换，然后将最后一个元素删除，然后用<code>down</code>函数将交换的元素位置进行调整。</p>
<ul>
<li>删除最小值：<code>heap[1] = heap[size]; size --; down(1);</code></li>
<li>删除任意元素：<code>heap[k] = heap[size]; size --; down(k); up(k);</code>，其实<code>down</code>和<code>up</code>只会执行一个</li>
<li>修改任意元素：<code>heap[k] = x; down(k); up(k);</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span></span><br><span class="line"><span class="comment">// ph[k]存储第k个插入的点在堆中的位置</span></span><br><span class="line"><span class="comment">// hp[k]存储堆中下标是k的点是第几个插入的</span></span><br><span class="line"><span class="type">int</span> h[N], ph[N], hp[N], size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换两个点，及其映射关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">    <span class="built_in">swap</span>(hp[a], hp[b]);</span><br><span class="line">    <span class="built_in">swap</span>(h[a], h[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (u != t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span>  <span class="comment">// 在堆尾插入新节点并依次与其父节点进行比较交换</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, u / <span class="number">2</span>);</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n)建堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span>; i; i -- ) <span class="built_in">down</span>(i);</span><br></pre></td></tr></table></figure>
<h2 id="哈希表"><a class="markdownIt-Anchor" href="#哈希表"></a> 哈希表</h2>
<h3 id="拉链法"><a class="markdownIt-Anchor" href="#拉链法"></a> 拉链法</h3>
<ul>
<li>数据结构形如邻接表，将需要离散的数除以超过范围的最小质数，得出来的值插入该位置的邻接表中即可。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向哈希表中插入一个数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;  <span class="comment">// x 可能是负数，需要结果是正数</span></span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = h[k];</span><br><span class="line">    h[k] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在哈希表中查询某个数是否存在</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[k]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        <span class="keyword">if</span> (e[i] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="开放寻址法"><a class="markdownIt-Anchor" href="#开放寻址法"></a> 开放寻址法</h3>
<p>如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = (x % N + N) % N;</span><br><span class="line">    <span class="keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)</span><br><span class="line">    &#123;</span><br><span class="line">        t ++ ;</span><br><span class="line">        <span class="keyword">if</span> (t == N) t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串哈希表"><a class="markdownIt-Anchor" href="#字符串哈希表"></a> 字符串哈希表</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">核心思想：将字符串看成P进制数，P的经验值是<span class="number">131</span>或<span class="number">13331</span>，取这两个值的冲突概率低</span><br><span class="line">小技巧：取模的数用<span class="number">2</span>^<span class="number">64</span>，这样直接用<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>存储，溢出的结果就是取模的结果</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line">ULL h[N], p[N]; <span class="comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    h[i] = h[i - <span class="number">1</span>] * P + str[i];</span><br><span class="line">    p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算子串 str[l ~ r] 的哈希值</span></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="stl"><a class="markdownIt-Anchor" href="#stl"></a> STL</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector, 变长数组，倍增的思想</span><br><span class="line">    <span class="built_in">size</span>()  返回元素个数</span><br><span class="line">    <span class="built_in">empty</span>()  返回是否为空</span><br><span class="line">    <span class="built_in">clear</span>()  清空</span><br><span class="line">    <span class="built_in">front</span>()/<span class="built_in">back</span>()</span><br><span class="line">    <span class="built_in">push_back</span>()/<span class="built_in">pop_back</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    []</span><br><span class="line">    支持比较运算，按字典序</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;</span><br><span class="line">    first, 第一个元素</span><br><span class="line">    second, 第二个元素</span><br><span class="line">    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）</span><br><span class="line"></span><br><span class="line">string，字符串</span><br><span class="line">    <span class="built_in">size</span>()/<span class="built_in">length</span>()  返回字符串长度</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">substr</span>(起始下标，(子串长度))  返回子串</span><br><span class="line">    <span class="built_in">c_str</span>()  返回字符串所在字符数组的起始地址</span><br><span class="line"></span><br><span class="line">queue, 队列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  向队尾插入一个元素</span><br><span class="line">    <span class="built_in">front</span>()  返回队头元素</span><br><span class="line">    <span class="built_in">back</span>()  返回队尾元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出队头元素</span><br><span class="line"></span><br><span class="line">priority_queue, 优先队列，默认是大根堆</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  插入一个元素</span><br><span class="line">    <span class="built_in">top</span>()  返回堆顶元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出堆顶元素</span><br><span class="line">    定义成小根堆的方式：priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line">stack, 栈</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  向栈顶插入一个元素</span><br><span class="line">    <span class="built_in">top</span>()  返回栈顶元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出栈顶元素</span><br><span class="line"></span><br><span class="line">deque, 双端队列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">front</span>()/<span class="built_in">back</span>()</span><br><span class="line">    <span class="built_in">push_back</span>()/<span class="built_in">pop_back</span>()</span><br><span class="line">    <span class="built_in">push_front</span>()/<span class="built_in">pop_front</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    ++, -- 返回前驱和后继，时间复杂度 <span class="built_in">O</span>(logn)</span><br><span class="line"></span><br><span class="line">    set/<span class="function">multiset</span></span><br><span class="line"><span class="function">        <span class="title">insert</span><span class="params">()</span>  插入一个数</span></span><br><span class="line"><span class="function">        <span class="title">find</span><span class="params">()</span>  查找一个数</span></span><br><span class="line"><span class="function">        <span class="title">count</span><span class="params">()</span>  返回某一个数的个数</span></span><br><span class="line"><span class="function">        <span class="title">erase</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="params">(<span class="number">1</span>)</span> 输入是一个数x，删除所有x   <span class="title">O</span><span class="params">(k + logn)</span></span></span><br><span class="line"><span class="function">            <span class="params">(<span class="number">2</span>)</span> 输入一个迭代器，删除这个迭代器</span></span><br><span class="line"><span class="function">        <span class="title">lower_bound</span><span class="params">()</span>/<span class="title">upper_bound</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="title">lower_bound</span><span class="params">(x)</span>  返回大于等于x的最小的数的迭代器</span></span><br><span class="line"><span class="function">            <span class="title">upper_bound</span><span class="params">(x)</span>  返回大于x的最小的数的迭代器</span></span><br><span class="line"><span class="function">    map/multimap</span></span><br><span class="line"><span class="function">        <span class="title">insert</span><span class="params">()</span>  插入的数是一个pair</span></span><br><span class="line"><span class="function">        <span class="title">erase</span><span class="params">()</span>  输入的参数是pair或者迭代器</span></span><br><span class="line"><span class="function">        <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        []  注意multimap不支持此操作。 时间复杂度是 <span class="title">O</span><span class="params">(logn)</span></span></span><br><span class="line"><span class="function">        <span class="title">lower_bound</span><span class="params">()</span>/<span class="title">upper_bound</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表</span></span><br><span class="line"><span class="function">    和上面类似，增删改查的时间复杂度是 <span class="title">O</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    不支持 <span class="title">lower_bound</span><span class="params">()</span>/<span class="title">upper_bound</span><span class="params">()</span>， 迭代器的++，--</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">bitset, 圧位</span></span><br><span class="line"><span class="function">    bitset&lt;10000&gt; s</span>;</span><br><span class="line">    ~, &amp;, |, ^</span><br><span class="line">    &gt;&gt;, &lt;&lt;</span><br><span class="line">    ==, !=</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">    <span class="built_in">count</span>()  返回有多少个<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">any</span>()  判断是否至少有一个<span class="number">1</span></span><br><span class="line">    <span class="built_in">none</span>()  判断是否全为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>()  把所有位置成<span class="number">1</span></span><br><span class="line">    <span class="built_in">set</span>(k, v)  将第k位变成v</span><br><span class="line">    <span class="built_in">reset</span>()  把所有位变成<span class="number">0</span></span><br><span class="line">    <span class="built_in">flip</span>()  等价于~</span><br><span class="line">    <span class="built_in">flip</span>(k) 把第k位取反</span><br></pre></td></tr></table></figure>
<h1 id="搜索与图论"><a class="markdownIt-Anchor" href="#搜索与图论"></a> 搜索与图论</h1>
<h2 id="邻接表"><a class="markdownIt-Anchor" href="#邻接表"></a> 邻接表</h2>
<ul>
<li><code>h[i]</code>  存放的是第i个节点的头节点，<code>h[]</code> 数组需要初始化为-1，</li>
<li><code>e[i]</code> 存放的是第i个节点的值</li>
<li><code>ne[i]</code> 存放的是第i个节点的下一位置。</li>
<li>邻接表采用的是头插法。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</span></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一条边a-&gt;b</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br></pre></td></tr></table></figure>
<h2 id="树与图的遍历"><a class="markdownIt-Anchor" href="#树与图的遍历"></a> 树与图的遍历</h2>
<p><strong>时间复杂度</strong>：<code>O(n + m)</code> ，n表示点数，m表示边数</p>
<h3 id="深度优先遍历"><a class="markdownIt-Anchor" href="#深度优先遍历"></a> 深度优先遍历</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图中节点采用邻接表进行存储</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>; <span class="comment">// st[u] 表示点u已经被遍历过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j]) <span class="built_in">dfs</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="宽度优先遍历"><a class="markdownIt-Anchor" href="#宽度优先遍历"></a> 宽度优先遍历</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要借助队列进行遍历</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">st[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 表示1号点已经被遍历过</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>; <span class="comment">// 表示点j已经被遍历过</span></span><br><span class="line">            q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h2>
<p>只针对有向图，无向图不存在拓扑序列。本质就是宽度优先遍历的应用。</p>
<p><strong>有向无环图</strong> 一定存在拓扑序列，有向无环图又被称为 <strong>拓朴图</strong></p>
<p><img src="%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/image-20220915150502564.png" alt="image-20220915150502564" /></p>
<p><strong>算法步骤</strong></p>
<ul>
<li>将所有入度为0的点入队，</li>
<li>取出对头，枚举对头元素的所有出边<code>t-&gt;j</code>，删掉边<code>t-&gt;j</code>，<code>d[j] --</code> 表示将节点 j 的入度减一</li>
<li>如果<code>d[j] == 0</code> 则将 j 入队</li>
</ul>
<p><strong>时间复杂度</strong>：<code>O(n + m)</code> ，n表示点数，m表示边数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// d[i] 存储点i的入度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (!d[i])  <span class="comment">// 找到入度为0的点，因为一个无环图至少存在一个入度为0的点</span></span><br><span class="line">            q[ ++ tt] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++ ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (-- d[j] == <span class="number">0</span>)</span><br><span class="line">                q[ ++ tt] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。</span></span><br><span class="line">    <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="dijkstra算法"><a class="markdownIt-Anchor" href="#dijkstra算法"></a> Dijkstra算法</h2>
<h3 id="朴素版dijkstra"><a class="markdownIt-Anchor" href="#朴素版dijkstra"></a> 朴素版dijkstra</h3>
<p><strong>算法步骤</strong></p>
<ul>
<li>迭代n - 1次，因为起点已经加入了，所以只需要再找n - 1个点即可。</li>
<li>在没有确定的节点中找距离起点值最小的节点。</li>
<li>循环遍历用该节点更新起点到其他节点的距离。</li>
</ul>
<p><strong>时间复杂度</strong>: <code>O(n ^ 2 + m)</code>, n 表示点数，m 表示边数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g[N][N];  <span class="comment">// 存储每条边</span></span><br><span class="line"><span class="type">int</span> dist[N];  <span class="comment">// 存储1号点到每个点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];   <span class="comment">// 存储每个点的最短路是否已经确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;     <span class="comment">// 在还未确定最短路的点中，寻找距离最小的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用t更新其他点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="堆优化版dijkstra"><a class="markdownIt-Anchor" href="#堆优化版dijkstra"></a> 堆优化版dijkstra</h3>
<p><strong>算法步骤</strong></p>
<p>和朴素版dijkstra算法类似，但是每次不需要找没确定的距离起点最小的节点。因为采用小根堆的方式存储，堆顶元素永远存储的是当前距离起点最近的节点。</p>
<ul>
<li>若该节点已经确定过了，则取出下一节点，直到取到既没有确定也是距离起点最小的节点为止。</li>
<li>用该节点更新剩余没确定节点和起点间的距离</li>
</ul>
<p><strong>时间复杂度</strong>: <code>O(mlogn)</code>, n 表示点数，m 表示边数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;      <span class="comment">// 点的数量</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储所有点到1号点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点的最短距离是否已确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);      <span class="comment">// first存储距离，second存储节点编号,这样就可以按照节点距离进行排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ver = t.second, distance = t.first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; distance + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j], j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="bellman-ford算法"><a class="markdownIt-Anchor" href="#bellman-ford算法"></a> Bellman-Ford算法</h2>
<p>可以直接使用结构体数组存储所有边的信息。</p>
<p><strong>伪代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="number">0</span> to n - <span class="number">1</span>   <span class="comment">// 循环n次</span></span><br><span class="line">    <span class="keyword">for</span> a -&gt; b   <span class="comment">// 遍历所有边，a -&gt; b 的权值是w</span></span><br><span class="line">        <span class="keyword">if</span>(dist[b] &gt; dist[a] + w)</span><br><span class="line">        	dist[b] = <span class="built_in">min</span>(dist[b], dist[a] + w)</span><br></pre></td></tr></table></figure>
<p><strong>时间复杂度</strong>: <code>O(mn)</code>, n 表示点数，m 表示边数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m;       <span class="comment">// n表示点数，m表示边数</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// dist[x]存储1到x的最短路距离</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;     <span class="comment">// 边，a表示出点，b表示入点，w表示边的权重</span></span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1到n的最短路距离，如果无法从1走到n，则返回-1。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bellman_ford</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;</span><br><span class="line">            <span class="keyword">if</span> (dist[b] &gt; dist[a] + w)</span><br><span class="line">                dist[b] = dist[a] + w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] &gt; <span class="number">0x3f3f3f3f</span> / <span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="spfa算法"><a class="markdownIt-Anchor" href="#spfa算法"></a> spfa算法</h2>
<p>本质就是使用 <strong>bfs</strong> 对 <em>Bellman-Ford</em> 算法进行优化</p>
<p><strong>伪代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue &lt;- 1;</span><br><span class="line"><span class="keyword">while</span> queue不空</span><br><span class="line">    t &lt;- q.front()</span><br><span class="line">	q.pop()</span><br><span class="line">    更新t的所有出边 t -&gt; b</span><br><span class="line">    <span class="keyword">if</span> b <span class="keyword">not</span> in queue</span><br><span class="line">        q.<span class="built_in">push</span>(b)</span><br></pre></td></tr></table></figure>
<p><strong>时间复杂度</strong>: 平均情况下<code>O(m)</code>, 最坏情况下 <code>O(mn)</code>, n 表示点数，m 表示边数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// 总点数</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储每个点到1号点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span> (!st[j])     <span class="comment">// 如果队列中已存在j，则不需要将j重复插入</span></span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="spfa判断图中是否存在负环"><a class="markdownIt-Anchor" href="#spfa判断图中是否存在负环"></a> spfa判断图中是否存在负环</h3>
<p><strong>时间复杂度</strong>: <code>O(mn)</code>, n 表示点数，m 表示边数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// 总点数</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N], cnt[N];        <span class="comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果存在负环，则返回true，否则返回false。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 不需要初始化dist数组</span></span><br><span class="line">    <span class="comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。</span></span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        st[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                cnt[j] = cnt[t] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (cnt[j] &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;       <span class="comment">// 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环</span></span><br><span class="line">                <span class="keyword">if</span> (!st[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="floyd算法"><a class="markdownIt-Anchor" href="#floyd算法"></a> Floyd算法</h2>
<p>本质是动态规划，三维，优化了一维</p>
<p><strong>伪代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">            dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][k] + dist[k][j]);</span><br></pre></td></tr></table></figure>
<p><strong>时间复杂度</strong>: <code>O(n ^ 3)</code>, n 表示点数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">初始化：</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法结束后，d[a][b]表示a到b的最短距离</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="求最小生成树"><a class="markdownIt-Anchor" href="#求最小生成树"></a> 求最小生成树</h2>
<p><strong>最小生成树</strong> ：包含图中全部顶点的极小连通子图</p>
<p><img src="%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/image-20220915164853878.png" alt="image-20220915164853878" /></p>
<h3 id="prime算法"><a class="markdownIt-Anchor" href="#prime算法"></a> Prime算法</h3>
<p><strong>算法步骤</strong></p>
<p>形似朴素版的dijkstra算法</p>
<ul>
<li>迭代 n 次（和dijkstra算法不同），因为没有起点需要加入，所以总共需要加入n个节点。</li>
<li>每次在没确定的顶点集合中找到距离距离已确定节点距离最小的节点</li>
<li>若该节点 <strong>不是第一个加入的节点</strong> 并且 <strong>距离已经确定的节点不是正无穷</strong> ，则将该距离加入结果中。</li>
<li>然后循环更新其他节点到 **已经确定的节点集合 **的最小距离</li>
</ul>
<p><strong>时间复杂度</strong>: <code>O(n ^ 2 + m)</code>, n 表示点数，m 表示边数，适合稠密图</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// n表示点数</span></span><br><span class="line"><span class="type">int</span> g[N][N];        <span class="comment">// 邻接矩阵，存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储其他点到当前最小生成树的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否已经在生成树中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="keyword">return</span> INF;  <span class="comment">// 说明图不连通</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i) res += dist[t];  <span class="comment">// 不是第一个确定的节点</span></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) dist[j] = <span class="built_in">min</span>(dist[j], g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="kruskal算法"><a class="markdownIt-Anchor" href="#kruskal算法"></a> Kruskal算法</h3>
<p><strong>算法步骤</strong></p>
<ul>
<li>先将所有的边按权值大小从小到大进行排序<code>O(mlogm)</code></li>
<li>枚举每条边，若 a 和 b 不在同一个集合，则将 a b加入同一个集合。<strong>需要使用到并查集</strong></li>
</ul>
<p><img src="%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/image-20220915145805130.png" alt="image-20220915145805130" /></p>
<p><strong>时间复杂度</strong>: <code>O(mlogm)</code>, n 表示点数，m 表示边数，适合</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m;       <span class="comment">// n是点数，m是边数</span></span><br><span class="line"><span class="type">int</span> p[N];       <span class="comment">// 并查集的父节点数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>     <span class="comment">// 存储边</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Edge &amp;W)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; W.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span>     <span class="comment">// 并查集核心操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(edges, edges + m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;    <span class="comment">// 初始化并查集</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line"></span><br><span class="line">        a = <span class="built_in">find</span>(a), b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (a != b)     <span class="comment">// 如果两个连通块不连通，则将这两个连通块合并</span></span><br><span class="line">        &#123;</span><br><span class="line">            p[a] = b;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分图"><a class="markdownIt-Anchor" href="#二分图"></a> 二分图</h2>
<p><strong>二分图</strong>：可以将所有节点划分至两个集合，使得所有的边都是在集合之间，集合内部没有边。</p>
<p><strong>性质</strong>：一个图是二分图当且仅当图中不含奇数环</p>
<p><img src="https://bkimg.cdn.bcebos.com/pic/3c6d55fbb2fb43169079761121a4462309f7d373?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5/format,f_auto" alt="img" /></p>
<h3 id="染色体法辨别二分图"><a class="markdownIt-Anchor" href="#染色体法辨别二分图"></a> 染色体法辨别二分图</h3>
<p><strong>作用</strong>：判断一个无向图是否是一个二分图</p>
<p><strong>算法步骤</strong></p>
<ul>
<li>从节点1 遍历至节点n；如果第i个节点没有染色，则使用深度优先遍历队其及其所在的连通块进行染色。</li>
<li>如果在染色过程中发现矛盾，则不是二分图</li>
</ul>
<p><strong>时间复杂度</strong>: <code>O(n + m)</code>, n 表示点数，m 表示边数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// n表示点数</span></span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;     <span class="comment">// 邻接表存储图</span></span><br><span class="line"><span class="type">int</span> color[N];       <span class="comment">// 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数：u表示当前节点，c表示当前点的颜色</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    color[u] = c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (color[j] == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(j, !c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (color[j] == c) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 和i连通的j也是c颜色，则矛盾，return false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(color, <span class="number">-1</span>, <span class="keyword">sizeof</span> color);</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (color[i] == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(i, <span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="匈牙利算法"><a class="markdownIt-Anchor" href="#匈牙利算法"></a> 匈牙利算法</h3>
<p><strong>作用</strong>：当给定一个二分图的两个集合，求集合中最大的匹配数</p>
<p><strong>算法步骤</strong></p>
<ul>
<li>求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</li>
<li>循环遍历集合1节点能够匹配的集合2中的节点，若集合2中的某个节点没有被匹配 <strong>或者</strong> 匹配该节点的集合1中的节点可以匹配其他节点，则可以匹配。并且使用<code>match[]</code> 数组记录集合2节点匹配的集合1节点。</li>
<li><strong>注意</strong>：<code>st</code> 数组每次都需要初始化。是为了确保集合1中后面节点能够继续尝试已经匹配的集合2中的节点</li>
</ul>
<p><strong>时间复杂度</strong>: <code>O(nm)</code>, n 表示点数，m 表示边数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n1, n2;     <span class="comment">// n1表示第一个集合中的点数，n2表示第二个集合中的点数</span></span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;     <span class="comment">// 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边</span></span><br><span class="line"><span class="type">int</span> match[N];       <span class="comment">// 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 表示第二个集合中的每个点是否已经被遍历过</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[x]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (match[j] == <span class="number">0</span> || <span class="built_in">find</span>(match[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                match[j] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</span></span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n1; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 每次都需要初始化，是为了确保集合1中后面节点能够继续尝试已经匹配的集合2中的节点</span></span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(i)) res ++ ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="数学知识"><a class="markdownIt-Anchor" href="#数学知识"></a> 数学知识</h1>
<h2 id="质数的判定"><a class="markdownIt-Anchor" href="#质数的判定"></a> 质数的判定</h2>
<p><strong>定义</strong>：对<strong>所有大于1的自然数</strong>，若除了1和本身不具备其他约数，则该数为质数或者叫素数。</p>
<h3 id="试除法判定质数"><a class="markdownIt-Anchor" href="#试除法判定质数"></a> 试除法判定质数</h3>
<ul>
<li>若x小于2，则不是质数</li>
<li>然后 i 从 2 开始遍历到 <code>x / i</code> 即可。时间复杂度为：O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ ) <span class="comment">// 因为i不能整除，则x/i肯定也不能整除。</span></span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="试除法分解质因数"><a class="markdownIt-Anchor" href="#试除法分解质因数"></a> 试除法分解质因数</h3>
<p><strong>时间复杂度</strong>：O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span>) ~ O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="comment">// i是x的一个因数并且一定是质数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;  </span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i, s ++ ;  <span class="comment">// 求i的次数</span></span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="素数"><a class="markdownIt-Anchor" href="#素数"></a> 素数</h2>
<h3 id="朴素筛法求素数"><a class="markdownIt-Anchor" href="#朴素筛法求素数"></a> 朴素筛法求素数</h3>
<p><strong>核心原理</strong>：当遍历到某一个数 i ，就将其所有倍数全部删掉，然后若当前这个数没有被删掉，则说明从2 ~ i - 1，没有其约数，则其为质数。</p>
<p><strong>优化</strong> ：每次删除时只需要将质数的倍数删除即可。</p>
<p><strong>时间复杂度</strong>：O(n <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\log(\log{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span>)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有素数</span></span><br><span class="line"><span class="type">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i]) <span class="keyword">continue</span>;</span><br><span class="line">        primes[cnt ++ ] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + i; j &lt;= n; j += i)</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线性筛法求素数"><a class="markdownIt-Anchor" href="#线性筛法求素数"></a> 线性筛法求素数</h3>
<p><strong>核心原理</strong>：n 只会被其最小质因子筛掉。</p>
<p><strong>时间复杂度</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有素数</span></span><br><span class="line"><span class="type">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt ++ ] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ ) <span class="comment">// 从小到大枚举所有质数</span></span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// primes[j] 一定是i的最小质因子</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="约数"><a class="markdownIt-Anchor" href="#约数"></a> 约数</h2>
<h3 id="试除法求所有约数"><a class="markdownIt-Anchor" href="#试除法求所有约数"></a> 试除法求所有约数</h3>
<p><strong>算法思想</strong>：就是暴力，每次可以存两个数 <code>i</code> 和 <code>n/i</code>，前提是两者不相等。</p>
<p><strong>时间复杂度</strong>：O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_divisors</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i != x / i) res.<span class="built_in">push_back</span>(x / i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="约数个数和约数之和"><a class="markdownIt-Anchor" href="#约数个数和约数之和"></a> 约数个数和约数之和</h3>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">如果 N = p1<span class="built_in">^</span>c1 * p2<span class="built_in">^</span>c2 * ... * pk<span class="built_in">^</span>ck, 其中p为质因子</span><br><span class="line">约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1)</span><br><span class="line">约数之和： (p1<span class="built_in">^</span>0 + p1<span class="built_in">^</span>1 + ... + p1<span class="built_in">^</span>c1) * ... * (pk<span class="built_in">^</span>0 + pk<span class="built_in">^</span>1 + ... + pk<span class="built_in">^</span>ck)</span><br></pre></td></tr></table></figure>
<h3 id="欧几里得算法求最大公约数"><a class="markdownIt-Anchor" href="#欧几里得算法求最大公约数"></a> 欧几里得算法求最大公约数</h3>
<p><strong>算法思想</strong>：辗转相除法。a是较大的数，b是较小的数，若b不为0，则让a赋值为b，b赋值为<code>a % b</code>，；若b为0，则直接输出a即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="欧拉函数"><a class="markdownIt-Anchor" href="#欧拉函数"></a> 欧拉函数</h2>
<p><strong>欧拉函数定义</strong></p>
<p><img src="%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/image-20220920090919658.png" alt="image-20220920090919658" /></p>
<p>朴素版求欧拉函数，将N分解质因子，并求欧拉函数。</p>
<p><strong>时间复杂度</strong>：O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">phi</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) res = res / x * (x - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="筛选法求欧拉函数"><a class="markdownIt-Anchor" href="#筛选法求欧拉函数"></a> 筛选法求欧拉函数</h3>
<p><strong>时间复杂度</strong>：O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span>)</p>
<p><strong>代码解释</strong>：</p>
<ul>
<li>质数 i 的欧拉函数即为<code>phi[i] = i - 1</code>，1 ~ i - 1均与 i 互质，共i-1个。</li>
<li><code>phi[primes[j] * i]</code> 分为两种情况：
<ol>
<li><code>i % primes[j] == 0</code> 时：<code>primes[j]</code> 是 i 的最小质因子，也是<code>primes[j] * i</code> 的最小质因子，因此<code>1 - 1 / primes[j]</code> 这一项在 <code>phi[i]</code>中计算过了，只需要将基数N修正为<code>primes[j]</code>倍即可，最终结果为<code>phi[i] * primes[j]</code></li>
<li><code>i % primes[j] != 0</code> 时：<code>primes[j]</code> 不是 i 的质因子，只是<code>primes[j] * i</code> 的最小质因子，因此不仅需要将基数N修正为<code>primes[j]</code>倍，还需要跑补上<code>1 - 1 / primes[j]</code>这一项。则最终结果为<code>phi[i] * (primes[j] - 1)</code></li>
</ol>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有素数</span></span><br><span class="line"><span class="type">int</span> euler[N];           <span class="comment">// 存储每个数的欧拉函数</span></span><br><span class="line"><span class="type">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_eulers</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    euler[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            primes[cnt ++ ] = i;</span><br><span class="line">            euler[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = primes[j] * i;</span><br><span class="line">            st[t] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                euler[t] = euler[i] * primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            euler[t] = euler[i] * (primes[j] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="快速幂"><a class="markdownIt-Anchor" href="#快速幂"></a> 快速幂</h2>
<p>用于快速的求出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mi>k</mi></msup><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">a ^ k \% p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.043548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathdefault">p</span></span></span></span></p>
<p><strong>时间复杂度</strong>：O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">\log{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span></span>)，其中k为指数。</p>
<p><strong>算法思想</strong>：预处理出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mo stretchy="false">(</mo></msup><msup><mn>2</mn><mn>0</mn></msup><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">a^(2^0) \% p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mopen mtight">(</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">p</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mo stretchy="false">(</mo></msup><msup><mn>2</mn><mn>1</mn></msup><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">a^(2^1) \% p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mopen mtight">(</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">p</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mo stretchy="false">(</mo></msup><msup><mn>2</mn><mn>2</mn></msup><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">a^(2^2) \% p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mopen mtight">(</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">p</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mo stretchy="false">(</mo></msup><msup><mn>2</mn><mn>3</mn></msup><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">a^(2^3) \% p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mopen mtight">(</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">p</span></span></span></span>…，然后将k转为2进制，进而转为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>x</mi><mn>1</mn></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mi>x</mi><mn>2</mn></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mi>x</mi><mn>3</mn></mrow></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">2^{x1} + 2^{x2} + 2^{x3} + ...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.10556em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">求 m^k mod p，时间复杂度 <span class="built_in">O</span>(logk)。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> k, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span> % p, t = m;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&amp;<span class="number">1</span>) res = res * t % p; <span class="comment">// 当前位为1</span></span><br><span class="line">        t = t * t % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扩展欧几里得算法"><a class="markdownIt-Anchor" href="#扩展欧几里得算法"></a> 扩展欧几里得算法</h2>
<p><strong>裴蜀定理</strong></p>
<ul>
<li>对于任意正整数a，b，那么一定存在正数x，y使得  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ax + by = gcd(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span> 。<code>gcd(a,b)</code> 是a和b的最大公约数，也是 a 和 b 能凑成的最小正整数。</li>
</ul>
<p><strong>求解过程</strong></p>
<ul>
<li>当 <code>b == 0</code> 时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">ax + by = a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，因此有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x = 1, y = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li>
<li>当 <code>b != 0</code> 时，</li>
</ul>
<p><img src="%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/image-20220920210810212.png" alt="image-20220920210810212" /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求x, y，使得ax + by = gcd(a, b)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) <span class="comment">// b == 0, 此时a为最大公约数 则 ax + b0 = a</span></span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x); <span class="comment">// by + (a mod b)x = d</span></span><br><span class="line">    y -= (a/b) * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="高斯消元"><a class="markdownIt-Anchor" href="#高斯消元"></a> 高斯消元</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a[N][N]是增广矩阵</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gauss</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c, r;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="number">0</span>, r = <span class="number">0</span>; c &lt; n; c ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; i ++ )   <span class="comment">// 找到绝对值最大的行</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][c]) &gt; <span class="built_in">fabs</span>(a[t][c]))</span><br><span class="line">                t = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[t][c]) &lt; eps) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = c; i &lt;= n; i ++ ) <span class="built_in">swap</span>(a[t][i], a[r][i]);      <span class="comment">// 将绝对值最大的行换到最顶端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];      <span class="comment">// 将当前行的首位变成1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r + <span class="number">1</span>; i &lt; n; i ++ )       <span class="comment">// 用当前行将下面所有的列消成0</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][c]) &gt; eps)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt;= c; j -- )</span><br><span class="line">                    a[i][j] -= a[r][j] * a[i][c];</span><br><span class="line"></span><br><span class="line">        r ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][n]) &gt; eps)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">// 无解</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 有无穷多组解</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j ++ )</span><br><span class="line">            a[i][n] -= a[i][j] * a[j][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 有唯一解</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AcWing</category>
        <category>Course</category>
      </categories>
      <tags>
        <tag>AcWing</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 每日一题 &amp; 秋招</title>
    <url>/2022/08/13/AcWing/AutumnTricks/</url>
    <content><![CDATA[<h2 id="学习平台"><a class="markdownIt-Anchor" href="#学习平台"></a> 学习平台</h2>
<p><a href="https://www.acwing.com/about/"> AcWing </a> 、 <a href="https://leetcode.cn/"> LeetCode </a></p>
<h2 id="题目1用户分组"><a class="markdownIt-Anchor" href="#题目1用户分组"></a> 题目1：用户分组</h2>
<p><a href="https://leetcode.cn/problems/group-the-people-given-the-group-size-they-belong-to/">1282. 用户分组</a></p>
<h3 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h3>
<p><code>数组</code>、<code>哈希表</code></p>
<h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">groupThePeople</span>(vector&lt;<span class="type">int</span>&gt;&amp; groupSizes) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; hash;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; groupSizes.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            <span class="type">int</span> x = groupSizes[i];</span><br><span class="line">            hash[x].<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(hash[x].<span class="built_in">size</span>() == x) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(hash[x]);</span><br><span class="line">                hash[x].<span class="built_in">clear</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 n 是 <em>groupSize</em>的长度，需遍历一遍数组。</li>
<li>空间复杂度：<em>O(n)</em>，主要取决于哈希表。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：8 ms, 在所有 C++ 提交中击败了88.05%的用户</p>
<p>内存消耗：12.7 MB, 在所有 C++ 提交中击败了63.05%的用户</p>
<p>通过测试用例：103 / 103</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">groupThePeople</span><span class="params">(<span class="type">int</span>[] groupSizes)</span> &#123;</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; groupSizes.length; i ++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> groupSizes[i];</span><br><span class="line">            <span class="keyword">if</span>(map.get(x) == <span class="literal">null</span>)</span><br><span class="line">                map.put(x, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            map.get(x).add(i);</span><br><span class="line">            <span class="keyword">if</span>(map.get(x).size() == x)&#123;</span><br><span class="line">                res.add(map.get(x));</span><br><span class="line">                map.put(x, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 n 是 <em>groupSize</em>的长度，需遍历一遍数组。</li>
<li>空间复杂度：<em>O(n)</em>，主要取决于哈希表。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：7 ms, 在所有 Java 提交中击败了42.69%的用户</p>
<p>内存消耗：41.8 MB, 在所有 Java 提交中击败了81.09%的用户</p>
<p>通过测试用例：103 / 103</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">groupThePeople</span>(<span class="params">self, groupSizes: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="built_in">hash</span> = &#123;&#125;</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(groupSizes)):</span><br><span class="line">            x = groupSizes[i]</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">hash</span>:</span><br><span class="line">                <span class="built_in">hash</span>[x] = []</span><br><span class="line">            <span class="built_in">hash</span>[x].append(i)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">hash</span>[x]) == x:</span><br><span class="line">                res.append(<span class="built_in">hash</span>[x])</span><br><span class="line">                <span class="built_in">hash</span>[x] = []</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 n 是 <em>groupSize</em>的长度，需遍历一遍数组。</li>
<li>空间复杂度：<em>O(n)</em>，主要取决于哈希表。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：44 ms, 在所有 Python3 提交中击败了47.85%的用户</p>
<p>内存消耗：15 MB, 在所有 Python3 提交中击败了64.26%的用户</p>
<p>通过测试用例：103 / 103</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2最多能完成排序的块ii"><a class="markdownIt-Anchor" href="#题目2最多能完成排序的块ii"></a> 题目2：最多能完成排序的块Ⅱ</h2>
<p><a href="https://leetcode.cn/problems/max-chunks-to-make-sorted-ii/">768. 最多能完成排序的块 II</a></p>
<h3 id="标签-2"><a class="markdownIt-Anchor" href="#标签-2"></a> 标签</h3>
<p><code>栈</code>、<code>贪心</code>、<code>数组</code>、<code>排序</code>、<code>单调栈</code></p>
<h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3>
<ul>
<li>方法1：<strong>单调栈</strong></li>
</ul>
<p>对于已经分好块的数组，若块数大于 1，则可以得到以下结论：右边的块的所有数字均大于或等于左边的块的所有数字。</p>
<ul>
<li>方法2：<strong>排序</strong> + <strong>哈希表</strong></li>
</ul>
<p>将数组进行排序，然后依次比对，若在某个区间内，该区间内未排序前的数字和排序后的数字完全相等，则为一个区间。</p>
<h3 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++单调栈</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li><li class="tab"><button type="button" data-href="#题解-4">C++哈希表</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxChunksToSorted</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : arr)&#123;</span><br><span class="line">            <span class="type">int</span> t = x;</span><br><span class="line">            <span class="keyword">while</span>(stk.<span class="built_in">size</span>() &gt; <span class="number">0</span> &amp;&amp; stk.<span class="built_in">top</span>() &gt; x) &#123;</span><br><span class="line">                t = <span class="built_in">max</span>(t, stk.<span class="built_in">top</span>()); <span class="comment">// 求已删除的最大值</span></span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            stk.<span class="built_in">push</span>(t); <span class="comment">// 将该区间的最右边元素入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 n 是 <em>arr</em>的长度，需遍历一遍数组，入栈的操作最多为n次。</li>
<li>空间复杂度：<em>O(n)</em>，栈的长度最多为n。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：12 ms, 在所有 C++ 提交中击败了57.56%的用户</p>
<p>内存消耗：12 MB, 在所有 C++ 提交中击败了61.94%的用户</p>
<p>通过测试用例：139 / 139</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxChunksToSorted</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stk = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : arr) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> x;</span><br><span class="line">            <span class="keyword">while</span>(stk.size() &gt; <span class="number">0</span> &amp;&amp; stk.peek() &gt; x) &#123;  <span class="comment">// peek栈顶元素</span></span><br><span class="line">                t = Math.max(t, stk.peek());</span><br><span class="line">                stk.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            stk.push(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 n 是 <em>arr</em>的长度，需遍历一遍数组，入栈的操作最多为n次。</li>
<li>空间复杂度：<em>O(n)</em>，栈的长度最多为n。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：9 ms, 在所有 Java 提交中击败了10.83%的用户</p>
<p>内存消耗：41 MB, 在所有 Java 提交中击败了87.61%的用户</p>
<p>通过测试用例：139 / 139</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxChunksToSorted</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        stk = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line">            t = x</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(stk) <span class="keyword">and</span> stk[-<span class="number">1</span>] &gt; x:</span><br><span class="line">                t = <span class="built_in">max</span>(t, stk[-<span class="number">1</span>])</span><br><span class="line">                stk.pop()</span><br><span class="line">            stk.append(t)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(stk)</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 n 是 <em>arr</em>的长度，需遍历一遍数组，入栈的操作最多为n次。</li>
<li>空间复杂度：<em>O(n)</em>，栈的长度最多为n。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：40 ms, 在所有 Python3 提交中击败了91.12%的用户</p>
<p>内存消耗：15.2 MB, 在所有 Python3 提交中击败了62.74%的用户</p>
<p>通过测试用例：139 / 139</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-4"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxChunksToSorted</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> b = arr;</span><br><span class="line">        <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, cnt = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i ++)&#123;  <span class="comment">// cnt记录哈希表中非零元素的个数</span></span><br><span class="line">            hash[arr[i]] ++;</span><br><span class="line">            <span class="keyword">if</span>(hash[arr[i]] == <span class="number">0</span>) cnt --;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(hash[arr[i]] == <span class="number">1</span>) cnt ++;</span><br><span class="line">            hash[b[i]] --;</span><br><span class="line">            <span class="keyword">if</span>(hash[b[i]] == <span class="number">0</span>) cnt --;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(hash[b[i]] == <span class="number">-1</span>) cnt ++;</span><br><span class="line">            <span class="keyword">if</span>(!cnt) res ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n logn)</em>，其中 n 是 <em>arr</em>的长度，排序需要消耗 <em>O</em>(nlogn)的时间复杂度，只需遍历一遍数组。</li>
<li>空间复杂度：<em>O(n)</em>，排序完的数组和哈希表均需要消耗 <em>O</em>(<em>n</em>) 的空间复杂度。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：24 ms, 在所有 C++ 提交中击败了13.58%的用户</p>
<p>内存消耗：13.5 MB, 在所有 C++ 提交中击败了10.45%的用户</p>
<p>通过测试用例：139 / 139</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目3统计子矩阵"><a class="markdownIt-Anchor" href="#题目3统计子矩阵"></a> 题目3：统计子矩阵</h2>
<p><a href="https://www.acwing.com/problem/content/4408/"> 统计子矩阵 </a></p>
<h3 id="标签-3"><a class="markdownIt-Anchor" href="#标签-3"></a> 标签</h3>
<p><code>枚举</code>、<code>前缀和</code>、<code>双指针</code></p>
<h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3>
<p>需要求解每列的前缀和，然后控制子区间的上边界、下边界，右边界，通过右边界求解相应的左边界位置，进而求解满足要求的子区间个数。</p>
<h3 id="题解-3"><a class="markdownIt-Anchor" href="#题解-3"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="comment">// 求每一列的前缀和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)&#123;</span><br><span class="line">            cin &gt;&gt; s[i][j];</span><br><span class="line">            s[i][j] += s[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    ll res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)  <span class="comment">// 遍历上边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt;= n; j ++) &#123;  <span class="comment">// 遍历下边界</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>, sum = <span class="number">0</span>; r &lt;= m; r ++)&#123;  <span class="comment">// 遍历左右边界</span></span><br><span class="line">                sum += s[j][r] - s[i - <span class="number">1</span>][r]; <span class="comment">// 求和</span></span><br><span class="line">                <span class="keyword">while</span>(sum &gt; k) &#123;</span><br><span class="line">                    sum -= s[j][l] - s[i - <span class="number">1</span>][l];</span><br><span class="line">                    l ++;</span><br><span class="line">                &#125;</span><br><span class="line">                res += r - l + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n ^ 3)</em>，其中 n 是 <em>s</em> 的行数，需遍历三次。</li>
<li>空间复杂度：<em>O(1)</em>，没有额外空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：1927 ms,</p>
<p>内存消耗：2268 KB</p>
<p>通过测试用例：103 / 103</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cin.nextInt(), m = cin.nextInt(), k = cin.nextInt();</span><br><span class="line">        <span class="type">int</span> [][]s = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt;= m; j ++)</span><br><span class="line">                s[i][j] = cin.nextInt() + s[i - <span class="number">1</span>][j];</span><br><span class="line">    </span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>, r = <span class="number">1</span>, sum = <span class="number">0</span>; r &lt;= m; r ++)&#123;</span><br><span class="line">                    sum += s[j][r] - s[i - <span class="number">1</span>][r];</span><br><span class="line">                    <span class="keyword">while</span>(sum &gt; k)&#123;</span><br><span class="line">                        sum -= s[j][l] - s[i - <span class="number">1</span>][l];</span><br><span class="line">                        l ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res += r - l + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n ^ 3)</em>，其中 n 是 <em>s</em> 的行数，需遍历三次。</li>
<li>空间复杂度：<em>O(1)</em>，没有额外空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4449 ms</p>
<p>内存消耗：45100 KB</p>
<p>通过测试用例：103 / 103</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n, m, k = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()) <span class="comment"># 处理输入，以空格划分</span></span><br><span class="line"></span><br><span class="line">s = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]] <span class="comment"># 第一行全为 0 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    s.append([<span class="number">0</span>] + <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())))  <span class="comment"># 每行的第一列都是 0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        s[i][j] += s[i - <span class="number">1</span>][j]</span><br><span class="line"></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n + <span class="number">1</span>):</span><br><span class="line">        l = <span class="number">1</span></span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">sum</span> += s[j][r] - s[i - <span class="number">1</span>][r]</span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">sum</span> &gt; k:</span><br><span class="line">                <span class="built_in">sum</span> -= s[j][l] - s[i - <span class="number">1</span>][l]</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            res += r - l + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n ^ 3)</em>，其中 n 是 <em>s</em> 的行数，需遍历三次。</li>
<li>空间复杂度：<em>O(1)</em>，没有额外空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：5429 ms</p>
<p>内存消耗：40128 KB</p>
<p>通过测试用例：103 / 103</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目4设计双端队列"><a class="markdownIt-Anchor" href="#题目4设计双端队列"></a> 题目4：设计双端队列⭐</h2>
<p><a href="https://leetcode.cn/problems/design-circular-deque/"> 设计循环双端队列 </a></p>
<h3 id="标签-4"><a class="markdownIt-Anchor" href="#标签-4"></a> 标签</h3>
<p><code>设计</code>、<code>队列</code>、<code>数组</code>、<code>链表</code></p>
<h3 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h3>
<p>使用长度为<code>k + 1</code>的数组来模拟循环队列，额外多用一个空间。</p>
<ul>
<li><code>front</code>：队头指针，直接指向对头元素，</li>
<li><code>rear</code>：队尾指针，指向队尾元素的下一位置。</li>
<li>判断对空：<code>front == rear</code> 则队空</li>
<li>判断队满：<code>rear - front == k</code> 则队满</li>
</ul>
<h3 id="题解-4"><a class="markdownIt-Anchor" href="#题解-4"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCircularDeque</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MyCircularDeque</span>(<span class="type">int</span> k) &#123;</span><br><span class="line">        q.<span class="built_in">resize</span>(k + <span class="number">1</span>); <span class="comment">// 设置数组的长度</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;  <span class="comment">// 将x重新设置为 hh~tt内的值</span></span><br><span class="line">        <span class="keyword">return</span> (x + q.<span class="built_in">size</span>()) % q.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insertFront</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isFull</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        hh = <span class="built_in">get</span>(hh - <span class="number">1</span>);</span><br><span class="line">        q[hh] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insertLast</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isFull</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        q[tt] = value;</span><br><span class="line">        tt = <span class="built_in">get</span>(tt + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deleteFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isEmpty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        hh = <span class="built_in">get</span>(hh + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">deleteLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isEmpty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        tt = <span class="built_in">get</span>(tt - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isEmpty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> q[hh];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getRear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isEmpty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> q[<span class="built_in">get</span>(tt - <span class="number">1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tt == hh;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tt == <span class="built_in">get</span>(hh - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCircularDeque object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCircularDeque* obj = new MyCircularDeque(k);</span></span><br><span class="line"><span class="comment"> * bool param_1 = obj-&gt;insertFront(value);</span></span><br><span class="line"><span class="comment"> * bool param_2 = obj-&gt;insertLast(value);</span></span><br><span class="line"><span class="comment"> * bool param_3 = obj-&gt;deleteFront();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj-&gt;deleteLast();</span></span><br><span class="line"><span class="comment"> * int param_5 = obj-&gt;getFront();</span></span><br><span class="line"><span class="comment"> * int param_6 = obj-&gt;getRear();</span></span><br><span class="line"><span class="comment"> * bool param_7 = obj-&gt;isEmpty();</span></span><br><span class="line"><span class="comment"> * bool param_8 = obj-&gt;isFull();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(1)</em>，初始化和每项操作的时间复杂度均为 <em>O</em>(1)。</li>
<li>空间复杂度：<em>O(k)</em>，其中 <em>k</em> 为给定的队列元素数目。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：28 ms, 在所有 C++ 提交中击败了41.89%的用户</p>
<p>内存消耗：16.3 MB, 在所有 C++ 提交中击败了67.79%的用户</p>
<p>通过测试用例：51 / 51</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCircularDeque</span> &#123;</span><br><span class="line">    <span class="type">int</span> []q;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hh</span> <span class="operator">=</span> <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCircularDeque</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        q = <span class="keyword">new</span> <span class="title class_">int</span>[k + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (x + q.length) % q.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insertFront</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        hh = get(hh - <span class="number">1</span>);</span><br><span class="line">        q[hh] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insertLast</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        q[tt] = value;</span><br><span class="line">        tt = get(tt + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteFront</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        hh = get(hh + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        tt = get(tt - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFront</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> q[hh];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> q[get(tt - <span class="number">1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tt == hh;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tt == get(hh - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCircularDeque object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCircularDeque obj = new MyCircularDeque(k);</span></span><br><span class="line"><span class="comment"> * boolean param_1 = obj.insertFront(value);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.insertLast(value);</span></span><br><span class="line"><span class="comment"> * boolean param_3 = obj.deleteFront();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.deleteLast();</span></span><br><span class="line"><span class="comment"> * int param_5 = obj.getFront();</span></span><br><span class="line"><span class="comment"> * int param_6 = obj.getRear();</span></span><br><span class="line"><span class="comment"> * boolean param_7 = obj.isEmpty();</span></span><br><span class="line"><span class="comment"> * boolean param_8 = obj.isFull();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(1)</em>，初始化和每项操作的时间复杂度均为 <em>O</em>(1)。</li>
<li>空间复杂度：<em>O(k)</em>，其中 <em>k</em> 为给定的队列元素数目。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4 ms, 在所有 Java 提交中击败了100.00%的用户</p>
<p>内存消耗：42.2 MB, 在所有 Java 提交中击败了19.97%的用户</p>
<p>通过测试用例：51 / 51</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCircularDeque</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, k: <span class="built_in">int</span></span>):</span><br><span class="line">        self.q = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k + <span class="number">1</span>)]</span><br><span class="line">        self.hh = <span class="number">0</span></span><br><span class="line">        self.tt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, x</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> (x + <span class="built_in">len</span>(self.q)) % <span class="built_in">len</span>(self.q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertFront</span>(<span class="params">self, value: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> self.isFull():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.hh = self.get(self.hh - <span class="number">1</span>)</span><br><span class="line">        self.q[self.hh] = value</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertLast</span>(<span class="params">self, value: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> self.isFull():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.q[self.tt] = value</span><br><span class="line">        self.tt = self.get(self.tt + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteFront</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.hh = self.get(self.hh + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteLast</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.tt = self.get(self.tt - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getFront</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.q[self.hh]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getRear</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> self.isEmpty():</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.q[self.get(self.tt - <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.hh == self.tt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isFull</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.tt == self.get(self.hh - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyCircularDeque object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyCircularDeque(k)</span></span><br><span class="line"><span class="comment"># param_1 = obj.insertFront(value)</span></span><br><span class="line"><span class="comment"># param_2 = obj.insertLast(value)</span></span><br><span class="line"><span class="comment"># param_3 = obj.deleteFront()</span></span><br><span class="line"><span class="comment"># param_4 = obj.deleteLast()</span></span><br><span class="line"><span class="comment"># param_5 = obj.getFront()</span></span><br><span class="line"><span class="comment"># param_6 = obj.getRear()</span></span><br><span class="line"><span class="comment"># param_7 = obj.isEmpty()</span></span><br><span class="line"><span class="comment"># param_8 = obj.isFull()</span></span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(1)</em>，初始化和每项操作的时间复杂度均为 <em>O</em>(1)。</li>
<li>空间复杂度：<em>O(k)</em>，其中 <em>k</em> 为给定的队列元素数目。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：68 ms, 在所有 Python3 提交中击败了89.03%的用户</p>
<p>内存消耗：15.7 MB, 在所有 Python3 提交中击败了45.89%的用户</p>
<p>通过测试用例：51 / 51</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目5设计有序流"><a class="markdownIt-Anchor" href="#题目5设计有序流"></a> 题目5：设计有序流</h2>
<p><a href="https://leetcode.cn/problems/design-an-ordered-stream/"> 设计有序流 </a></p>
<h3 id="标签-5"><a class="markdownIt-Anchor" href="#标签-5"></a> 标签</h3>
<p><code>设计</code>、<code>数组</code>、<code>哈希表</code>、<code>数据流</code></p>
<h3 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h3>
<h3 id="题解-5"><a class="markdownIt-Anchor" href="#题解-5"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderedStream</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; strs;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">OrderedStream</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        strs.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">insert</span><span class="params">(<span class="type">int</span> idKey, string value)</span> </span>&#123;</span><br><span class="line">        strs[idKey - <span class="number">1</span>] = value;</span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; strs.<span class="built_in">size</span>() &amp;&amp; strs[k].<span class="built_in">size</span>())</span><br><span class="line">            res.<span class="built_in">push_back</span>(strs[k ++ ]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your OrderedStream object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * OrderedStream* obj = new OrderedStream(n);</span></span><br><span class="line"><span class="comment"> * vector&lt;string&gt; param_1 = obj-&gt;insert(idKey,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em></li>
<li>空间复杂度：<em>O(n)</em>，即为存储 <em>n</em> 个字符串需要的空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：80 ms, 在所有 C++ 提交中击败了98.95%的用户</p>
<p>内存消耗：81.6 MB, 在所有 C++ 提交中击败了66.25%的用户</p>
<p>通过测试用例：101 / 101</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderedStream</span> &#123;</span><br><span class="line">    String []strs;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderedStream</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        strs = <span class="keyword">new</span> <span class="title class_">String</span>[n];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">insert</span><span class="params">(<span class="type">int</span> idKey, String value)</span> &#123;</span><br><span class="line">        strs[idKey - <span class="number">1</span>] = value;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(k &lt; strs.length &amp;&amp; strs[k] != <span class="literal">null</span>)</span><br><span class="line">            res.add(strs[k ++]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your OrderedStream object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * OrderedStream obj = new OrderedStream(n);</span></span><br><span class="line"><span class="comment"> * List&lt;String&gt; param_1 = obj.insert(idKey,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em></li>
<li>空间复杂度：<em>O(n)</em>，即为存储 <em>n</em> 个字符串需要的空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：74 ms, 在所有 Java 提交中击败了57.69%的用户</p>
<p>内存消耗：42 MB, 在所有 Java 提交中击败了99.79%的用户</p>
<p>通过测试用例：101 / 101</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OrderedStream</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n: <span class="built_in">int</span></span>):</span><br><span class="line">        self.strs = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        self.k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, idKey: <span class="built_in">int</span>, value: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        self.strs[idKey - <span class="number">1</span>] = value</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> self.k &lt; <span class="built_in">len</span>(self.strs) <span class="keyword">and</span> self.strs[self.k] != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            res.append(self.strs[self.k])</span><br><span class="line">            self.k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your OrderedStream object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = OrderedStream(n)</span></span><br><span class="line"><span class="comment"># param_1 = obj.insert(idKey,value)</span></span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em></li>
<li>空间复杂度：<em>O(n)</em>，即为存储 <em>n</em> 个字符串需要的空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：148 ms, 在所有 Python3 提交中击败了33.21%的用户</p>
<p>内存消耗：15.6 MB, 在所有 Python3 提交中击败了82.20%的用户</p>
<p>通过测试用例：101 / 101</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目6层数最深叶子节点的和"><a class="markdownIt-Anchor" href="#题目6层数最深叶子节点的和"></a> 题目6：层数最深叶子节点的和</h2>
<p><a href="https://leetcode.cn/problems/deepest-leaves-sum/"> 层数最深叶子节点的和 </a></p>
<h3 id="标签-6"><a class="markdownIt-Anchor" href="#标签-6"></a> 标签</h3>
<p><code>树</code>、<code>深度优先搜索</code>、<code>广度优先搜索</code>、<code>二叉树</code></p>
<h3 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h3>
<p>深度优先搜索遍历二叉树，遍历的时候维护层数：</p>
<ul>
<li>若当前层数和目前最大层数相同，则结果加上该节点的值</li>
<li>若当前层数大于目前最大层数，则结果清零，并且层数重置为当前层数。</li>
</ul>
<h3 id="题解-6"><a class="markdownIt-Anchor" href="#题解-6"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> max = <span class="number">-1</span>; <span class="comment">// 记录最大的深度</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, <span class="type">int</span> deep)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max &lt; deep) &#123;</span><br><span class="line">            max = deep;</span><br><span class="line">            sum = root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(max == deep)&#123;</span><br><span class="line">            sum += root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;left, deep + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;right, deep + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">deepestLeavesSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是二叉树的节点数。深度优先搜索需要遍历每个节点一次。</li>
<li>空间复杂度：<em>O(n)</em>，其中 <em>n</em> 是二叉树的节点数。空间复杂度主要取决于递归调用栈的深度，为二叉树的深度，最坏情况下二叉树的深度是 O*(<em>n</em>)。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：92 ms, 在所有 C++ 提交中击败了50.95%的用户</p>
<p>内存消耗：58.4 MB, 在所有 C++ 提交中击败了69.41%的用户</p>
<p>通过测试用例：39 / 39</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> deep)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max &lt; deep) &#123;</span><br><span class="line">            max = deep;</span><br><span class="line">            sum = root.val;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>( max == deep)&#123;</span><br><span class="line">            sum += root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.left, deep + <span class="number">1</span>);</span><br><span class="line">        dfs(root.right, deep + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deepestLeavesSum</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是二叉树的节点数。深度优先搜索需要遍历每个节点一次。</li>
<li>空间复杂度：<em>O(n)</em>，其中 <em>n</em> 是二叉树的节点数。空间复杂度主要取决于递归调用栈的深度，为二叉树的深度，最坏情况下二叉树的深度是 O*(<em>n</em>)。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00%的用户</p>
<p>内存消耗：43.8 MB, 在所有 Java 提交中击败了60.33%的用户</p>
<p>通过测试用例：39 / 39</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deepestLeavesSum</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        depth, <span class="built_in">sum</span> = -<span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">root, d</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">nonlocal</span> depth, <span class="built_in">sum</span></span><br><span class="line">            <span class="keyword">if</span> d &gt; depth:</span><br><span class="line">                depth = d</span><br><span class="line">                <span class="built_in">sum</span> = root.val</span><br><span class="line">            <span class="keyword">elif</span> d == depth:</span><br><span class="line">                <span class="built_in">sum</span> += root.val</span><br><span class="line">            dfs(root.left, d + <span class="number">1</span>)</span><br><span class="line">            dfs(root.right, d + <span class="number">1</span>)</span><br><span class="line">        dfs(root, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是二叉树的节点数。深度优先搜索需要遍历每个节点一次。</li>
<li>空间复杂度：<em>O(n)</em>，其中 <em>n</em> 是二叉树的节点数。空间复杂度主要取决于递归调用栈的深度，为二叉树的深度，最坏情况下二叉树的深度是 O*(<em>n</em>)。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：224 ms, 在所有 Python3 提交中击败了25.20%的用户</p>
<p>内存消耗：19.3 MB, 在所有 Python3 提交中击败了64.49%的用户</p>
<p>通过测试用例：39 / 39</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目7最大相等频率"><a class="markdownIt-Anchor" href="#题目7最大相等频率"></a> 题目7：最大相等频率</h2>
<p><a href="https://leetcode.cn/problems/maximum-equal-frequency/"> 最大相等频率 </a></p>
<h3 id="标签-7"><a class="markdownIt-Anchor" href="#标签-7"></a> 标签</h3>
<p><code>数组</code>、<code>哈希表</code></p>
<h3 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h3>
<p>使用两个哈希表</p>
<ul>
<li>第一个哈希表<code>cnt</code>记录对应的数在数组中出现的次数（高度）</li>
<li>第二个哈希表<code>hash</code>记录某个次数（高度）出现的次数。</li>
</ul>
<p>分情况讨论：</p>
<ul>
<li>若总共只有一种高度，有两种情况
<ul>
<li>这个高度对应的次数只有一种 <code>hash.second == 1</code></li>
<li>这个高度为1 <code>hash.first == 1</code></li>
</ul>
</li>
<li>若总共只有两种高度，有两种情况
<ul>
<li>较小的高度为1，并且只有一次 <code>hash[0].first == 1 &amp;&amp; hash[0].second == 1</code></li>
<li>较大的高度是较小的高度 + 1，并且较大的高度只有一个 <code>hash[1].first == hash[0].first + 1 &amp;&amp; hash[1].second == 1</code></li>
</ul>
</li>
<li>若高度有三种，则不存在解题方法。</li>
</ul>
<h3 id="题解-7"><a class="markdownIt-Anchor" href="#题解-7"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxEqualFreq</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cnt, hash; <span class="comment">// cnt记录x出现的次数（高度）， hash记录某个次数（高度）出现的个数（次数）</span></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt.<span class="built_in">count</span>(x)) &#123;  <span class="comment">// cnt已经加过x了</span></span><br><span class="line">                hash[cnt[x]] --;  <span class="comment">// 将之前的cnt[x] 次数减一</span></span><br><span class="line">                <span class="keyword">if</span>(!hash[cnt[x]]) hash.<span class="built_in">erase</span>(cnt[x]); <span class="comment">// 如果减一之后变为0了，则将cnt[x]从hash中删除</span></span><br><span class="line">            &#125;</span><br><span class="line">            cnt[x] ++;</span><br><span class="line">            hash[cnt[x]] ++;</span><br><span class="line">            len ++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(hash.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">auto</span> it = hash.<span class="built_in">begin</span>();</span><br><span class="line">                <span class="keyword">if</span>(it-&gt;first == <span class="number">1</span> || it-&gt;second == <span class="number">1</span>) <span class="comment">// 如果所有柱子的高度等于1 或者 高度不唯一，但只有一个柱子</span></span><br><span class="line">                    res = len; </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(hash.<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">                vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">tmp</span>(hash.<span class="built_in">begin</span>(), hash.<span class="built_in">end</span>());</span><br><span class="line">                <span class="keyword">if</span>(tmp[<span class="number">0</span>].first &gt; tmp[<span class="number">1</span>].first) <span class="built_in">swap</span>(tmp[<span class="number">0</span>], tmp[<span class="number">1</span>]);  <span class="comment">// 如果第一个数比第二个数大，则交换</span></span><br><span class="line">                <span class="keyword">if</span>(tmp[<span class="number">0</span>].first == <span class="number">1</span> &amp;&amp; tmp[<span class="number">0</span>].second == <span class="number">1</span>) res = len;  <span class="comment">// 较小的数只有一个并且高度为1 </span></span><br><span class="line">                <span class="keyword">if</span>(tmp[<span class="number">1</span>].first == tmp[<span class="number">0</span>].first + <span class="number">1</span> &amp;&amp; tmp[<span class="number">1</span>].second == <span class="number">1</span>) res = len;  <span class="comment">// 较大的数的高度是较小数的高度 + 1，并且较大的数只有一个</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是数组中元素的个数，遍历一遍数组。</li>
<li>空间复杂度：<em>O(n)</em>，两个哈希表需要 <em>O</em>(n) 个空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：232 ms, 在所有 C++ 提交中击败了9.34%的用户</p>
<p>内存消耗：64.1 MB, 在所有 C++ 提交中击败了12.05%的用户</p>
<p>通过测试用例：45 / 45</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxEqualFreq</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), hash = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> cnt.get(x);</span><br><span class="line">            <span class="keyword">if</span>(c != <span class="literal">null</span>) &#123;</span><br><span class="line">                hash.put(c, hash.get(c) - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(hash.get(c) == <span class="number">0</span>)  hash.remove(c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cnt.put(x, cnt.getOrDefault(x, <span class="number">0</span>) + <span class="number">1</span>); <span class="comment">// cnt[x] ++;</span></span><br><span class="line">            hash.put(cnt.get(x), hash.getOrDefault(cnt.get(x), <span class="number">0</span>) + <span class="number">1</span>);  <span class="comment">// hash[cnt[x]] ++;</span></span><br><span class="line">            len ++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(hash.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(Map.Entry&lt;Integer, Integer&gt; entry : hash.entrySet()) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(entry.getKey() == <span class="number">1</span> || entry.getValue() == <span class="number">1</span>)</span><br><span class="line">                        res = len;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hash.size() == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">int</span> [][]tmp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(Map.Entry&lt;Integer, Integer&gt; entry : hash.entrySet()) &#123;</span><br><span class="line">                    tmp[k][<span class="number">0</span>] = entry.getKey();</span><br><span class="line">                    tmp[k][<span class="number">1</span>] = entry.getValue();</span><br><span class="line">                    k ++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(tmp[<span class="number">0</span>][<span class="number">0</span>] &gt; tmp[<span class="number">1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> tmp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">                    tmp[<span class="number">0</span>][<span class="number">0</span>] = tmp[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                    tmp[<span class="number">1</span>][<span class="number">0</span>] = t;</span><br><span class="line">                    t = tmp[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">                    tmp[<span class="number">0</span>][<span class="number">1</span>] = tmp[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">                    tmp[<span class="number">1</span>][<span class="number">1</span>] = t;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(tmp[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; tmp[<span class="number">0</span>][<span class="number">1</span>] == <span class="number">1</span>) res = len;</span><br><span class="line">                <span class="keyword">if</span>(tmp[<span class="number">1</span>][<span class="number">0</span>] == tmp[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1</span> &amp;&amp; tmp[<span class="number">1</span>][<span class="number">1</span>] == <span class="number">1</span>) res = len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是数组中元素的个数，遍历一遍数组。</li>
<li>空间复杂度：<em>O(n)</em>，两个哈希表需要 <em>O</em>(n) 个空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：107 ms, 在所有 Java 提交中击败了7.61%的用户</p>
<p>内存消耗：50.4 MB, 在所有 Java 提交中击败了63.29%的用户</p>
<p>通过测试用例：45 / 45</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxEqualFreq</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        cnt, <span class="built_in">hash</span> = &#123;&#125;, &#123;&#125;</span><br><span class="line">        res = length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> cnt:</span><br><span class="line">                <span class="built_in">hash</span>[cnt[x]] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">hash</span>[cnt[x]] == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">del</span> <span class="built_in">hash</span>[cnt[x]]</span><br><span class="line">            cnt[x] = cnt.get(x, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            <span class="built_in">hash</span>[cnt[x]] = <span class="built_in">hash</span>.get(cnt[x], <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">hash</span>) == <span class="number">1</span>:</span><br><span class="line">                items = <span class="built_in">list</span>(<span class="built_in">hash</span>.items())</span><br><span class="line">                <span class="keyword">if</span> items[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> <span class="keyword">or</span> items[<span class="number">0</span>][<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">                    res = length</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(<span class="built_in">hash</span>) == <span class="number">2</span>:</span><br><span class="line">                items = <span class="built_in">list</span>(<span class="built_in">hash</span>.items())</span><br><span class="line">                <span class="keyword">if</span> items[<span class="number">0</span>][<span class="number">0</span>] &gt; items[<span class="number">1</span>][<span class="number">0</span>]:</span><br><span class="line">                    items[<span class="number">0</span>], items[<span class="number">1</span>] = items[<span class="number">1</span>], items[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> items[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> <span class="keyword">and</span> items[<span class="number">0</span>][<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">                    res = length</span><br><span class="line">                <span class="keyword">if</span> items[<span class="number">1</span>][<span class="number">0</span>] == items[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1</span> <span class="keyword">and</span> items[<span class="number">1</span>][<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">                    res = length</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是数组中元素的个数，遍历一遍数组。</li>
<li>空间复杂度：<em>O(n)</em>，两个哈希表需要 <em>O</em>(n) 个空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：312 ms, 在所有 Python3 提交中击败了68.11%的用户</p>
<p>内存消耗：19.7 MB, 在所有 Python3 提交中击败了60.35%的用户</p>
<p>通过测试用例：45 / 45</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目8在既定时间做作业的学生人数"><a class="markdownIt-Anchor" href="#题目8在既定时间做作业的学生人数"></a> 题目8：在既定时间做作业的学生人数</h2>
<p><a href="https://leetcode.cn/problems/number-of-students-doing-homework-at-a-given-time/"> 在既定时间做作业的学生人数 </a></p>
<h3 id="标签-8"><a class="markdownIt-Anchor" href="#标签-8"></a> 标签</h3>
<p><code>数组</code></p>
<h3 id="题解-8"><a class="markdownIt-Anchor" href="#题解-8"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">busyStudent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; startTime, vector&lt;<span class="type">int</span>&gt;&amp; endTime, <span class="type">int</span> queryTime)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; startTime.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(startTime[i] &lt;= queryTime &amp;&amp; endTime[i] &gt;= queryTime)</span><br><span class="line">                res ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是数组中元素的个数，遍历一遍数组。</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：10.5 MB, 在所有 C++ 提交中击败了71.57%的用户</p>
<p>通过测试用例：111 / 111</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">busyStudent</span><span class="params">(<span class="type">int</span>[] startTime, <span class="type">int</span>[] endTime, <span class="type">int</span> queryTime)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; startTime.length; i ++) </span><br><span class="line">            <span class="keyword">if</span>(startTime[i] &lt;= queryTime &amp;&amp; endTime[i] &gt;= queryTime)</span><br><span class="line">                res ++;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是数组中元素的个数，遍历一遍数组。</li>
<li>空间复杂度：<em>O(1)</em>，</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</p>
<p>内存消耗：39.5 MB, 在所有 Java 提交中击败了64.01%的用户</p>
<p>通过测试用例：111 / 111</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">busyStudent</span>(<span class="params">self, startTime: <span class="type">List</span>[<span class="built_in">int</span>], endTime: <span class="type">List</span>[<span class="built_in">int</span>], queryTime: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(startTime)):</span><br><span class="line">            <span class="keyword">if</span> startTime[i] &lt;= queryTime <span class="keyword">and</span> endTime[i] &gt;= queryTime:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是数组中元素的个数，遍历一遍数组。</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：36 ms, 在所有 Python3 提交中击败了72.68%的用户</p>
<p>内存消耗：15.1 MB, 在所有 Python3 提交中击败了5.22%的用户</p>
<p>通过测试用例：111 / 111</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目9最大二叉树"><a class="markdownIt-Anchor" href="#题目9最大二叉树"></a> 题目9：最大二叉树</h2>
<p><a href="https://leetcode.cn/problems/maximum-binary-tree/"> 最大二叉树 </a></p>
<h3 id="标签-9"><a class="markdownIt-Anchor" href="#标签-9"></a> 标签</h3>
<p><code>栈</code>、<code>树</code>、<code>数组</code>、<code>分治</code>、<code>二叉树</code>、<code>单调栈</code></p>
<h3 id="题解-9"><a class="markdownIt-Anchor" href="#题解-9"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> max = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = left; i &lt; right; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; max) &#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">                flag = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(max);</span><br><span class="line">        node-&gt;left = <span class="built_in">dfs</span>(nums, left, flag);</span><br><span class="line">        node-&gt;right = <span class="built_in">dfs</span>(nums, flag + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：*<em>O</em>(n^2)，其中 <em>n</em> 是数组 <code>nums</code> 的长度。在最坏的情况下，数组严格递增或递减，需要递归 n 层，第 i <code>0 =&lt; i &lt;= n</code> 层需要遍历 <em>n − i</em> 个元素以找出最大值，总时间复杂度为 <em>O</em>(n^2)。</li>
<li>空间复杂度：<em>O</em>(n)，即为最坏情况下需要使用的栈空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：196 ms, 在所有 C++ 提交中击败了5.40%的用户</p>
<p>内存消耗：370.8 MB, 在所有 C++ 提交中击败了5.00%的用户</p>
<p>通过测试用例：107 / 107</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">npc</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l; i &lt; r; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; nums[i])&#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">                npc = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(max);</span><br><span class="line">        root.left = dfs(nums, l, npc);</span><br><span class="line">        root.right = dfs(nums, npc + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(nums, <span class="number">0</span>, nums.length);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：*<em>O</em>(n^2)，其中 <em>n</em> 是数组 <code>nums</code> 的长度。在最坏的情况下，数组严格递增或递减，需要递归 n 层，第 i <code>0 =&lt; i &lt;= n</code> 层需要遍历 <em>n − i</em> 个元素以找出最大值，总时间复杂度为 <em>O</em>(n^2)。</li>
<li>空间复杂度：<em>O</em>(n)，即为最坏情况下需要使用的栈空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：2 ms, 在所有 Java 提交中击败了83.20%的用户</p>
<p>内存消耗：41.3 MB, 在所有 Java 提交中击败了84.77%的用户</p>
<p>通过测试用例：107 / 107</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">constructMaximumBinaryTree</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">nums, l, r</span>):</span><br><span class="line">            <span class="keyword">if</span> l &gt;= r:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="built_in">max</span> = npc = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l, r):</span><br><span class="line">                <span class="keyword">if</span> nums[i] &gt; <span class="built_in">max</span>:</span><br><span class="line">                    <span class="built_in">max</span> = nums[i]</span><br><span class="line">                    npc = i</span><br><span class="line">            node = TreeNode(<span class="built_in">max</span>)</span><br><span class="line">            node.left = dfs(nums, l, npc)</span><br><span class="line">            node.right = dfs(nums, npc + <span class="number">1</span>, r)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        <span class="keyword">return</span> dfs(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums))</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：*<em>O</em>(n^2)，其中 <em>n</em> 是数组 <code>nums</code> 的长度。在最坏的情况下，数组严格递增或递减，需要递归 n 层，第 i <code>0 =&lt; i &lt;= n</code> 层需要遍历 <em>n − i</em> 个元素以找出最大值，总时间复杂度为 <em>O</em>(n^2)。</li>
<li>空间复杂度：<em>O</em>(n)，即为最坏情况下需要使用的栈空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：112 ms, 在所有 Python3 提交中击败了75.67%的用户</p>
<p>内存消耗：15.5 MB, 在所有 Python3 提交中击败了69.26%的用户</p>
<p>通过测试用例：107 / 107</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目10将矩阵按对角线排序"><a class="markdownIt-Anchor" href="#题目10将矩阵按对角线排序"></a> 题目10：将矩阵按对角线排序⭐</h2>
<p><a href="https://leetcode.cn/problems/sort-the-matrix-diagonally/"> 将矩阵按对角线排序 </a></p>
<h3 id="标签-10"><a class="markdownIt-Anchor" href="#标签-10"></a> 标签</h3>
<p><code>数组</code>、<code>矩阵</code>、<code>排序</code></p>
<h3 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h3>
<p>首先遍历截距，每条对角线对应到坐标系都会存在一个截距，首先根据截距确定对角线，然后根据 x 值确定 y ，进而将对角线元素加入到一个临时数组中并进行排序后又重新赋值会原数组。</p>
<h3 id="题解-10"><a class="markdownIt-Anchor" href="#题解-10"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">diagonalSort</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat) &#123;</span><br><span class="line">        <span class="type">int</span> n = mat.<span class="built_in">size</span>(), m = mat[<span class="number">0</span>].<span class="built_in">size</span>();  <span class="comment">// 行，列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> b = -(n - <span class="number">1</span>); b &lt;= m - <span class="number">1</span>; b ++) &#123;  <span class="comment">// 遍历截距</span></span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>, y = b; x &lt; n &amp;&amp; y &lt; m; x ++, y ++) </span><br><span class="line">                <span class="keyword">if</span>(y &gt;= <span class="number">0</span>)</span><br><span class="line">                    res.<span class="built_in">push_back</span>(mat[x][y]);</span><br><span class="line">            <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>, y = b, k = <span class="number">0</span>; x &lt; n &amp;&amp; y &lt; m; x ++, y ++)</span><br><span class="line">                <span class="keyword">if</span>(y &gt;= <span class="number">0</span>)</span><br><span class="line">                    mat[x][y] = res[k ++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>((m+n) × min(m,n) × log(min(m,n)))</li>
<li>空间复杂度：<em>O</em>(n + m)。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：8 ms, 在所有 C++ 提交中击败了85.51%的用户</p>
<p>内存消耗：9.1 MB, 在所有 C++ 提交中击败了38.16%的用户</p>
<p>通过测试用例：15 / 15</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] diagonalSort(<span class="type">int</span>[][] mat) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> mat.length, m = mat[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> -(n - <span class="number">1</span>); b &lt;= m - <span class="number">1</span>; b ++) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = b; x &lt; n &amp;&amp; y &lt; m; x ++, y ++)</span><br><span class="line">                <span class="keyword">if</span>(y &gt;= <span class="number">0</span>)</span><br><span class="line">                    q.add(mat[x][y]);</span><br><span class="line">            q.sort(Comparator.naturalOrder());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = b, k = <span class="number">0</span>; x &lt; n &amp;&amp; y &lt; m; x ++, y ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(y &gt;= <span class="number">0</span>)</span><br><span class="line">                    mat[x][y] = q.get(k ++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>((m+n) × min(m,n) × log(min(m,n)))</li>
<li>空间复杂度：<em>O</em>(n + m)。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：7 ms, 在所有 Java 提交中击败了39.29%的用户</p>
<p>内存消耗：42.5 MB, 在所有 Java 提交中击败了61.04%的用户</p>
<p>通过测试用例：15 / 15</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">diagonalSort</span>(<span class="params">self, mat: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        n, m = <span class="built_in">len</span>(mat), <span class="built_in">len</span>(mat[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(-(n -<span class="number">1</span>), m):</span><br><span class="line">            res = []</span><br><span class="line">            x, y = <span class="number">0</span>, b</span><br><span class="line">            <span class="keyword">while</span> x &lt; n <span class="keyword">and</span> y &lt; m:</span><br><span class="line">                <span class="keyword">if</span> y &gt;= <span class="number">0</span>:</span><br><span class="line">                    res.append(mat[x][y])</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">                y += <span class="number">1</span></span><br><span class="line">            res.sort()</span><br><span class="line">            x, y, k = <span class="number">0</span>, b, <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> x &lt; n <span class="keyword">and</span> y &lt; m:</span><br><span class="line">                <span class="keyword">if</span> y &gt;= <span class="number">0</span>:</span><br><span class="line">                    mat[x][y] = res[k]</span><br><span class="line">                    k += <span class="number">1</span></span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">                y += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> mat</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>((m+n) × min(m,n) × log(min(m,n)))</li>
<li>空间复杂度：<em>O</em>(n + m)。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：48 ms, 在所有 Python3 提交中击败了58.73%的用户</p>
<p>内存消耗：15.2 MB, 在所有 Python3 提交中击败了80.95%的用户</p>
<p>通过测试用例：15 / 15</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目11逃离迷宫"><a class="markdownIt-Anchor" href="#题目11逃离迷宫"></a> 题目11：逃离迷宫⭐</h2>
<p><a href="https://www.acwing.com/problem/content/3678/"> 逃离迷宫 </a></p>
<h3 id="标签-11"><a class="markdownIt-Anchor" href="#标签-11"></a> 标签</h3>
<p><code>BFS</code>、<code>双端队列BFS</code></p>
<h3 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h3>
<h3 id="题解-11"><a class="markdownIt-Anchor" href="#题解-11"></a> 题解</h3>
<h2 id="题目12将数字变成0的操作次数"><a class="markdownIt-Anchor" href="#题目12将数字变成0的操作次数"></a> 题目12：将数字变成0的操作次数</h2>
<p><a href="https://leetcode.cn/problems/number-of-steps-to-reduce-a-number-to-zero/"> 将数字变成 0 的操作次数 </a></p>
<h3 id="标签-12"><a class="markdownIt-Anchor" href="#标签-12"></a> 标签</h3>
<p><code>位运算</code>、<code>数学</code></p>
<h3 id="题解-12"><a class="markdownIt-Anchor" href="#题解-12"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfSteps</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num)&#123;</span><br><span class="line">            res ++;</span><br><span class="line">            <span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                num /= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                num --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(log num)，其中 <em>num</em> 是输入数值。每次循环都将 <em>num</em> 的数值减半，因此时间复杂度为 <em>O</em>(log num)。</li>
<li>空间复杂度：<em>O</em>(1)。只需要常数空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：5.8 MB, 在所有 C++ 提交中击败了51.49%的用户</p>
<p>通过测试用例：204 / 204</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfSteps</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num != <span class="number">0</span>) &#123;</span><br><span class="line">            res ++;</span><br><span class="line">            <span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                num /= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                num --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(log num)，其中 <em>num</em> 是输入数值。每次循环都将 <em>num</em> 的数值减半，因此时间复杂度为 <em>O</em>(log num)。</li>
<li>空间复杂度：<em>O</em>(1)。只需要常数空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</p>
<p>内存消耗：38.5 MB, 在所有 Java 提交中击败了41.23%的用户</p>
<p>通过测试用例：204 / 204</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfSteps</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num != <span class="number">0</span>:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                num /= <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(log num)，其中 <em>num</em> 是输入数值。每次循环都将 <em>num</em> 的数值减半，因此时间复杂度为 <em>O</em>(log num)。</li>
<li>空间复杂度：<em>O</em>(1)。只需要常数空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：32 ms, 在所有 Python3 提交中击败了90.62%的用户</p>
<p>内存消耗：14.9 MB, 在所有 Python3 提交中击败了59.81%的用户</p>
<p>通过测试用例：204 / 204</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目13大小为-k-且平均值大于等于阈值的子数组数目"><a class="markdownIt-Anchor" href="#题目13大小为-k-且平均值大于等于阈值的子数组数目"></a> 题目13：大小为 K 且平均值大于等于阈值的子数组数目</h2>
<p><a href="https://leetcode.cn/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/">大小为 K 且平均值大于等于阈值的子数组数目</a></p>
<h3 id="标签-13"><a class="markdownIt-Anchor" href="#标签-13"></a> 标签</h3>
<p><code>数组</code>、<code>滑动窗口</code></p>
<h3 id="题解-13"><a class="markdownIt-Anchor" href="#题解-13"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numOfSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k, <span class="type">int</span> threshold)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;r &lt; arr.<span class="built_in">size</span>(); r ++) &#123;</span><br><span class="line">            sum += arr[r];</span><br><span class="line">            <span class="keyword">if</span>(r &gt;= k) &#123; <span class="comment">// 需要删除左边元素</span></span><br><span class="line">                sum -= arr[l ++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(r - l + <span class="number">1</span> == k &amp;&amp; sum &gt;= threshold * k) res ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n)，其中 <em>n</em> 是数组长度。遍历一遍数组即可</li>
<li>空间复杂度：<em>O</em>(1)。只需要常数空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：64 ms, 在所有 C++ 提交中击败了81.86%的用户</p>
<p>内存消耗：54.1 MB, 在所有 C++ 提交中击败了16.03%的用户</p>
<p>通过测试用例：69 / 69</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numOfSubarrays</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> threshold)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>; r &lt; arr.length; r ++) &#123;</span><br><span class="line">            sum += arr[r];</span><br><span class="line">            <span class="keyword">if</span>(r &gt;= k) </span><br><span class="line">                sum -= arr[l ++];</span><br><span class="line">            <span class="keyword">if</span>(r - l + <span class="number">1</span> == k &amp;&amp; sum &gt;= threshold * k) res ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n)，其中 <em>n</em> 是数组长度。遍历一遍数组即可</li>
<li>空间复杂度：<em>O</em>(1)。只需要常数空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：3 ms, 在所有 Java 提交中击败了38.01%的用户</p>
<p>内存消耗：52.8 MB, 在所有 Java 提交中击败了10.59%的用户</p>
<p>通过测试用例：69 / 69</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numOfSubarrays</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span>, threshold: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res, <span class="built_in">sum</span> = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="built_in">sum</span> += arr[r]</span><br><span class="line">            <span class="keyword">if</span> r &gt;= k:</span><br><span class="line">                <span class="built_in">sum</span> -= arr[l]</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> r - l + <span class="number">1</span> == k <span class="keyword">and</span> <span class="built_in">sum</span> &gt;= threshold * k:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n)，其中 <em>n</em> 是数组长度。遍历一遍数组即可</li>
<li>空间复杂度：<em>O</em>(1)。只需要常数空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：148 ms, 在所有 Python3 提交中击败了37.55%的用户</p>
<p>内存消耗：25 MB, 在所有 Python3 提交中击败了39.74%的用户</p>
<p>通过测试用例：69 / 69</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目14时钟指针的夹角"><a class="markdownIt-Anchor" href="#题目14时钟指针的夹角"></a> 题目14：时钟指针的夹角</h2>
<p><a href="https://leetcode.cn/problems/angle-between-hands-of-a-clock/">时钟指针的夹角</a></p>
<h3 id="标签-14"><a class="markdownIt-Anchor" href="#标签-14"></a> 标签</h3>
<p><code>数学</code></p>
<h3 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h3>
<p>都以 <em>12</em> 的位置作为 <em>0</em> 度，</p>
<ul>
<li>分针的夹角：<code>m = (double)minutes * 360 / 60</code></li>
<li>时针的夹角：<code>h = hour % 12 * 30 + (double)minutes * 30.0 / 60.0</code></li>
</ul>
<h3 id="题解-14"><a class="markdownIt-Anchor" href="#题解-14"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">angleClock</span><span class="params">(<span class="type">int</span> hour, <span class="type">int</span> minutes)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> m = (<span class="type">double</span>)minutes * <span class="number">360</span> / <span class="number">60</span>; <span class="comment">// 分针的度数</span></span><br><span class="line">        <span class="type">double</span> h = hour % <span class="number">12</span> * <span class="number">30</span> + (<span class="type">double</span>)minutes * <span class="number">30.0</span> / <span class="number">60.0</span>; <span class="comment">// 时针的角度</span></span><br><span class="line">        <span class="type">double</span> res = <span class="built_in">abs</span>(m - h);</span><br><span class="line">        <span class="keyword">if</span>(res &gt; <span class="number">180</span>)   res = <span class="number">360</span> - res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(1)，</li>
<li>空间复杂度：<em>O</em>(1)。只需要常数空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：5.7 MB, 在所有 C++ 提交中击败了80.22%的用户</p>
<p>通过测试用例：105 / 105</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">angleClock</span><span class="params">(<span class="type">int</span> hour, <span class="type">int</span> minutes)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">m</span> <span class="operator">=</span> (<span class="type">double</span>)minutes * <span class="number">360</span> / <span class="number">60</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">h</span> <span class="operator">=</span> hour % <span class="number">12</span> * <span class="number">30</span> + (<span class="type">double</span>) minutes * <span class="number">30.0</span> / <span class="number">60.0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> Math.abs(m - h);</span><br><span class="line">        <span class="keyword">if</span> (res &gt; <span class="number">180</span>) res = <span class="number">360</span> - res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(1)。</li>
<li>空间复杂度：<em>O</em>(1)。只需要常数空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</p>
<p>内存消耗：38.3 MB, 在所有 Java 提交中击败了90.91%的用户</p>
<p>通过测试用例：105 / 105</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">angleClock</span>(<span class="params">self, hour: <span class="built_in">int</span>, minutes: <span class="built_in">int</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        m = minutes * <span class="number">360</span> / <span class="number">60</span></span><br><span class="line">        h = hour % <span class="number">12</span> * <span class="number">30</span> + minutes * <span class="number">30</span> / <span class="number">60</span></span><br><span class="line">        res = <span class="built_in">abs</span>(m - h)</span><br><span class="line">        <span class="keyword">if</span> res &gt; <span class="number">180</span>:</span><br><span class="line">            res = <span class="number">360</span> - res</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(1)，</li>
<li>空间复杂度：<em>O</em>(1)。只需要常数空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：40 ms, 在所有 Python3 提交中击败了39.86%的用户</p>
<p>内存消耗：14.9 MB, 在所有 Python3 提交中击败了56.52%的用户</p>
<p>通过测试用例：105 / 105</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目15跳跃游戏-iv"><a class="markdownIt-Anchor" href="#题目15跳跃游戏-iv"></a> 题目15：跳跃游戏 IV⭐</h2>
<p><a href="https://leetcode.cn/problems/jump-game-iv/"> 跳跃游戏 IV</a></p>
<h3 id="标签-15"><a class="markdownIt-Anchor" href="#标签-15"></a> 标签</h3>
<p><code>广度优先搜索</code>、<code>数组</code>、<code>哈希表</code></p>
<h3 id="思路-10"><a class="markdownIt-Anchor" href="#思路-10"></a> 思路</h3>
<p>用哈希表存储每个值对应的所有下标，然后使用<code>bfs</code>进行遍历</p>
<h3 id="题解-15"><a class="markdownIt-Anchor" href="#题解-15"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minJumps</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>(), INF = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[<span class="number">0</span>] == arr[n - <span class="number">1</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; hash; <span class="comment">// 用于存储某一个数值对应的下标编号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">            hash[arr[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(n, INF)</span></span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        dist[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对头元素</span></span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> t = q.<span class="built_in">front</span>(); </span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = t - <span class="number">1</span>; i &lt;= t + <span class="number">1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= <span class="number">0</span> &amp;&amp; i &lt; n &amp;&amp; dist[i] &gt; dist[t] + <span class="number">1</span>)&#123;</span><br><span class="line">                    dist[i] = dist[t] + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> val = arr[t];</span><br><span class="line">            <span class="keyword">if</span>(hash.<span class="built_in">count</span>(val))&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i : hash[val]) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dist[i] &gt; dist[t] + <span class="number">1</span>)&#123;</span><br><span class="line">                        dist[i] = dist[t] + <span class="number">1</span>;</span><br><span class="line">                        q.<span class="built_in">push</span>(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            hash.<span class="built_in">erase</span>(val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dist[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n)，其中 <em>n</em> 是数组 <em>arr</em> 的长度，每个元素最多只进入队列一次，最多被判断是否需要进入队列三次。</li>
<li>空间复杂度：<em>O</em>(n)。其中 <em>n</em> 是数组 <em>arr</em> 的长度，队列，哈希表和哈希集合均最多存储 <em>n</em> 个元素。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：160 ms, 在所有 C++ 提交中击败了85.52%的用户</p>
<p>内存消耗：71.4 MB, 在所有 C++ 提交中击败了71.67%的用户</p>
<p>通过测试用例：33 / 33</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minJumps</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length, INF = <span class="number">1000000</span>;</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; hash = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="keyword">if</span>(hash.get(val) == <span class="literal">null</span>) hash.put(val, <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">            hash.get(val).add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(dist, INF);</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q.add(<span class="number">0</span>);</span><br><span class="line">        dist[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> q.remove(); <span class="comment">// 返回并且删除对头元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> t - <span class="number">1</span>; i &lt;= t + <span class="number">1</span>; i += <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= <span class="number">0</span> &amp;&amp; i &lt; n &amp;&amp; dist[i] &gt; dist[t] + <span class="number">1</span>)&#123;</span><br><span class="line">                    dist[i] = dist[t] + <span class="number">1</span>;</span><br><span class="line">                    q.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> arr[t];</span><br><span class="line">            <span class="keyword">if</span>(hash.get(val) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i : hash.get(val)) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dist[i] &gt; dist[t] + <span class="number">1</span>)&#123;</span><br><span class="line">                        dist[i] = dist[t] + <span class="number">1</span>;</span><br><span class="line">                        q.add(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                hash.remove(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist[n - <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n)，其中 <em>n</em> 是数组 <em>arr</em> 的长度，每个元素最多只进入队列一次，最多被判断是否需要进入队列三次。</li>
<li>空间复杂度：<em>O</em>(n)。其中 <em>n</em> 是数组 <em>arr</em> 的长度，队列，哈希表和哈希集合均最多存储 <em>n</em> 个元素。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：56 ms, 在所有 Java 提交中击败了52.22%的用户</p>
<p>内存消耗：49.7 MB, 在所有 Java 提交中击败了97.91%的用户</p>
<p>通过测试用例：33 / 33</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minJumps</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n ,INF = <span class="built_in">len</span>(arr), <span class="number">1e8</span></span><br><span class="line">        <span class="built_in">hash</span> = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            val = arr[i]</span><br><span class="line">            <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">hash</span>: <span class="built_in">hash</span>[val] = []</span><br><span class="line">            <span class="built_in">hash</span>[val].append(i)</span><br><span class="line">        </span><br><span class="line">        dist = [INF <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        q = deque()  <span class="comment"># 队列</span></span><br><span class="line">        q.append(<span class="number">0</span>)</span><br><span class="line">        dist[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            t = q.popleft()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t - <span class="number">1</span>, t + <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> i &lt; n <span class="keyword">and</span> dist[i] &gt; dist[t] + <span class="number">1</span>:</span><br><span class="line">                    dist[i] = dist[t] + <span class="number">1</span></span><br><span class="line">                    q.append(i)</span><br><span class="line">            </span><br><span class="line">            val = arr[t]</span><br><span class="line">            <span class="keyword">if</span> val <span class="keyword">in</span> <span class="built_in">hash</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">hash</span>[val]:</span><br><span class="line">                    <span class="keyword">if</span> dist[i] &gt; dist[t] + <span class="number">1</span>:</span><br><span class="line">                        dist[i] = dist[t] + <span class="number">1</span></span><br><span class="line">                        q.append(i)</span><br><span class="line">                <span class="keyword">del</span> <span class="built_in">hash</span>[val]</span><br><span class="line">        <span class="keyword">return</span> dist[n - <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n)，其中 <em>n</em> 是数组 <em>arr</em> 的长度，每个元素最多只进入队列一次，最多被判断是否需要进入队列三次。</li>
<li>空间复杂度：<em>O</em>(n)。其中 <em>n</em> 是数组 <em>arr</em> 的长度，队列，哈希表和哈希集合均最多存储 <em>n</em> 个元素。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：428 ms, 在所有 Python3 提交中击败了24.12%的用户</p>
<p>内存消耗：27.7 MB, 在所有 Python3 提交中击败了92.97%的用户</p>
<p>通过测试用例：33 / 33</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目16检查整数及其两倍数是否存在"><a class="markdownIt-Anchor" href="#题目16检查整数及其两倍数是否存在"></a> 题目16：检查整数及其两倍数是否存在</h2>
<p><a href="https://leetcode.cn/problems/check-if-n-and-its-double-exist/">检查整数及其两倍数是否存在</a></p>
<h3 id="标签-16"><a class="markdownIt-Anchor" href="#标签-16"></a> 标签</h3>
<p><code>数组</code>、<code>哈希表</code>、<code>双指针</code>、<code>二分查找</code>、<code>排序</code></p>
<h3 id="思路-11"><a class="markdownIt-Anchor" href="#思路-11"></a> 思路</h3>
<p>使用哈希表存储遍历过的元素，当当前元素的二倍或者二分之一已经在哈希表中了，则直接返回<code>true</code></p>
<h3 id="题解-16"><a class="markdownIt-Anchor" href="#题解-16"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">C++</button></li><li class="tab"><button type="button" data-href="#题解-2">Java</button></li><li class="tab"><button type="button" data-href="#题解-3">Python3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkIfExist</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; hash;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash.<span class="built_in">count</span>(x * <span class="number">2</span>) || x % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; hash.<span class="built_in">count</span>(x / <span class="number">2</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hash.<span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n)，其中 <em>n</em> 是数组 <em>arr</em> 的长度，只需要遍历一遍数组即可。</li>
<li>空间复杂度：<em>O</em>(n)。其中 <em>n</em> 是数组 <em>arr</em> 的长度，哈希表最多存 <em>n</em> 个元素。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：8 ms, 在所有 C++ 提交中击败了56.54%的用户</p>
<p>内存消耗：10.1 MB, 在所有 C++ 提交中击败了31.83%的用户</p>
<p>通过测试用例：107 / 107</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkIfExist</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; hash = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span>(hash.contains(x * <span class="number">2</span>) || x % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; hash.contains(x / <span class="number">2</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            hash.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n)，其中 <em>n</em> 是数组 <em>arr</em> 的长度，只需要遍历一遍数组即可。</li>
<li>空间复杂度：<em>O</em>(n)。其中 <em>n</em> 是数组 <em>arr</em> 的长度，哈希表最多存 <em>n</em> 个元素。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：1 ms, 在所有 Java 提交中击败了99.56%的用户</p>
<p>内存消耗：40.6 MB, 在所有 Java 提交中击败了98.11%的用户</p>
<p>通过测试用例：107 / 107</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkIfExist</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="built_in">hash</span> = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line">            <span class="keyword">if</span> x * <span class="number">2</span> <span class="keyword">in</span> <span class="built_in">hash</span> <span class="keyword">or</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> x / <span class="number">2</span> <span class="keyword">in</span> <span class="built_in">hash</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="built_in">hash</span>.add(x)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n)，其中 <em>n</em> 是数组 <em>arr</em> 的长度，只需要遍历一遍数组即可。</li>
<li>空间复杂度：<em>O</em>(n)。其中 <em>n</em> 是数组 <em>arr</em> 的长度，哈希表最多存 <em>n</em> 个元素。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：40 ms, 在所有 Python3 提交中击败了69.62%的用户</p>
<p>内存消耗：15.1 MB, 在所有 Python3 提交中击败了29.24%的用户</p>
<p>通过测试用例：107 / 107</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>AcWing</category>
        <category>Course</category>
      </categories>
      <tags>
        <tag>AcWing</tag>
        <tag>C++</tag>
        <tag>LeetCode</tag>
        <tag>JAVA</tag>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing LeetCode究极班 Week1</title>
    <url>/2022/03/22/AcWing/LeetCode_Week1/</url>
    <content><![CDATA[<h2 id="学习平台"><a class="markdownIt-Anchor" href="#学习平台"></a> 学习平台</h2>
<p><strong><a href="https://www.acwing.com/activity/content/31/"> AcWing LeetCode究极班 </a></strong></p>
<p><strong><a href="https://leetcode-cn.com/"> LeetCode </a></strong></p>
<h2 id="let-1两数之和"><a class="markdownIt-Anchor" href="#let-1两数之和"></a> Let 1：两数之和</h2>
<p>给定一个整数数组<code>nums</code>和一个整数目标值<code>target</code>，请你在该数组中找出<strong>和为目标值</strong><code>target</code>的那 两个 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<p>示例 1：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 104</code></li>
<li><code>109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>109 &lt;= target &lt;= 109</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<p>**进阶：**你可以想出一个时间复杂度小于 <code>O(n^2)</code> 的算法吗？</p>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j&lt; nums.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j] == target)&#123;</span><br><span class="line">                    arr.<span class="built_in">push_back</span>(i);</span><br><span class="line">                    arr.<span class="built_in">push_back</span>(j);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-2两数相加"><a class="markdownIt-Anchor" href="#let-2两数相加"></a> Let 2：两数相加</h2>
<p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 一位 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt="img" /></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
<li>题目数据保证列表表示的数字不含前导零</li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>); <span class="comment">// 生成一个新的头节点，指向结果</span></span><br><span class="line">        <span class="keyword">auto</span> cur = dummy; <span class="comment">// 一个指针，指向结果链表的尾节点</span></span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>; <span class="comment">//用来保存进位</span></span><br><span class="line">        <span class="keyword">while</span>(l1 || l2 || t)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1) t += l1 -&gt; val, l1 = l1 -&gt; next;</span><br><span class="line">            <span class="keyword">if</span>(l2) t += l2 -&gt; val, l2 = l2 -&gt; next;</span><br><span class="line">            cur -&gt; next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(t % <span class="number">10</span>); <span class="comment">// 取出个位加入生成新节点</span></span><br><span class="line">            cur = cur -&gt; next; <span class="comment">// 更新尾指针</span></span><br><span class="line">            t /= <span class="number">10</span>;  <span class="comment">// 去除进位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy -&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-3无重复字符的最长子串"><a class="markdownIt-Anchor" href="#let-3无重复字符的最长子串"></a> Let 3：无重复字符的最长子串</h2>
<p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 最长子串 的长度。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code>由英文字母、数字、符号和空格组成</li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; head; <span class="comment">// hash map</span></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i ++)&#123;</span><br><span class="line">            head[s[i]]++;</span><br><span class="line">            <span class="keyword">while</span>(head[s[i]] &gt; <span class="number">1</span>) head[s[j++]]--;</span><br><span class="line">            res = <span class="built_in">max</span>(res, i - j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-4寻找两个正序数组的中位数"><a class="markdownIt-Anchor" href="#let-4寻找两个正序数组的中位数"></a> Let 4：寻找两个正序数组的中位数</h2>
<p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p>
<p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,3], nums2 = [2]</span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 = [1,2,3] ，中位数 2</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [3,4]</span><br><span class="line">输出：2.50000</span><br><span class="line">解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>nums1.length == m</code></li>
<li><code>nums2.length == n</code></li>
<li><code>0 &lt;= m &lt;= 1000</code></li>
<li><code>0 &lt;= n &lt;= 1000</code></li>
<li><code>1 &lt;= m + n &lt;= 2000</code></li>
<li><code>-106 &lt;= nums1[i], nums2[i] &lt;= 106</code></li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">double</span>&gt; arr; <span class="comment">// 将两个数组合并后的数组</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; nums1.<span class="built_in">size</span>() &amp;&amp; j &lt; nums2.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i] &lt;= nums2[j])</span><br><span class="line">                arr.<span class="built_in">push_back</span>(nums1[i++]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                arr.<span class="built_in">push_back</span>(nums2[j++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; nums1.<span class="built_in">size</span>()) arr.<span class="built_in">push_back</span>(nums1[i++]);</span><br><span class="line">        <span class="keyword">while</span>(j &lt; nums2.<span class="built_in">size</span>()) arr.<span class="built_in">push_back</span>(nums2[j++]);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; arr.<span class="built_in">size</span>(); k++) cout &lt;&lt; arr[k] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(len % <span class="number">2</span> != <span class="number">0</span>)&#123; <span class="comment">// 合并后的数组长度是奇数</span></span><br><span class="line">            <span class="keyword">return</span> arr[len / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">// 合并后的数组长度是偶数</span></span><br><span class="line">            <span class="built_in">return</span> (arr[len / <span class="number">2</span>] + arr[len / <span class="number">2</span> - <span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-5最长回文子串"><a class="markdownIt-Anchor" href="#let-5最长回文子串"></a> Let 5：最长回文子串 *</h2>
<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li>s 仅由数字和英文字母组成</li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="type">int</span> l = i - <span class="number">1</span>, r = i + <span class="number">1</span>;<span class="comment">//回文串为偶数个的情况</span></span><br><span class="line">            <span class="keyword">while</span>(l &gt;= <span class="number">0</span> &amp;&amp; r &lt;= s.<span class="built_in">size</span>() &amp;&amp; s[l] == s[r]) l --, r ++;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="built_in">size</span>() &lt; r - l - <span class="number">1</span>) res = s.<span class="built_in">substr</span>(l + <span class="number">1</span>, r - l - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            l = i, r = i + <span class="number">1</span>; <span class="comment">//回文串为奇数个的情况</span></span><br><span class="line">            <span class="keyword">while</span>(l &gt;= <span class="number">0</span> &amp;&amp; r &lt;= s.<span class="built_in">size</span>() &amp;&amp; s[l] == s[r]) l --, r ++;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="built_in">size</span>() &lt; r - l <span class="number">-1</span>) res = s.<span class="built_in">substr</span>(l + <span class="number">1</span>, r - l <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-6z-字形变换"><a class="markdownIt-Anchor" href="#let-6z-字形变换"></a> Let 6：Z 字形变换</h2>
<p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 Z 字形排列。</p>
<p>比如输入字符串为 <code>&quot;PAYPALISHIRING&quot;</code> 行数为 <code>3</code> 时，排列如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure>
<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;PAHNAPLSIIGYIR&quot;</code>。</p>
<p>请你实现这个将字符串进行指定行数变换的函数：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;PAYPALISHIRING&quot;, numRows = 3</span><br><span class="line">输出：&quot;PAHNAPLSIIGYIR&quot;</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;PAYPALISHIRING&quot;, numRows = 4</span><br><span class="line">输出：&quot;PINALSIGYAHRPI&quot;</span><br><span class="line">解释：</span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;A&quot;, numRows = 1</span><br><span class="line">输出：&quot;A&quot;</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 由英文字母（小写和大写）、<code>','</code> 和 <code>'.'</code> 组成</li>
<li><code>1 &lt;= numRows &lt;= 1000</code></li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || i == n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; s.<span class="built_in">size</span>(); j += <span class="number">2</span> * n - <span class="number">2</span>)</span><br><span class="line">                    res += s[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i, k = <span class="number">2</span> * n - <span class="number">2</span> - i; j &lt; s.<span class="built_in">size</span>() || k &lt; s.<span class="built_in">size</span>(); j += <span class="number">2</span> * n - <span class="number">2</span>, k += <span class="number">2</span> * n - <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; s.<span class="built_in">size</span>()) res += s[j];</span><br><span class="line">                    <span class="keyword">if</span> (k &lt; s.<span class="built_in">size</span>()) res += s[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-7整数反转"><a class="markdownIt-Anchor" href="#let-7整数反转"></a> Let 7：整数反转</h2>
<p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p>
<p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−231, 231 − 1]</code> ，就返回 0。</p>
<p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：x = 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：x = -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：x = 120</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure>
<p><strong>示例 4：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：x = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>-231 &lt;= x &lt;= 231 - 1</code></li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;= <span class="number">-9</span> &amp;&amp; x &lt;= <span class="number">9</span>) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x)&#123;</span><br><span class="line">            ans = ans * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(ans &lt; <span class="number">-2147483648</span> || ans &gt; <span class="number">2147483647</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-8字符串转换整数atoi"><a class="markdownIt-Anchor" href="#let-8字符串转换整数atoi"></a> Let 8：字符串转换整数(atoi) *</h2>
<p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 <code>atoi</code> 函数）。</p>
<p>函数 <code>myAtoi(string s)</code> 的算法如下：</p>
<ol>
<li>读入字符串并丢弃无用的前导空格</li>
<li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li>
<li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li>
<li>将前面步骤读入的这些数字转换为整数（即，“123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为<code>0</code> 。必要时更改符号（从步骤 2 开始）。</li>
<li>如果整数数超过 32 位有符号整数范围 <code>[−231, 231 − 1]</code> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 <code>−231</code> 的整数应该被固定为 <code>−231</code>，大于 <code>231 − 1</code> 的整数应该被固定为 <code>231 − 1</code> 。</li>
<li>返回整数作为最终结果。</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>本题中的空白字符只包括空格字符<code>' '</code> 。</li>
<li>除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;42&quot;</span><br><span class="line">输出：42</span><br><span class="line">解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。</span><br><span class="line">第 1 步：&quot;42&quot;（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         <span class="built_in">^</span></span><br><span class="line">第 2 步：&quot;42&quot;（当前没有读入字符，因为这里不存在 &#x27;-&#x27; 或者 &#x27;+&#x27;）</span><br><span class="line">         <span class="built_in">^</span></span><br><span class="line">第 3 步：&quot;42&quot;（读入 &quot;42&quot;）</span><br><span class="line">           <span class="built_in">^</span></span><br><span class="line">解析得到整数 42 。</span><br><span class="line">由于 &quot;42&quot; 在范围 [-231, 231 - 1] 内，最终结果为 42 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;   -42&quot;</span><br><span class="line">输出：-42</span><br><span class="line">解释：</span><br><span class="line">第 1 步：&quot;   -42&quot;（读入前导空格，但忽视掉）</span><br><span class="line">            <span class="built_in">^</span></span><br><span class="line">第 2 步：&quot;   -42&quot;（读入 &#x27;-&#x27; 字符，所以结果应该是负数）</span><br><span class="line">             <span class="built_in">^</span></span><br><span class="line">第 3 步：&quot;   -42&quot;（读入 &quot;42&quot;）</span><br><span class="line">               <span class="built_in">^</span></span><br><span class="line">解析得到整数 -42 。</span><br><span class="line">由于 &quot;-42&quot; 在范围 [-231, 231 - 1] 内，最终结果为 -42 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;4193 with words&quot;</span><br><span class="line">输出：4193</span><br><span class="line">解释：</span><br><span class="line">第 1 步：&quot;4193 with words&quot;（当前没有读入字符，因为没有前导空格）</span><br><span class="line">         <span class="built_in">^</span></span><br><span class="line">第 2 步：&quot;4193 with words&quot;（当前没有读入字符，因为这里不存在 &#x27;-&#x27; 或者 &#x27;+&#x27;）</span><br><span class="line">         <span class="built_in">^</span></span><br><span class="line">第 3 步：&quot;4193 with words&quot;（读入 &quot;4193&quot;；由于下一个字符不是一个数字，所以读入停止）</span><br><span class="line">             <span class="built_in">^</span></span><br><span class="line">解析得到整数 4193 。</span><br><span class="line">由于 &quot;4193&quot; 在范围 [-231, 231 - 1] 内，最终结果为 4193 。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 200</code></li>
<li><code>s</code> 由英文字母（大写和小写）、数字<code>（0-9）</code>、<code>' '</code>、<code>'+'</code>、<code>'-'</code> 和 <code>'.'</code> 组成</li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k &lt; s.<span class="built_in">size</span>() &amp;&amp; s[k] == <span class="string">&#x27; &#x27;</span>) k++; <span class="comment">//去掉前导空格</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> minus = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[k] == <span class="string">&#x27;-&#x27;</span>) minus = <span class="number">-1</span>, k++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[k] == <span class="string">&#x27;+&#x27;</span>) k++;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k &lt; s.<span class="built_in">size</span>() &amp;&amp; s[k] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[k] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="type">int</span> x = s[k] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(minus &gt; <span class="number">0</span> &amp;&amp; res &gt; (INT_MAX - x) / <span class="number">10</span>) <span class="keyword">return</span> INT_MAX; <span class="comment">//加上x后会超出上界</span></span><br><span class="line">            <span class="keyword">if</span>(minus &lt; <span class="number">0</span> &amp;&amp; -res &lt; (INT_MIN + x) / <span class="number">10</span>) <span class="keyword">return</span> INT_MIN; <span class="comment">//加上x后会超出下界</span></span><br><span class="line">            <span class="keyword">if</span> (-res * <span class="number">10</span> - x == INT_MIN) <span class="keyword">return</span> INT_MIN; <span class="comment">//加上x刚好等于下界</span></span><br><span class="line">            res = res * <span class="number">10</span> + x;</span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">if</span>(res &gt; INT_MAX) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res *= minus;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-9回文数"><a class="markdownIt-Anchor" href="#let-9回文数"></a> Let 9：回文数</h2>
<p>给你一个整数 <code>x</code> ，如果 <code>x</code>是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>
<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<ul>
<li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li>
</ul>
<p>示例 1：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：x = 121</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：x = -121</span><br><span class="line">输出：false</span><br><span class="line">解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：x = 10</span><br><span class="line">输出：false</span><br><span class="line">解释：从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li><code>-231 &lt;= x &lt;= 231 - 1</code></li>
</ul>
<p><strong>代码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> m = x;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m)&#123;</span><br><span class="line">            ans = ans * <span class="number">10</span> + m % <span class="number">10</span>;</span><br><span class="line">            m /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans == x) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-10正则表达式匹配"><a class="markdownIt-Anchor" href="#let-10正则表达式匹配"></a> Let 10：正则表达式匹配 *</h2>
<p>给你一个字符串 <code>s</code> 和一个字符规律 <code>p</code>，请你来实现一个支持<code>'.'</code>和<code>'*'</code> 的正则表达式匹配。</p>
<ul>
<li><code>'.'</code>匹配任意单个字符</li>
<li><code>'*'</code> 匹配零个或多个前面的那一个元素</li>
</ul>
<p>所谓匹配，是要涵盖 <strong>整个</strong> 字符串 <code>s</code>的，而不是部分字符串。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;aa&quot;, p = &quot;a&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：&quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;aa&quot;, p = &quot;a*&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：因为 &#x27;*&#x27; 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 &#x27;a&#x27;。因此，字符串 &quot;aa&quot; 可被视为 &#x27;a&#x27; 重复了一次。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;ab&quot;, p = &quot;.*&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：&quot;.*&quot; 表示可匹配零个或多个（&#x27;*&#x27;）任意字符（&#x27;.&#x27;）。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 20</code></li>
<li><code>1 &lt;= p.length &lt;= 30</code></li>
<li><code>s</code> 只包含从 <code>a-z</code> 的小写字母。</li>
<li><code>p</code> 只包含从 <code>a-z</code> 的小写字母，以及字符 <code>.</code>和<code>*</code>。</li>
<li>保证每次出现字符<code>*</code>时，前面都匹配到有效的字符</li>
</ul>
]]></content>
      <categories>
        <category>AcWing</category>
        <category>Course</category>
      </categories>
      <tags>
        <tag>AcWing</tag>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing LeetCode究极班 Week2</title>
    <url>/2022/03/24/AcWing/LeetCode_Week2/</url>
    <content><![CDATA[<h2 id="学习平台"><a class="markdownIt-Anchor" href="#学习平台"></a> 学习平台</h2>
<p><strong><a href="https://www.acwing.com/activity/content/31/"> AcWing LeetCode究极班 </a></strong></p>
<p><strong><a href="https://leetcode-cn.com/"> LeetCode </a></strong></p>
<h2 id="let-11盛水最多的容器"><a class="markdownIt-Anchor" href="#let-11盛水最多的容器"></a> Let 11：盛水最多的容器 *</h2>
<p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p>
<p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p>
<p>返回容器可以储存的最大水量。</p>
<p>**说明：**你不能倾斜容器。</p>
<p><strong>标签：</strong> <code>贪心</code>、<code>数组</code>、<code>双指针</code></p>
<p><strong>示例 1：</strong></p>
<p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="img" /></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49 </span><br><span class="line">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：height = [1,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>n == height.length</code></li>
<li><code>2 &lt;= n &lt;= 105</code></li>
<li><code>0 &lt;= height[i] &lt;= 104</code></li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = len - <span class="number">1</span>; i &lt; j;)&#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, <span class="built_in">min</span>(height[i], height[j]) * (j - i));</span><br><span class="line">            <span class="keyword">if</span>(height[i] &gt; height[j]) j--;</span><br><span class="line">            <span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-12整数转罗马数字"><a class="markdownIt-Anchor" href="#let-12整数转罗马数字"></a> Let 12：整数转罗马数字</h2>
<p>罗马数字包含以下七种字符： <code>I</code>，<code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure>
<p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code>+ <code>II</code> 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>
<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li>
<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>
</ul>
<p>给你一个整数，将其转为罗马数字。</p>
<p><strong>标签：</strong> <code>哈希表</code>  <code>数学</code>  <code>字符串</code></p>
<p><strong>示例 1:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: num = 3</span><br><span class="line">输出: &quot;III&quot;</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: num = 4</span><br><span class="line">输出: &quot;IV&quot;</span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: num = 9</span><br><span class="line">输出: &quot;IX&quot;</span><br></pre></td></tr></table></figure>
<p><strong>示例 4:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: num = 58</span><br><span class="line">输出: &quot;LVIII&quot;</span><br><span class="line">解释: L = 50, V = 5, III = 3.</span><br></pre></td></tr></table></figure>
<p><strong>示例 5:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: num = 1994</span><br><span class="line">输出: &quot;MCMXCIV&quot;</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= num &lt;= 3999</code></li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(num)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= <span class="number">1000</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a = num / <span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">while</span>(a--)&#123;</span><br><span class="line">                    res += <span class="string">&quot;M&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                num %= <span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= <span class="number">900</span> &amp;&amp; num &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                res += <span class="string">&quot;CM&quot;</span>;</span><br><span class="line">                num %= <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;=<span class="number">500</span> &amp;&amp; num &lt; <span class="number">900</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a = num / <span class="number">100</span>;</span><br><span class="line">                res += <span class="string">&quot;D&quot;</span>;</span><br><span class="line">                <span class="type">int</span> sum = a - <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">while</span>(sum--)&#123;</span><br><span class="line">                    res += <span class="string">&quot;C&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                num %= <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= <span class="number">400</span> &amp;&amp; num &lt; <span class="number">500</span>)&#123;</span><br><span class="line">                res += <span class="string">&quot;CD&quot;</span>;</span><br><span class="line">                num %= <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= <span class="number">100</span> &amp;&amp; num &lt; <span class="number">400</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a = num / <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">while</span>(a--)&#123;</span><br><span class="line">                    res += <span class="string">&quot;C&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                num %= <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= <span class="number">90</span> &amp;&amp; num &lt; <span class="number">100</span>)&#123;</span><br><span class="line">                res += <span class="string">&quot;XC&quot;</span>;</span><br><span class="line">                num %= <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= <span class="number">50</span> &amp;&amp; num &lt; <span class="number">90</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a = num / <span class="number">10</span>;</span><br><span class="line">                res += <span class="string">&quot;L&quot;</span>;</span><br><span class="line">                <span class="type">int</span> sum = a<span class="number">-5</span>;</span><br><span class="line">                <span class="keyword">while</span>(sum--)&#123;</span><br><span class="line">                    res += <span class="string">&quot;X&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                num %= <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= <span class="number">40</span> &amp;&amp; num &lt; <span class="number">50</span>)&#123;</span><br><span class="line">                res += <span class="string">&quot;XL&quot;</span>;</span><br><span class="line">                num %= <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= <span class="number">10</span> &amp;&amp; num &lt; <span class="number">40</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a = num / <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">while</span>(a--)&#123;</span><br><span class="line">                    res += <span class="string">&quot;X&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                num %= <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="keyword">if</span>(num &gt;= <span class="number">9</span> &amp;&amp; num &lt; <span class="number">10</span>)&#123;</span><br><span class="line">                res += <span class="string">&quot;IX&quot;</span>;</span><br><span class="line">                num %= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= <span class="number">5</span> &amp;&amp; num &lt; <span class="number">9</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a = num / <span class="number">1</span>;</span><br><span class="line">                res += <span class="string">&quot;V&quot;</span>;</span><br><span class="line">                <span class="type">int</span> sum = a<span class="number">-5</span>;</span><br><span class="line">                <span class="keyword">while</span>(sum--)&#123;</span><br><span class="line">                    res += <span class="string">&quot;I&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                num %= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= <span class="number">4</span> &amp;&amp; num &lt; <span class="number">5</span>)&#123;</span><br><span class="line">                res += <span class="string">&quot;IV&quot;</span>;</span><br><span class="line">                num %= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(num &gt;= <span class="number">1</span> &amp;&amp; num &lt; <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="type">int</span> a = num / <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(a--)&#123;</span><br><span class="line">                    res += <span class="string">&quot;I&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                num %= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-13罗马数字转整数"><a class="markdownIt-Anchor" href="#let-13罗马数字转整数"></a> Let 13：罗马数字转整数</h2>
<p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure>
<p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code>+ <code>II</code> 。 <code>27</code> 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code>+ <code>II</code> 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>
<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。</li>
<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>
</ul>
<p>给定一个罗马数字，将其转换成整数。</p>
<p><strong>标签：</strong> <code>哈希表</code>  <code>数学</code>  <code>字符串</code></p>
<p><strong>示例 1:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure>
<p><strong>示例 4:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure>
<p><strong>示例 5:</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 15</code></li>
<li><code>s</code> 仅含字符 <code>('I', 'V', 'X', 'L', 'C', 'D', 'M')</code></li>
<li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li>
<li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li>
<li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li>
<li>关于罗马数字的详尽书写规则，可以参考 罗马数字 - Mathematics 。</li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> value[] = &#123;</span><br><span class="line">            <span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line">        string reps[] = &#123;</span><br><span class="line">            <span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; i &lt; s.<span class="built_in">length</span>(); i++, j++)&#123;</span><br><span class="line">            string stri = s.<span class="built_in">substr</span>(i, <span class="number">1</span>);</span><br><span class="line">            string strj = s.<span class="built_in">substr</span>(j, <span class="number">1</span>);</span><br><span class="line">            string str;</span><br><span class="line">            <span class="type">int</span> a, b;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">13</span>; k ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(stri == reps[k]) a = k;</span><br><span class="line">                <span class="keyword">if</span>(strj == reps[k]) b = k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(b &lt; a)&#123; <span class="comment">// 需要截取两个</span></span><br><span class="line">                str = s.<span class="built_in">substr</span>(i, <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">13</span>; k ++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(str == reps[k])&#123;</span><br><span class="line">                        res += value[k];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                i++; <span class="comment">// 跳过一位</span></span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += value[a];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-14最长公共前缀"><a class="markdownIt-Anchor" href="#let-14最长公共前缀"></a> Let 14：最长公共前缀</h2>
<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>
<p><strong>标签：</strong> <code>字符串</code></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出：&quot;fl&quot;</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出：&quot;&quot;</span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= strs.length &lt;= 200</code></li>
<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>
<li><code>strs[i]</code> 仅由小写英文字母组成</li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 寻找str 和 fl 最长公共前缀</span></span><br><span class="line">    <span class="function">string <span class="title">Juge</span><span class="params">(string str, string fl)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">min</span>(str.<span class="built_in">length</span>(), fl.<span class="built_in">length</span>());</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i ++)&#123;</span><br><span class="line">            string a = str.<span class="built_in">substr</span>(<span class="number">0</span>, i);</span><br><span class="line">            string b = fl.<span class="built_in">substr</span>(<span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">if</span>(a != b &amp;&amp; i == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a != b &amp;&amp; i &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                p = i - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a == b &amp;&amp; i == len)&#123;</span><br><span class="line">                p = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.<span class="built_in">substr</span>(<span class="number">0</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        string str = strs[<span class="number">0</span>]; <span class="comment">// str 存放最长公共子串;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; strs.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            str = <span class="built_in">Juge</span>(str, strs[i]);</span><br><span class="line">            <span class="comment">// cout &lt;&lt; str &lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(str == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-15三数之和"><a class="markdownIt-Anchor" href="#let-15三数之和"></a> Let 15：三数之和</h2>
<p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p>
<p>注意：答案中不可以包含重复的三元组。</p>
<p><strong>标签：</strong> <code>数组</code>  <code>双指针</code>  <code>排序</code></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= nums.length &lt;= 3000</code></li>
<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>
</ul>
<p><strong>代码实现：</strong></p>
<p>对数组进行排序后，先确定其中一个值，然后使用双指针确定另外两个值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() &lt; <span class="number">3</span> ) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">2</span>; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i ==<span class="number">0</span> || i != <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>])&#123;</span><br><span class="line">                cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">                <span class="type">int</span> a = <span class="number">0</span> - nums[i];</span><br><span class="line">                <span class="type">int</span> l = i + <span class="number">1</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[l] + nums[r] &lt; a)&#123;</span><br><span class="line">                        l ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(nums[l] + nums[r] &gt; a)&#123;</span><br><span class="line">                        r --;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">                        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">                        arr.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                        arr.<span class="built_in">push_back</span>(nums[l]);</span><br><span class="line">                        arr.<span class="built_in">push_back</span>(nums[r]);</span><br><span class="line">                        res.<span class="built_in">push_back</span>(arr);</span><br><span class="line">                        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> k = l + <span class="number">1</span>; k &lt; r; k++)&#123; <span class="comment">// 往后找到第一个不和左边界相等的点。</span></span><br><span class="line">                            <span class="keyword">if</span>(nums[k] != nums[l])&#123;</span><br><span class="line">                                l = k;</span><br><span class="line">                                flag = <span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(!flag) <span class="keyword">break</span>;  <span class="comment">//找到右边界仍然没有找到。</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-16最接近的三数之和"><a class="markdownIt-Anchor" href="#let-16最接近的三数之和"></a> Let 16：最接近的三数之和</h2>
<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> 和 一个目标值 <code>target</code>。请你从 <code>nums</code> 中选出三个整数，使它们的和与 <code>target</code> 最接近。</p>
<p>返回这三个数的和。</p>
<p>假定每组输入只存在恰好一个解。</p>
<p><strong>标签：</strong> <code>数组</code>  <code>双指针</code>  <code>排序</code></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,2,1,-4], target = 1</span><br><span class="line">输出：2</span><br><span class="line">解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,0,0], target = 1</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>3 &lt;= nums.length &lt;= 1000</code></li>
<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>
<li><code>-104 &lt;= target &lt;= 104</code></li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> max = <span class="number">100010</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">2</span>; i ++)&#123;</span><br><span class="line">            <span class="type">int</span> l = i + <span class="number">1</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                <span class="type">int</span> cnt = nums[i] + nums[l] + nums[r]; <span class="comment">// 三数之和</span></span><br><span class="line">                cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(cnt - target) &lt; max)&#123; <span class="comment">// 若此时更接近目标值，则更新</span></span><br><span class="line">                    max = <span class="built_in">abs</span>(nums[i] + nums[l] + nums[r] - target);</span><br><span class="line">                    res = cnt;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cnt &lt; target)&#123;</span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(cnt &gt; target)&#123;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">//刚好等于目标值，则直接输出目标值即可。</span></span><br><span class="line">                    <span class="keyword">return</span> target;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-17电话号码的字母组合"><a class="markdownIt-Anchor" href="#let-17电话号码的字母组合"></a> Let 17：电话号码的字母组合</h2>
<p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>
<p><strong>标签：</strong> <code>哈希表</code>  <code>字符串</code>  <code>回溯</code></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：digits = &quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：digits = &quot;&quot;</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：digits = &quot;2&quot;</span><br><span class="line">输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= digits.length &lt;= 4</code></li>
<li><code>digits[i]</code> 是范围 <code>['2', '9']</code> 的一个数字。</li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line">    string str[<span class="number">10</span>] = &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;mno&quot;</span>, <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(digits.<span class="built_in">empty</span>()) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">dfs</span>(digits, <span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(string&amp; digits, <span class="type">int</span> u, string path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u &gt;= digits.<span class="built_in">size</span>()) ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> t = digits[u] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> c : str[t])&#123;</span><br><span class="line">                <span class="built_in">dfs</span>(digits, u + <span class="number">1</span>, path + c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-18四数之和"><a class="markdownIt-Anchor" href="#let-18四数之和"></a> Let 18：四数之和</h2>
<p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且不重复的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p>
<ul>
<li><code>0 &lt;= a, b, c, d &lt; n</code></li>
<li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> 互不相同</li>
<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>
</ul>
<p>你可以按 <strong>任意顺序</strong> 返回答案 。</p>
<p><strong>标签：</strong> <code>数组</code>  <code>双指针</code>  <code>排序</code></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,0,-1,0,-2,2], target = 0</span><br><span class="line">输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,2,2,2,2], target = 8</span><br><span class="line">输出：[[2,2,2,2]]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 200</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() &lt; <span class="number">4</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span> || i != <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>() - <span class="number">2</span>; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j == i + <span class="number">1</span> || j != i + <span class="number">1</span> &amp;&amp; nums[j] != nums[j - <span class="number">1</span>])&#123;</span><br><span class="line">                        <span class="type">int</span> cnt = target - nums[i] - nums[j];</span><br><span class="line">                        <span class="type">int</span> l = j + <span class="number">1</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(nums[l] + nums[r] &lt; cnt)&#123;</span><br><span class="line">                                l++;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(nums[l] + nums[r] &gt; cnt)&#123;</span><br><span class="line">                                r--;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span>&#123;</span><br><span class="line">                                <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">                                <span class="comment">// cout &lt;&lt; nums[i] &lt;&lt; &quot; &quot;&lt;&lt;nums[j]&lt;&lt;&quot; &quot;&lt;&lt; nums[l]&lt;&lt;&quot; &quot;&lt;&lt;nums[r]&lt;&lt;endl;</span></span><br><span class="line">                                vector&lt;<span class="type">int</span>&gt; arr&#123;nums[i], nums[j], nums[l], nums[r]&#125;;</span><br><span class="line">                                res.<span class="built_in">push_back</span>(arr);</span><br><span class="line">                                <span class="keyword">for</span>(<span class="type">int</span> k = l + <span class="number">1</span>; k &lt; r; k++)&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(nums[k] != nums[l])&#123;</span><br><span class="line">                                        l = k;</span><br><span class="line">                                        flag = <span class="literal">true</span>;</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span>(!flag) <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// bool flag = false;</span></span><br><span class="line">                        <span class="comment">// for(int k = j + 1; k &lt; nums.size() - 2; k++)&#123;  // 跳转到下一个不重复的地方</span></span><br><span class="line">                        <span class="comment">//     if(nums[k] != nums[j])&#123;</span></span><br><span class="line">                        <span class="comment">//         j = k - 1; // 因为后面还要j++，所以需要先跳转到k-1；</span></span><br><span class="line">                        <span class="comment">//         flag = true;</span></span><br><span class="line">                        <span class="comment">//         break;</span></span><br><span class="line">                        <span class="comment">//     &#125;</span></span><br><span class="line">                        <span class="comment">// &#125;</span></span><br><span class="line">                        <span class="comment">// if(!flag) break;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-19删除链表的倒数第n个节点"><a class="markdownIt-Anchor" href="#let-19删除链表的倒数第n个节点"></a> Let  19：删除链表的倒数第N个节点</h2>
<p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<p><strong>标签：</strong> <code>链表</code>  <code>双指针</code></p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img" /></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>链表中结点的数目为 sz</li>
<li>1 &lt;= sz &lt;= 30</li>
<li>0 &lt;= Node.val &lt;= 100</li>
<li>1 &lt;= n &lt;= sz</li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode *k = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            ListNode *p = head;  <span class="comment">// 最后要删除的就是p所指向的节点，他的后继节点就是k</span></span><br><span class="line">            <span class="keyword">while</span>(p-&gt;next != k)&#123;</span><br><span class="line">                p = p -&gt; next;</span><br><span class="line">            &#125;</span><br><span class="line">            k = p;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">if</span>(p == k)&#123;</span><br><span class="line">            head = k -&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(p -&gt; next != k)&#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;next = k-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="let-20有效的括号"><a class="markdownIt-Anchor" href="#let-20有效的括号"></a> Let 20：有效的括号</h2>
<p>给定一个只包括 <code>'('</code>，<code>')'</code>，<code>'&#123;'</code>，<code>'&#125;'</code>，<code>'['</code>，<code>']'</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br />
左括号必须以正确的顺序闭合。</p>
<p><strong>标签：</strong> <code>栈</code>  <code>字符串</code></p>
<p><strong>示例 1：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>
<p><strong>示例 4：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;([)]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure>
<p><strong>示例 5：</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 仅由括号 <code>'()[]&#123;&#125;'</code> 组成</li>
</ul>
<p><strong>代码实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; sta;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;(&#x27;</span> || s[i] == <span class="string">&#x27;[&#x27;</span> || s[i] == <span class="string">&#x27;&#123;&#x27;</span>)&#123; <span class="comment">//匹配到左括号</span></span><br><span class="line">                sta.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sta.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123;  <span class="comment">//栈内有左括号</span></span><br><span class="line">                <span class="type">char</span> c = sta.<span class="built_in">top</span>();</span><br><span class="line">                sta.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(c == <span class="string">&#x27;[&#x27;</span> &amp;&amp; s[i] == <span class="string">&#x27;]&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; s[i] == <span class="string">&#x27;&#125;&#x27;</span> || c == <span class="string">&#x27;(&#x27;</span> &amp;&amp; s[i] == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sta.<span class="built_in">size</span>()==<span class="number">0</span>)&#123;  <span class="comment">//栈内已经没有左括号了，但是来了右括号。</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sta.<span class="built_in">size</span>()!=<span class="number">0</span>)&#123; <span class="comment">// 还有左括号未匹配</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AcWing</category>
        <category>Course</category>
      </categories>
      <tags>
        <tag>AcWing</tag>
        <tag>LeetCode</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing SpringBoot框架课</title>
    <url>/2022/06/29/AcWing/SpringCourse/</url>
    <content><![CDATA[<h1 id="学习平台"><a class="markdownIt-Anchor" href="#学习平台"></a> 学习平台</h1>
<p><a href="https://www.acwing.com/activity/content/introduction/1877/"> AcWing SpringBoot框架课 </a></p>
<h1 id="day01java语法上"><a class="markdownIt-Anchor" href="#day01java语法上"></a> day01：Java语法上</h1>
<h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2>
<h3 id="jdk-jre-jvm的关系"><a class="markdownIt-Anchor" href="#jdk-jre-jvm的关系"></a> JDK、JRE、JVM的关系</h3>
<ul>
<li>JDK：Java Development Kit，java开发工具包</li>
<li>JRE：Java Runtime Enviroment，Java运行环境</li>
<li>JVM：Java Virtual Machine，Java虚拟机</li>
<li>JDK包含JRE，JRE包含JVM</li>
</ul>
<h3 id="jdk版本选择"><a class="markdownIt-Anchor" href="#jdk版本选择"></a> JDK版本选择</h3>
<ul>
<li>目前JDK1.8（也叫JDK8，不是JDK18）用的最多</li>
</ul>
<h3 id="java代码的编译运行流程"><a class="markdownIt-Anchor" href="#java代码的编译运行流程"></a> Java代码的编译运行流程</h3>
<ul>
<li>将Java源码编译成Java字节码。</li>
<li>使用JVM将Java字节码转化成机器码。</li>
<li>JVM作用：跨平台、内存管理、安全。</li>
</ul>
<h3 id="jse-jee-jme的区别"><a class="markdownIt-Anchor" href="#jse-jee-jme的区别"></a> JSE、JEE、JME的区别</h3>
<ul>
<li>JSE: Java Standard Edition，标准版</li>
<li>JEE：Java Enterprise Edition，企业版</li>
<li>JME: Java Mirco Edition，移动版</li>
<li>Spring是JEE的轻量级替代品</li>
<li>SpringBoot是Spring + 自动化配置</li>
</ul>
<h2 id="java-语法"><a class="markdownIt-Anchor" href="#java-语法"></a> Java 语法</h2>
<h3 id="变量-运算符-输入与输出"><a class="markdownIt-Anchor" href="#变量-运算符-输入与输出"></a> 变量、运算符、输入与输出</h3>
<p>类似于<code>c#</code>，<code>Java</code> 的所有变量和函数都需要定义在<code>class</code>中。</p>
<h4 id="内置数据类型"><a class="markdownIt-Anchor" href="#内置数据类型"></a> 内置数据类型</h4>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">字节数</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>byte</code></td>
<td style="text-align:center">1</td>
<td style="text-align:center">123</td>
</tr>
<tr>
<td style="text-align:center"><code>short</code></td>
<td style="text-align:center">2</td>
<td style="text-align:center">12345</td>
</tr>
<tr>
<td style="text-align:center"><code>int</code></td>
<td style="text-align:center">4</td>
<td style="text-align:center">123456789</td>
</tr>
<tr>
<td style="text-align:center"><code>long</code></td>
<td style="text-align:center">8</td>
<td style="text-align:center">123456789L</td>
</tr>
<tr>
<td style="text-align:center"><code>float</code></td>
<td style="text-align:center">4</td>
<td style="text-align:center">1.2F</td>
</tr>
<tr>
<td style="text-align:center"><code>double</code></td>
<td style="text-align:center">8</td>
<td style="text-align:center">1.2, 1.2D</td>
</tr>
<tr>
<td style="text-align:center"><code>boolean</code></td>
<td style="text-align:center">1</td>
<td style="text-align:center">true, false</td>
</tr>
<tr>
<td style="text-align:center"><code>char</code></td>
<td style="text-align:center">2</td>
<td style="text-align:center">‘A’</td>
</tr>
</tbody>
</table>
<h4 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h4>
<p>使用 <code>final</code> 修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">110</span>;</span><br></pre></td></tr></table></figure>
<h4 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h4>
<ul>
<li>显示转化：<code>int x = (int)'A'</code></li>
<li>隐式转化：<code>double x = 12, y = 4 * 3.3;</code> ，只适用于低精度类型向高精度类型转换。</li>
</ul>
<h4 id="表达式"><a class="markdownIt-Anchor" href="#表达式"></a> 表达式</h4>
<p>与 C++、Python3类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (a + b) * c;</span><br><span class="line">x ++;</span><br></pre></td></tr></table></figure>
<h4 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入</h4>
<ul>
<li>方式一：效率低，输入规模较小时使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> cin.next();</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> cin.nextInt();</span><br><span class="line"><span class="type">float</span> <span class="variable">y</span> <span class="operator">=</span> cin.nextFloat();</span><br><span class="line"><span class="type">double</span> <span class="variable">z</span> <span class="operator">=</span> cin.nextDouble();</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> cin.nextLine();  <span class="comment">// 读入下一行</span></span><br></pre></td></tr></table></figure>
<ul>
<li>方式二：效率较高，输入规模较大时使用。注意需要抛异常。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出</h4>
<ul>
<li>方式一：效率较低，输出规模较小时使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">123</span>);  <span class="comment">// 输出整数 + 换行</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);  <span class="comment">// 输出字符串 + 换行</span></span><br><span class="line">System.out.print(<span class="number">123456</span>);  <span class="comment">// 输出整数</span></span><br><span class="line">System.out.print(<span class="string">&quot;xzt\n&quot;</span>);  <span class="comment">// 输出字符串</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%04d %.2f\n&quot;</span>, <span class="number">4</span>, <span class="number">123.456D</span>);  <span class="comment">// 格式化输出，float与double都用%f输出</span></span><br></pre></td></tr></table></figure>
<ul>
<li>方式二：输出效率较高，输出规模较大时使用，需要抛出异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">        bw.write(<span class="string">&quot;hello World\n&quot;</span>);</span><br><span class="line">        bw.flush();  <span class="comment">// 需要刷新缓冲区</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断语句"><a class="markdownIt-Anchor" href="#判断语句"></a> 判断语句</h3>
<h4 id="if-else语句"><a class="markdownIt-Anchor" href="#if-else语句"></a> <code>if-else</code>语句</h4>
<p>与 <code>C++</code> 、<code>Python</code>中类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d是闰年\n&quot;</span>, year);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.printf(<span class="string">&quot;%d不是闰年\n&quot;</span>, year);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d是闰年\n&quot;</span>, year);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.printf(<span class="string">&quot;%d不是闰年\n&quot;</span>, year);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="switch-语句"><a class="markdownIt-Anchor" href="#switch-语句"></a> <code>switch</code> 语句</h4>
<p>与 <code>C++</code> 类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                name = <span class="string">&quot;Monday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                name = <span class="string">&quot;Tuesday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                name = <span class="string">&quot;Wednesday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                name = <span class="string">&quot;Thursday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                name = <span class="string">&quot;Friday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                name = <span class="string">&quot;Saturday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                name = <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                name = <span class="string">&quot;not valid&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="逻辑运算符与条件表达式"><a class="markdownIt-Anchor" href="#逻辑运算符与条件表达式"></a> 逻辑运算符与条件表达式</h4>
<p>与 <code>C++</code>、<code>Python</code> 类似</p>
<p><strong>注意</strong>：在<code>Java</code>中，判断语句和循环语句的判断条件只能是<code>boolean</code>类型，不能是整型，和<code>C++</code>不一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; year % <span class="number">4</span> == <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d是闰年\n&quot;</span>, year);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.printf(<span class="string">&quot;%d不是闰年\n&quot;</span>, year);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="循环语句"><a class="markdownIt-Anchor" href="#循环语句"></a> 循环语句</h3>
<p>与 <code>C++</code>、<code>Python</code>类似</p>
<h4 id="while循环"><a class="markdownIt-Anchor" href="#while循环"></a> <code>while</code>循环</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">5</span>)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="dowhile循环"><a class="markdownIt-Anchor" href="#dowhile循环"></a> <code>do...while</code>循环</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	System.out.println(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<h4 id="for循环"><a class="markdownIt-Anchor" href="#for循环"></a> <code>for</code>循环</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3>
<p><code>Java</code> 中的数组和 <code>C++</code> 中的数组类似</p>
<h4 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h4>
<p>和<code>C++</code>类似，初始化定长数组，长度可以是变量，可以在初始化时赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];  <span class="comment">// 初始化长度为5的int数组，初始值为0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">float</span>[] b = <span class="keyword">new</span> <span class="title class_">float</span>[n];  <span class="comment">// 初始化长度为n的float数组，初始值为0.0F</span></span><br><span class="line"><span class="type">char</span>[] c = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;  <span class="comment">// 初始化长度为3的char数组，初始值为：&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span></span><br><span class="line"><span class="type">char</span>[] d = c;  <span class="comment">// d与c地址相同，更改c中的元素，d中的元素也会改变</span></span><br></pre></td></tr></table></figure>
<h4 id="数组元素的读取与写入"><a class="markdownIt-Anchor" href="#数组元素的读取与写入"></a> 数组元素的读取与写入</h4>
<p>和<code>C++</code>类似。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> []a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    a[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    System.out.println(a[i] * a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="多维数组"><a class="markdownIt-Anchor" href="#多维数组"></a> 多维数组</h4>
<p>和 <code>C++</code> 类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> [][]a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> [][] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(a[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">System.out.println(b[<span class="number">1</span>][<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>
<h4 id="常用api"><a class="markdownIt-Anchor" href="#常用api"></a> 常用<code>API</code></h4>
<ul>
<li>属性<code>length</code>：返回数组长度，注意<strong>不加小括号</strong></li>
<li><code>Arrays.sort()</code>：数组排序</li>
<li><code>Arrays.fill(int[] a, int val)</code>：填充数组</li>
<li><code>Arrays.toString()</code>：将数组转化为字符串</li>
<li><code>Arrays.deepToString()</code>：将多维数组转化为字符串</li>
<li>数组不可变长</li>
</ul>
<h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3>
<h4 id="string-类"><a class="markdownIt-Anchor" href="#string-类"></a> <code>String</code> 类</h4>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;My name is&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> b;  <span class="comment">// 存储到了相同地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> b + <span class="string">&quot;yxc&quot;</span>;  <span class="comment">// String可以通过加号拼接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;My age is &quot;</span> + <span class="number">18</span>;  <span class="comment">// int会被隐式转化成字符串&quot;18&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.format(<span class="string">&quot;My age is %d&quot;</span>, <span class="number">18</span>);  <span class="comment">// 格式化字符串，类似于C++中的sprintf</span></span><br><span class="line"><span class="type">String</span> <span class="variable">money_str</span> <span class="operator">=</span> <span class="string">&quot;123.45&quot;</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> Double.parseDouble(money_str);  <span class="comment">// String转double</span></span><br></pre></td></tr></table></figure>
<ul>
<li>只读变量，不能修改，例如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">a += <span class="string">&quot;world&quot;</span>;  <span class="comment">// 会构造一个新的字符串</span></span><br></pre></td></tr></table></figure>
<ul>
<li>访问<code>String</code>中的字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">    System.out.println(str.charAt(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="常用的api"><a class="markdownIt-Anchor" href="#常用的api"></a> 常用的API</h5>
<ul>
<li><code>length()</code>：返回长度</li>
<li><code>split(String regex)</code>：分割字符串</li>
<li><code>indexOf(char c)</code>、<code>indexOf(String str)</code>：查找，找不到返回-1</li>
<li><code>equals()</code>：判断两个字符串是否相等，注意不能直接用==</li>
<li><code>compareTo()</code>：判断两个字符串的字典序大小，负数表示小于，0表示相等，正数表示大于</li>
<li><code>startsWith()</code>：判断是否以某个前缀开头</li>
<li><code>endsWith()</code>：判断是否以某个后缀结尾</li>
<li><code>trim()</code>：去掉首位的空白字符</li>
<li><code>toLowerCase()</code>：全部用小写字符</li>
<li><code>toUpperCase()</code>：全部用大写字符</li>
<li><code>replace(char oldChar, char newChar)</code>：替换字符</li>
<li><code>replace(String oldRegex, String newRegex)</code>：替换字符串</li>
<li><code>substring(int beginIndex, int endIndex)</code>：返回<code>[beginIndex, endIndex)</code>中的子串</li>
</ul>
<h4 id="stringbuilder-stringbuffer"><a class="markdownIt-Anchor" href="#stringbuilder-stringbuffer"></a> <code>StringBuilder</code>、<code>StringBuffer</code></h4>
<p><code>String</code>不能被修改，如果打算修改字符串，可以使用<code>StringBuilder</code>和<code>StringBuffer</code>。</p>
<p><code>StringBuffer</code>线程安全，速度较慢；<code>StringBuilder</code>线程不安全，速度较快。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello &quot;</span>);  <span class="comment">// 初始化</span></span><br><span class="line">sb.append(<span class="string">&quot;World&quot;</span>);  <span class="comment">// 拼接字符串</span></span><br><span class="line">System.out.println(sb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sb.length(); i ++ ) &#123;</span><br><span class="line">    sb.setCharAt(i, (<span class="type">char</span>)(sb.charAt(i) + <span class="number">1</span>));  <span class="comment">// 读取和写入字符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sb);</span><br></pre></td></tr></table></figure>
<h5 id="常用api-2"><a class="markdownIt-Anchor" href="#常用api-2"></a> 常用API</h5>
<ul>
<li><code>reverse()</code>：翻转字符串</li>
</ul>
<h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3>
<p><code>Java</code>的所有变量和函数都要定义在类中。</p>
<p>函数或变量前加 <code>static</code> 表示静态对象，类似于全局变量。</p>
<p>静态对象属于<code>class</code>，而不属于<code>class</code>的具体实例</p>
<p><strong>静态函数中只能调用静态函数和静态变量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(max(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">        fill(a, <span class="number">3</span>);</span><br><span class="line">        System.out.println(Arrays.deepToString(a));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] b = getArray2d(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(Arrays.deepToString(b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(<span class="type">int</span>[][] a, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a[i].length; j ++ )</span><br><span class="line">                a[i][j] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] getArray2d(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j ++ )</span><br><span class="line">                a[i][j] = val;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类与接口"><a class="markdownIt-Anchor" href="#类与接口"></a> 类与接口</h3>
<h1 id="day03配置git环境与项目创建"><a class="markdownIt-Anchor" href="#day03配置git环境与项目创建"></a> day03：配置git环境与项目创建</h1>
<h2 id="项目设计"><a class="markdownIt-Anchor" href="#项目设计"></a> 项目设计</h2>
<ul>
<li>项目包含的模块
<ul>
<li>PK模块：匹配界面（微服务）、实况直播界面（WebSocket协议）</li>
<li>对局列表模块：对局列表界面、对局录像界面</li>
<li>排行榜模块：Bot排行榜界面</li>
<li>用户中心模块：注册界面、登录界面、我的Bot界面、每个Bot的详情界面</li>
</ul>
</li>
<li>前后端分离模式
<ul>
<li><code>SpringBoot</code>实现后端</li>
<li><code>Vue3</code>实现web端和AcApp端</li>
</ul>
</li>
</ul>
<h2 id="配置git环境"><a class="markdownIt-Anchor" href="#配置git环境"></a> 配置git环境</h2>
<ol>
<li>安装<code>Git Bash</code> <a href="https://gitforwindows.org/">https://gitforwindows.org/</a></li>
<li>进入家目录生成密钥：执行命令<code>ssh-keygen</code></li>
<li>在<code>Ac Git</code>上注册账号，<a href="https://git.acwing.com/"> Ac Git </a></li>
<li>将<code>id_rsa.pub</code>的内容复制到<code>Ac Git</code>上</li>
</ol>
<h2 id="创建项目后端"><a class="markdownIt-Anchor" href="#创建项目后端"></a> 创建项目后端</h2>
<ul>
<li><code>https://start.spring.io/</code> 加载慢的话，可以换成：<code>https://start.aliyun.com</code></li>
</ul>
<h3 id="创建项目"><a class="markdownIt-Anchor" href="#创建项目"></a> 创建项目</h3>
<p><img src="SpringCourse/image-20220711085513041.png" alt="image-20220711085513041" /></p>
<p>然后在下一页面只需要选择 <code>Web/Spring Web</code> 和 <code>Templa Engines/thymeleaf</code> 两个选项。</p>
<h3 id="编写类"><a class="markdownIt-Anchor" href="#编写类"></a> 编写类</h3>
<p><img src="SpringCourse/image-20220711085752419.png" alt="image-20220711085752419" /></p>
<p>则可以根据<code>localhost:8080/pk/index/</code>路径跳转至<code>index.html</code>页面</p>
<h3 id="修改后端端口号"><a class="markdownIt-Anchor" href="#修改后端端口号"></a> 修改后端端口号</h3>
<p>在<code>application.properties</code>文件中修改<code>server.port=8080</code>为<code>server.port=3000</code>，则访问路径变为：<code>localhost:3000</code></p>
<h2 id="创建项目web端与acapp端"><a class="markdownIt-Anchor" href="#创建项目web端与acapp端"></a> 创建项目Web端与AcApp端</h2>
<ul>
<li>vscode下载地址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
<li>Bootstrap官网地址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
<li>web端需要使用VSCode：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
<li>vue安装：看讲义 <a href="https://www.acwing.com/file_system/file/content/whole/index/content/5639568/"> vue讲义 </a></li>
</ul>
<h3 id="创建vue项目"><a class="markdownIt-Anchor" href="#创建vue项目"></a> 创建vue项目</h3>
<p>创建<code>vue</code> 项目时，使用<code>Power Shell</code>进行创建，可以现在<code>Power Sehll</code>里进入需要创建的目录中，再打开<code>vue ui</code>进行项目创建。</p>
<p><img src="SpringCourse/image-20220713204639004.png" alt="image-20220713204639004" /></p>
<ul>
<li>需要创建两个前端项目：<code>web</code> 和 <code>acapp</code></li>
</ul>
<p><img src="SpringCourse/image-20220713204546107.png" alt="image-20220713204546107" /></p>
<h3 id="安装插件"><a class="markdownIt-Anchor" href="#安装插件"></a> 安装插件</h3>
<p>创建好项目后，需要安装插件：</p>
<p><img src="SpringCourse/image-20220713205101757.png" alt="image-20220713205101757" /></p>
<h3 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h3>
<p>然后<code>web</code>端需要再装依赖<code>jquery</code>和<code>bootstrap</code></p>
<p><img src="SpringCourse/image-20220713205210434.png" alt="image-20220713205210434" /></p>
<h3 id="运行项目"><a class="markdownIt-Anchor" href="#运行项目"></a> 运行项目</h3>
<p><img src="SpringCourse/image-20220713205342173.png" alt="image-20220713205342173" /></p>
<h1 id="day04创建菜单与游戏页面-1"><a class="markdownIt-Anchor" href="#day04创建菜单与游戏页面-1"></a> day04：创建菜单与游戏页面 1</h1>
<h2 id="vue创建组件"><a class="markdownIt-Anchor" href="#vue创建组件"></a> Vue创建组件</h2>
<p><strong>组件作用：</strong> 当所有页面都共享一部分内容时，可将该内容写为一个组件。</p>
<p>在 <code>components/</code> 目录下创建。</p>
<p>**注意：**组件名称必须有两个字母大写，没有或只有一个会报错</p>
<p><img src="SpringCourse/image-20220713210047829.png" alt="image-20220713210047829" /></p>
<ul>
<li>每个<code>.vue</code>文件由三部分组成：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;  /* scoped的作用是在本页面写的css会加上随机字符串，不会影响别的页面 */</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h2 id="创建导航栏"><a class="markdownIt-Anchor" href="#创建导航栏"></a> 创建导航栏</h2>
<p>效果图：</p>
<p><img src="https://cdn.acwing.com/media/article/image/2022/07/12/167993_a28e469f01-2a9d61c76c0c44bd5ddb30e4522148c.png" alt="2a9d61c76c0c44bd5ddb30e4522148c.png" /></p>
<h3 id="bootstrap添加导航栏"><a class="markdownIt-Anchor" href="#bootstrap添加导航栏"></a> Bootstrap添加导航栏</h3>
<p>在 <a href="https://v5.bootcss.com/docs/components/navbar/">Bootstrap</a> 中搜索Navbar就可以找到各种样式的导航栏，选择其中一种即可。</p>
<p>在<code>components/</code>目录下创建<code>NavBar.vue</code>组件，并修改组件中的一些名称信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;!-- router-link 使用该标签代替a标签，点击时页面不会刷新 --&gt;</span><br><span class="line">      &lt;router-link class=&quot;navbar-brand&quot; :to=&quot;&#123; name: &#x27;home&#x27; &#125;&quot;&gt;King Of Bots&lt;/router-link&gt;</span><br><span class="line">      &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarText&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;navbar-nav me-auto mb-2 mb-lg-0&quot;&gt;</span><br><span class="line">          &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">            &lt;router-link :class=&quot;route_name == &#x27;pk_index&#x27; ? &#x27;nav-link active&#x27; : &#x27;nav-link&#x27;&quot; :to=&quot;&#123; name: &#x27;pk_index&#x27; &#125;&quot;&gt;</span><br><span class="line">              对战</span><br><span class="line">            &lt;/router-link&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">          &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">            &lt;router-link :class=&quot;route_name == &#x27;record_index&#x27; ? &#x27;nav-link active&#x27; : &#x27;nav-link&#x27;&quot;</span><br><span class="line">              :to=&quot;&#123; name: &#x27;record_index&#x27; &#125;&quot;&gt;对局列表&lt;/router-link&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">          &lt;li class=&quot;nav-item&quot;&gt;</span><br><span class="line">            &lt;router-link :class=&quot;route_name == &#x27;ranklist_index&#x27; ? &#x27;nav-link active&#x27; : &#x27;nav-link&#x27;&quot;</span><br><span class="line">              :to=&quot;&#123; name: &#x27;ranklist_index&#x27; &#125;&quot;&gt;排行榜&lt;/router-link&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=&quot;navbar-nav&quot;&gt;</span><br><span class="line">          &lt;li class=&quot;nav-item dropdown&quot;&gt;</span><br><span class="line">            &lt;a class=&quot;nav-link dropdown-toggle&quot; href=&quot;#&quot; id=&quot;navbarDropdown&quot; role=&quot;button&quot; data-bs-toggle=&quot;dropdown&quot;</span><br><span class="line">              aria-expanded=&quot;false&quot;&gt;</span><br><span class="line">              xzt</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;ul class=&quot;dropdown-menu&quot; aria-labelledby=&quot;navbarDropdown&quot;&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;router-link class=&quot;dropdown-item&quot; :to=&quot;&#123; name: &#x27;user_bot_index&#x27; &#125;&quot;&gt;我的Bot&lt;/router-link&gt;</span><br><span class="line">              &lt;/li&gt;</span><br><span class="line">              &lt;li&gt;</span><br><span class="line">                &lt;hr class=&quot;dropdown-divider&quot;&gt;</span><br><span class="line">              &lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;a class=&quot;dropdown-item&quot; href=&quot;#&quot;&gt;退出&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; useRoute &#125; from &#x27;vue-router&#x27;  // 用于获取当前在哪个页面</span><br><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const route = useRoute();</span><br><span class="line">    let route_name = computed(() =&gt; route.name)</span><br><span class="line">    return &#123;</span><br><span class="line">      route_name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="会遇到的问题"><a class="markdownIt-Anchor" href="#会遇到的问题"></a> 会遇到的问题</h3>
<p>在创建好组件后，会提示需要安装依赖<code>@popperjs/core</code>，去vue页面下载安装即可。</p>
<p><img src="SpringCourse/image-20220721152928047.png" alt="image-20220721152928047" /></p>
<p><img src="SpringCourse/image-20220721153032064.png" alt="image-20220721153032064" /></p>
<h3 id="将页面和导航栏链接地址映射"><a class="markdownIt-Anchor" href="#将页面和导航栏链接地址映射"></a> 将页面和导航栏链接地址映射</h3>
<ul>
<li>创建页面</li>
</ul>
<p>在<code>views/</code>目录下创建若干目录，分别保存一个对应的<code>.vue</code>文件，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- RanklistIndexView.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ContentField&gt;排行榜&lt;/ContentField&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ContentField from &#x27;@/components/ContentField.vue&#x27; // 写的一个组件，所有页面共享的一个组件</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        ContentField</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ContentField.vue</code>组件，实现一个卡片，在<code>bootstrap</code>中搜索 card 即可得到</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ContentField.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container content-field&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;card&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">div.content-field &#123;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>和链接地址关联起来</li>
</ul>
<p>在<code>router/</code>目录下创建<code>index.js</code>，在文件中填写路由</p>
<ul>
<li>需要输入根目录重定向至pk页面</li>
<li>输入地址格式错误或乱码，则重定向至404页面</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PkIndexView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/pk/PkIndexView&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">RecordIndexView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/record/RecordIndexView&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">RanklistIndexView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/ranklist/RanklistIndexView&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/error/NotFound&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserBotIndexView</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/user/bot/UserBotIndexView&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/pk/&quot;</span>,  <span class="comment">// 输入根目录重定向至pk页面</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/pk/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;pk_index&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">PkIndexView</span>,  <span class="comment">// 地址栏输入 localhost:8080/pk/ 即可显示 PkIndexView 的内容</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/record/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;record_index&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">RecordIndexView</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/ranklist/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;ranklist_index&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">RanklistIndexView</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/404/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;404&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">NotFound</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/bot/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;user_bot_index&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserBotIndexView</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/:catchAll(.*)&quot;</span>,  <span class="comment">// 输入格式错误或乱码，则重定向至404页面</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/404/&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="导航栏中存在的问题"><a class="markdownIt-Anchor" href="#导航栏中存在的问题"></a> 导航栏中存在的问题</h3>
<ul>
<li>每次点击某个链接，页面会进行刷新，可以将<code>&lt;a&gt;</code>标签改为<code>&lt;router-link&gt;</code>标签，避免这种问题</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link :class=&quot;route_name == &#x27;pk_index&#x27; ? &#x27;nav-link active&#x27; : &#x27;nav-link&#x27;&quot; :to=&quot;&#123; name: &#x27;pk_index&#x27; &#125;&quot;&gt;</span><br><span class="line">    对战</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>:class</code> 判断是否在当前页面，若在的话则可以添加<code>active</code> 实现该链接名高亮。</li>
<li><code>:to</code> 点击时跳转的页面，通过上面<code>router/index.js</code>页面的映射名字进行跳转。</li>
</ul>
<h3 id="最终效果"><a class="markdownIt-Anchor" href="#最终效果"></a> 最终效果</h3>
<p><img src="SpringCourse/image-20220721155438423.png" alt="image-20220721155438423" /></p>
<h2 id="创建对战页面的地图和障碍物"><a class="markdownIt-Anchor" href="#创建对战页面的地图和障碍物"></a> 创建对战页面的地图和障碍物</h2>
<h3 id="需要实现的效果"><a class="markdownIt-Anchor" href="#需要实现的效果"></a> 需要实现的效果</h3>
<p><img src="https://cdn.acwing.com/media/article/image/2022/07/13/167993_2f8b6d2a02-336af4ed02ac84321dea23ad81ba97a.png" alt="336af4ed02ac84321dea23ad81ba97a.png" /></p>
<h3 id="创建游戏对象基类"><a class="markdownIt-Anchor" href="#创建游戏对象基类"></a> 创建游戏对象基类</h3>
<p>**目的：**因为每秒游戏的对象都会刷新一遍，所以需要将所有游戏的对象都存入一个数组中</p>
<p>在<code>assets/</code>目录下创建<code>scripts/</code> 和 <code>images/</code>目录，然后在<code>scripts/</code>目录下创建 <code>AcGameObject.js</code></p>
<p>编写递归函数：若<code>this.has_called_start = false</code>则代表没执行过<code>start()</code>函数，执行该函数即可。否则，需要执行<code>update()</code>函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">AC_GAME_OBJECTS</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AcGameObject</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable constant_">AC_GAME_OBJECTS</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timedelta</span> = <span class="number">0</span>;  <span class="comment">// 时间间隔</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">has_called_start</span> = <span class="literal">false</span>; <span class="comment">// 判断start函数是否被执行</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123; <span class="comment">// 创建时执行，只执行一次</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>)&#123; <span class="comment">// 每一帧执行一次，除第一帧之外</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">on_destory</span>(<span class="params"></span>) &#123; <span class="comment">// 删除之前执行</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">destory</span>(<span class="params"></span>) &#123;  <span class="comment">// 删除当前元素</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">on_destory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="variable constant_">AC_GAME_OBJECTS</span>) &#123; <span class="comment">// of 遍历的是值，in 遍历的是下标</span></span><br><span class="line">            <span class="keyword">const</span> obj = <span class="variable constant_">AC_GAME_OBJECTS</span>[i];</span><br><span class="line">            <span class="keyword">if</span>(obj === <span class="variable language_">this</span>)&#123;</span><br><span class="line">                <span class="variable constant_">AC_GAME_OBJECTS</span>.<span class="title function_">splice</span>(i);  <span class="comment">// 删除 i位置元素</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> last_timestamp; <span class="comment">// 上一次执行的时刻</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">step</span> = timestamp =&gt;&#123;  <span class="comment">// 传入参数 timestamp 当前时刻</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> obj <span class="keyword">of</span> <span class="variable constant_">AC_GAME_OBJECTS</span>) &#123;  <span class="comment">// of 遍历的是值，in 遍历的是下标</span></span><br><span class="line">        <span class="keyword">if</span>(!obj.<span class="property">has_called_start</span>)&#123;  <span class="comment">// start 函数还没有被执行</span></span><br><span class="line">            obj.<span class="property">has_called_start</span> = <span class="literal">true</span>;</span><br><span class="line">            obj.<span class="title function_">start</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            obj.<span class="property">timedelta</span> = timestamp - last_timestamp;</span><br><span class="line">            obj.<span class="title function_">update</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last_timestamp = timestamp;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(step)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(step)</span><br></pre></td></tr></table></figure>
<h3 id="创建游戏地图"><a class="markdownIt-Anchor" href="#创建游戏地图"></a> 创建游戏地图</h3>
<ul>
<li>
<p>在<code>assets/scripts/</code>目录下创建<code>GameMap.js</code>文件，实现渲染的逻辑</p>
</li>
<li>
<p>在<code>components/</code>目录下创建<code>GameMap.vue</code> 和 <code>PlayGround.vue</code> 组件，实现游戏地图的页面创建</p>
</li>
<li>
<p><code>GameMap</code>：主要显示游戏地图，并调用 js 文件进行地图渲染</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- GameMap.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div ref=&quot;parent&quot; class=&quot;gamemap&quot;&gt;</span><br><span class="line">        &lt;canvas ref=&quot;canvas&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; GameMap &#125; from &quot;@/assets/scripts/GameMap&quot;;</span><br><span class="line">import &#123; ref, onMounted &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        let parent = ref(null);</span><br><span class="line">        let canvas = ref(null);</span><br><span class="line"></span><br><span class="line">        onMounted(() =&gt; &#123;</span><br><span class="line">            new GameMap(canvas.value.getContext(&#x27;2d&#x27;), parent.value)  // 创建GameMap对象，并传入参数</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        return &#123;</span><br><span class="line">            parent,</span><br><span class="line">            canvas</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    div.gamemap&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        display: flex;  /* 居中，可以使水平和垂直都居中 */</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>PlayGround</code>：主要显示 pk 页面的内容，除了游戏地图可能还包含积分板等其他内容，</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- PlayGround.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;playground&quot;&gt;</span><br><span class="line">        &lt;GameMap /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import GameMap from &quot;./GameMap.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        GameMap,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    div.playground &#123;</span><br><span class="line">        width: 60vw;</span><br><span class="line">        height: 70vh;</span><br><span class="line">        /* background-color: lightblue; */  /* 背景颜色可以去掉 */</span><br><span class="line">        margin: 40px auto;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改后的 <code>PkIndexView.vue</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;PlayGround /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import PlayGround from &#x27;../../components/PlayGround.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">    PlayGround</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p><img src="SpringCourse/image-20220721162638515.png" alt="image-20220721162638515" /></p>
<h4 id="gamemapjs创建格子地图"><a class="markdownIt-Anchor" href="#gamemapjs创建格子地图"></a> <code>GameMap.js</code>创建格子地图</h4>
<p>定义初始变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">ctx, parent</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span> = ctx;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parent</span> = parent;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">L</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rows</span> = <span class="number">13</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cols</span> = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>首先需要计算每个小正方形的大小。规定游戏地图由13行，每行13个小正方形组成。</li>
</ul>
<p>所以小正方形的边长求解办法为：<code>min&#123; height / rows, width / cols&#125;</code>，编写<code>update_size()</code>函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">update_size</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">L</span> = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable language_">this</span>.<span class="property">parent</span>.<span class="property">clientWidth</span> / <span class="variable language_">this</span>.<span class="property">cols</span>, <span class="variable language_">this</span>.<span class="property">parent</span>.<span class="property">clientHeight</span> / <span class="variable language_">this</span>.<span class="property">rows</span>));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">canvas</span>.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">L</span> * <span class="variable language_">this</span>.<span class="property">cols</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">canvas</span>.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">L</span> * <span class="variable language_">this</span>.<span class="property">rows</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">update_size</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//画图</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">fillStyle</span> = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">canvas</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">canvas</span>.<span class="property">height</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>奇偶显示正方形区域内的小格子</li>
</ul>
<p>定义两种颜色，如果是偶数显示一种颜色，否则显示另一种颜色。修改<code>render()</code> 函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;  <span class="comment">// 渲染</span></span><br><span class="line">    <span class="keyword">const</span> color_even = <span class="string">&quot;#AAD751&quot;</span>, color_odd = <span class="string">&quot;#A2D149&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> r = <span class="number">0</span>; r &lt; <span class="variable language_">this</span>.<span class="property">rows</span>; r ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; <span class="variable language_">this</span>.<span class="property">cols</span>; c ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((r + c) % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">fillStyle</span> = color_even;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">fillStyle</span> = color_odd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 左上角左边，明确canvas坐标系</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">fillRect</span>(c * <span class="variable language_">this</span>.<span class="property">L</span>, r * <span class="variable language_">this</span>.<span class="property">L</span>, <span class="variable language_">this</span>.<span class="property">L</span>, <span class="variable language_">this</span>.<span class="property">L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">update_size</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="SpringCourse/image-20220721164332394.png" alt="image-20220721164332394" /></p>
<h4 id="创建墙"><a class="markdownIt-Anchor" href="#创建墙"></a> 创建墙</h4>
<p>在<code>scripts/</code>目录下创建Wall.js`</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AcGameObject</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./AcGameObject&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Wall</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AcGameObject</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">r, c, gamemap</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">r</span> = r;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">c</span> = c;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gamemap</span> = gamemap;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&quot;#B37226&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> L = <span class="variable language_">this</span>.<span class="property">gamemap</span>.<span class="property">L</span>;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">gamemap</span>.<span class="property">ctx</span>;</span><br><span class="line"></span><br><span class="line">        ctx.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">color</span>;</span><br><span class="line">        ctx.<span class="title function_">fillRect</span>(<span class="variable language_">this</span>.<span class="property">c</span> * L, <span class="variable language_">this</span>.<span class="property">r</span> * L, L, L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修改gamemapjs给四周添加墙"><a class="markdownIt-Anchor" href="#修改gamemapjs给四周添加墙"></a> 修改<code>GameMap.js</code>给四周添加墙</h4>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">ctx, parent</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span> = ctx;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parent</span> = parent;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">L</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rows</span> = <span class="number">13</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cols</span> = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">wall</span> = []; <span class="comment">// 添加墙</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">creat_Walls</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 墙 true 无 false</span></span><br><span class="line">    <span class="keyword">const</span> g = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> r = <span class="number">0</span>; r &lt; <span class="variable language_">this</span>.<span class="property">cols</span>; r ++ ) &#123;</span><br><span class="line">        g[r] = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; <span class="variable language_">this</span>.<span class="property">cols</span>; c ++ ) &#123;</span><br><span class="line">            g[r][c] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给四周加上墙</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> r = <span class="number">0</span>; r &lt; <span class="variable language_">this</span>.<span class="property">rows</span>; r ++ ) &#123;</span><br><span class="line">        g[r][<span class="number">0</span>] = g[r][<span class="variable language_">this</span>.<span class="property">cols</span> - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; <span class="variable language_">this</span>.<span class="property">cols</span>; c ++ ) &#123;</span><br><span class="line">        g[<span class="number">0</span>][c] = g[<span class="variable language_">this</span>.<span class="property">rows</span> - <span class="number">1</span>][c] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> r = <span class="number">0</span>; r &lt; <span class="variable language_">this</span>.<span class="property">rows</span>; r ++ ) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; <span class="variable language_">this</span>.<span class="property">cols</span>; c ++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[r][c]) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">wall</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Wall</span>(r, c, <span class="variable language_">this</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">create_Walls</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="SpringCourse/image-20220721164838093.png" alt="image-20220721164838093" /></p>
<h4 id="在地图中随机生成墙"><a class="markdownIt-Anchor" href="#在地图中随机生成墙"></a> 在地图中随机生成墙</h4>
<p>要求：</p>
<ul>
<li>在地图中随机生成墙，并且是沿主对角线轴对称生成，</li>
<li>左下角和右上角不会生成，用来做蛇的初始位置</li>
<li>保证从左下角到右上角是连通的。这边使用 <code>flood fill</code>算法实现。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">check_connectivity</span>(<span class="params">g, sx, sy, tx, ty</span>)&#123; <span class="comment">// 判断是否连通</span></span><br><span class="line">    <span class="keyword">if</span>(sx == tx &amp;&amp; sy == ty) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    g[sx][sy] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dx = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], dy = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++)&#123;</span><br><span class="line">        <span class="keyword">let</span> x = sx + dx[i], y = sy + dy[i];</span><br><span class="line">        <span class="keyword">if</span>(!g[x][y] &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">check_connectivity</span>(g, x, y, tx, ty))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">create_Walls</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> g = [];</span><br><span class="line">    <span class="comment">// 初始化g数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> r = <span class="number">0</span>; r &lt; <span class="variable language_">this</span>.<span class="property">rows</span>; r ++)&#123;</span><br><span class="line">        g[r] = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; <span class="variable language_">this</span>.<span class="property">cols</span>; c ++)&#123;</span><br><span class="line">            g[r][c] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给四周加上障碍物</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> r = <span class="number">0</span>; r &lt; <span class="variable language_">this</span>.<span class="property">rows</span>; r ++)&#123;</span><br><span class="line">        g[r][<span class="number">0</span>] = g[r][<span class="variable language_">this</span>.<span class="property">cols</span> - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; <span class="variable language_">this</span>.<span class="property">cols</span>; c ++)&#123;</span><br><span class="line">        g[<span class="number">0</span>][c] = g[<span class="variable language_">this</span>.<span class="property">rows</span> - <span class="number">1</span>][c] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建随机障碍物</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">inner_walls_count</span> / <span class="number">2</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j ++) &#123;</span><br><span class="line">            <span class="keyword">let</span> r = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable language_">this</span>.<span class="property">rows</span>);</span><br><span class="line">            <span class="keyword">let</span> c = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable language_">this</span>.<span class="property">cols</span>);</span><br><span class="line">            <span class="keyword">if</span>(g[r][c] || g[c][r]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(r == <span class="variable language_">this</span>.<span class="property">rows</span> - <span class="number">2</span> &amp;&amp; c == <span class="number">1</span> || r == <span class="number">1</span> &amp;&amp; c == <span class="variable language_">this</span>.<span class="property">cols</span> - <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">            g[r][c] = g[c][r] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> copy_g = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(g)); <span class="comment">// 将 g 复制一遍</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="title function_">check_connectivity</span>(copy_g, <span class="variable language_">this</span>.<span class="property">rows</span> - <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="variable language_">this</span>.<span class="property">cols</span> - <span class="number">2</span>)) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> r = <span class="number">0</span>; r &lt; <span class="variable language_">this</span>.<span class="property">rows</span>; r ++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; <span class="variable language_">this</span>.<span class="property">cols</span>; c ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(g[r][c])&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">walls</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Wall</span>(r, c, <span class="variable language_">this</span>));  <span class="comment">// 将 [r,c] 位置设置为墙</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i ++ )</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">create_Walls</span>())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="day05创建菜单与游戏界面-2"><a class="markdownIt-Anchor" href="#day05创建菜单与游戏界面-2"></a> day05：创建菜单与游戏界面 2</h1>
<h2 id="修改地图"><a class="markdownIt-Anchor" href="#修改地图"></a> 修改地图</h2>
<p>**原因：**上次实现的地图是一个<code>13 * 13</code>的正方形，可能会造成一种情况：在某一时刻后，两个选手的操作会造成两条蛇头走到同一个格子。降低了游戏的公平性。因此需要进行修改。</p>
<p>**思想：**我们只需要将两条蛇的坐标 <strong>改为和为奇数</strong> 的情况，也就是说将整张地图改为<code>13 * 14</code>大小。</p>
<p><strong>修改代码：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GameMap.js 中</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">rows</span> = <span class="number">13</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">cols</span> = <span class="number">14</span>;</span><br></pre></td></tr></table></figure>
<h3 id="连带修改"><a class="markdownIt-Anchor" href="#连带修改"></a> 连带修改：</h3>
<p>**原因：**修改地图后会造成游戏地图变成长方形，不能实现主对角线轴对称，所以需要把轴对称改为中心对称。实现方式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GameMap.js 中</span></span><br><span class="line"><span class="comment">// 创建随机障碍物</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">inner_walls_count</span> / <span class="number">2</span>; i ++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j ++) &#123;</span><br><span class="line">        <span class="keyword">let</span> r = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable language_">this</span>.<span class="property">rows</span>);</span><br><span class="line">        <span class="keyword">let</span> c = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable language_">this</span>.<span class="property">cols</span>);</span><br><span class="line">        <span class="keyword">if</span>(g[r][c] || g[<span class="variable language_">this</span>.<span class="property">rows</span> - <span class="number">1</span> - r][<span class="variable language_">this</span>.<span class="property">cols</span> - <span class="number">1</span> - c]) <span class="keyword">continue</span>;  <span class="comment">// 因为地图是长方形，所以需要实现障碍物中心对称</span></span><br><span class="line">        <span class="keyword">if</span>(r == <span class="variable language_">this</span>.<span class="property">rows</span> - <span class="number">2</span> &amp;&amp; c == <span class="number">1</span> || r == <span class="number">1</span> &amp;&amp; c == <span class="variable language_">this</span>.<span class="property">cols</span> - <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">        g[r][c] = g[<span class="variable language_">this</span>.<span class="property">rows</span> - <span class="number">1</span> - r][<span class="variable language_">this</span>.<span class="property">cols</span> - <span class="number">1</span> - c] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="SpringCourse/image-20220723144936817.png" alt="image-20220723144936817" /></p>
<h2 id="实现蛇头"><a class="markdownIt-Anchor" href="#实现蛇头"></a> 实现蛇头</h2>
<p>**实现思想：**本质上蛇是由一堆联系的格子组成的序列，所以只需要把格子记录下来即可。</p>
<h3 id="实现celljs"><a class="markdownIt-Anchor" href="#实现celljs"></a> 实现<code>Cell.js</code></h3>
<p>创建<code>Cell.js</code>用于存储蛇所占用的格子信息，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Cell.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Cell</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">r, c</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">r</span> = r;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">c</span> = c;</span><br><span class="line">        <span class="comment">// 替换为 canvas 的坐标系</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = c + <span class="number">0.5</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = r + <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现snakejs"><a class="markdownIt-Anchor" href="#实现snakejs"></a> 实现<code>Snake.js</code></h3>
<ul>
<li>创建<code>Snake.js</code>对象，进行蛇的绘制渲染</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sanke.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AcGameObject</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./AcGameObject&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Cell</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Cell&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Snake</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AcGameObject</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">info, gamemap</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出基本的id</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = info.<span class="property">id</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = info.<span class="property">color</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gamemap</span> = gamemap; <span class="comment">// 方便调用函数和参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存放蛇的身体;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cells</span> = [<span class="keyword">new</span> <span class="title class_">Cell</span>(info.<span class="property">r</span>, info.<span class="property">c</span>)];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 画出基本的蛇头</span></span><br><span class="line">        <span class="keyword">const</span> L = <span class="variable language_">this</span>.<span class="property">gamemap</span>.<span class="property">L</span>;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">gamemap</span>.<span class="property">ctx</span>;</span><br><span class="line"></span><br><span class="line">        ctx.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">color</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> cell <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">cells</span>) &#123;</span><br><span class="line">            ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">            ctx.<span class="title function_">arc</span>(cell.<span class="property">x</span> * L, cell.<span class="property">y</span> * L, L / <span class="number">2</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>);</span><br><span class="line">            ctx.<span class="title function_">fill</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改<code>GameMap.js</code>，在<code>GameMap.js</code>中创建两条蛇的对象，方便每帧渲染一次。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GameMap.js constructor 中添加</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">Snakes</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Snake</span>(&#123;id : <span class="number">0</span>, color : <span class="string">&quot;#4876ec&quot;</span>, r : <span class="variable language_">this</span>.<span class="property">rows</span> - <span class="number">2</span>, c : <span class="number">1</span>&#125;, <span class="variable language_">this</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Snake</span>(&#123;id : <span class="number">1</span>, color : <span class="string">&quot;#f94848&quot;</span>, r : <span class="number">1</span>, c : <span class="variable language_">this</span>.<span class="property">cols</span> - <span class="number">2</span>&#125;, <span class="variable language_">this</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>成功界面</strong></p>
<p><img src="SpringCourse/image-20220723145947427.png" alt="image-20220723145947427" /></p>
<h2 id="实现蛇的移动"><a class="markdownIt-Anchor" href="#实现蛇的移动"></a> 实现蛇的移动</h2>
<p><strong>实现思想：</strong></p>
<p>移动应该是连贯的，但是蛇的身体是由一格一格连续的格子组成的</p>
<blockquote>
<p>中间保持不动，头和尾动，在头部创建一个新的节点，朝着目的地移动。尾巴朝着目的地动</p>
</blockquote>
<p>蛇移动的条件</p>
<blockquote>
<p>同时获取到 两个人 / 两个机器 的操作才能够移动</p>
</blockquote>
<h3 id="最简单的移动"><a class="markdownIt-Anchor" href="#最简单的移动"></a> 最简单的移动</h3>
<p>在<code>Snake.js</code>中添加代码，实现蛇头的向右移动</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Snake.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AcGameObject</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./AcGameObject&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Cell</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Cell&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Snake</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AcGameObject</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">info, gamemap</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(); <span class="comment">// 继承AcGameObject的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = info.<span class="property">id</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = info.<span class="property">color</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gamemap</span> = gamemap;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cells</span> = [<span class="keyword">new</span> <span class="title class_">Cell</span>(info.<span class="property">r</span>, info.<span class="property">c</span>)]; <span class="comment">// 存放蛇的身体， cell[0] 存放蛇头</span></span><br><span class="line">        <span class="comment">// 表示移动速度</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">update_move</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 向右移动</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">x</span> += <span class="variable language_">this</span>.<span class="property">speed</span> * <span class="variable language_">this</span>.<span class="property">timedelta</span> / <span class="number">1000</span>;</span><br><span class="line">        <span class="comment">//向上移动</span></span><br><span class="line">        <span class="comment">//this.cells[0].y -= this.speed * this.timedelta / 1000;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">update_move</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所呈现的效果是：两个小球一直向右移动。</p>
<h2 id="实现连贯的移动"><a class="markdownIt-Anchor" href="#实现连贯的移动"></a> 实现连贯的移动</h2>
<p>由于可能会产生一些问题， 也就是中间某个状态，没有完全移出去，蛇的身子会出现问题。</p>
<ul>
<li>中间不动，首尾动！创建的虚拟节点朝着目的地移动。只有两个点动。</li>
<li>考虑蛇什么时候动? 回合制游戏，两个人都有输入的时候，才可以移动。</li>
</ul>
<p>修改<code>Snake.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Snake.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AcGameObject</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./AcGameObject&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Cell</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Cell&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Snake</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AcGameObject</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">info, gamemap</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = info.<span class="property">id</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = info.<span class="property">color</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gamemap</span> = gamemap;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存放蛇的身体;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cells</span> = [<span class="keyword">new</span> <span class="title class_">Cell</span>(info.<span class="property">r</span>, info.<span class="property">c</span>)];</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">5</span>; <span class="comment">// 蛇每秒走5格</span></span><br><span class="line">        <span class="comment">// new add</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">direction</span> = -<span class="number">1</span>; <span class="comment">// 移动方向，-1表示没有指令 0, 1, 2, 3表示上右下左 </span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;idle&quot;</span>; <span class="comment">// idle静止， move 移动 die 死亡</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要有一个”裁判“来判断两条蛇是否进行移动，但是&quot;运动员&quot;不能当”裁判“，所以需要把判断的代码写在<code>GameMap.js</code>中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GameMap.js</span></span><br><span class="line"><span class="title function_">check_ready</span>(<span class="params"></span>) &#123; <span class="comment">// 判断两条蛇是否准备下一回合了</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">const</span> snake <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">snakes</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (snake.<span class="property">status</span> !== <span class="string">&quot;idle&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (snake.<span class="property">direction</span> === -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在 <code>Snake.js</code>中更新下一步蛇的状态。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Snake.js</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">next_cell</span> = <span class="literal">null</span>; <span class="comment">//下一步的目标位置</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">dr</span> = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]; <span class="comment">// 行偏移量</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">dc</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]; <span class="comment">// 列偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">step</span> = <span class="number">0</span>;  <span class="comment">// 表示回合数</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">next_step</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> d = <span class="variable language_">this</span>.<span class="property">direction</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next_cell</span> = <span class="keyword">new</span> <span class="title class_">Cell</span>(<span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">r</span> + <span class="variable language_">this</span>.<span class="property">dr</span>[d], <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">c</span> + <span class="variable language_">this</span>.<span class="property">dc</span>[d]);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">direction</span> = -<span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;move&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">step</span> ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在<code>GameMap.js</code>中实现每帧更新下状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GameMap.js</span></span><br><span class="line"><span class="title function_">next_step</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> snake <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">snake</span>) &#123;</span><br><span class="line">        snake.<span class="title function_">next_step</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">update_size</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">check_ready</span>()) &#123;  <span class="comment">// 如果两条蛇都准备好了</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">next_step</span>(); <span class="comment">// 则让两条蛇更新状态</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现读取键盘的操作"><a class="markdownIt-Anchor" href="#实现读取键盘的操作"></a> 实现读取键盘的操作</h2>
<p>从键盘获取<code>w</code> <code>a</code> <code>s</code> <code>d</code> 和  <code>↑</code> <code>↓</code> <code>←</code> <code>→</code> 来控制两条蛇。</p>
<p>在<code>GameMap.vue</code>中修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;canvas ref=&quot;canvas&quot; tabindex=&quot;0&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>绑定事件</li>
</ul>
<p>在<code>Snake.js</code>中加入一个辅助函数，用来获取给的移动方向。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Snake.js</span></span><br><span class="line"><span class="comment">//辅助函数</span></span><br><span class="line"><span class="title function_">set_direction</span>(<span class="params">d</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">direction</span> = d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>GameMap.js</code>中修改，添加事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GameMap.js</span></span><br><span class="line"><span class="title function_">add_listening_events</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">canvas</span>.<span class="title function_">focus</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [snake0, snake1] = <span class="variable language_">this</span>.<span class="property">snakes</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">canvas</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;keydown&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 设置第一条蛇的移动方向</span></span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;w&#x27;</span>) snake0.<span class="title function_">set_direction</span>(<span class="number">0</span>);  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;d&#x27;</span>) snake0.<span class="title function_">set_direction</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;s&#x27;</span>) snake0.<span class="title function_">set_direction</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;a&#x27;</span>) snake0.<span class="title function_">set_direction</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 设置第二条蛇的移动方向</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;ArrowUp&#x27;</span>) snake1.<span class="title function_">set_direction</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;ArrowRight&#x27;</span>) snake1.<span class="title function_">set_direction</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;ArrowDown&#x27;</span>) snake1.<span class="title function_">set_direction</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;ArrowLeft&#x27;</span>) snake1.<span class="title function_">set_direction</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>Snake.js</code>中更新状态，让每一帧执行一次更新状态。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Snake.js</span></span><br><span class="line"><span class="title function_">update</span>(<span class="params"></span>) &#123; <span class="comment">// 每一帧执行一次</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;move&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">uppdate_move</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现真正的移动"><a class="markdownIt-Anchor" href="#实现真正的移动"></a> 实现真正的移动</h2>
<p>在<code>Snake.js</code>中修改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Snake.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AcGameObject</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./AcGameObject&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Cell</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./Cell&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Snake</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AcGameObject</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">info, gamemap</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = info.<span class="property">id</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = info.<span class="property">color</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gamemap</span> = gamemap;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cells</span> = [<span class="keyword">new</span> <span class="title class_">Cell</span>(info.<span class="property">r</span>, info.<span class="property">c</span>)];  <span class="comment">// 存放蛇的身体，cells[0]存放蛇头</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next_cell</span> = <span class="literal">null</span>;  <span class="comment">// 下一步的目标位置</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">5</span>;  <span class="comment">// 蛇每秒走5个格子</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">direction</span> = -<span class="number">1</span>;  <span class="comment">// -1表示没有指令，0、1、2、3表示上右下左</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;idle&quot;</span>;  <span class="comment">// idle表示静止，move表示正在移动，die表示死亡</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dr</span> = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>];  <span class="comment">// 4个方向行的偏移量</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dc</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>];  <span class="comment">// 4个方向列的偏移量</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">step</span> = <span class="number">0</span>;  <span class="comment">// 表示回合数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">eps</span> = <span class="number">1e-2</span>;  <span class="comment">// 允许的误差</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">set_direction</span>(<span class="params">d</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">direction</span> = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">next_step</span>(<span class="params"></span>) &#123; <span class="comment">//蛇的状态变为走下一步</span></span><br><span class="line">        <span class="keyword">const</span> d = <span class="variable language_">this</span>.<span class="property">direction</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next_cell</span> = <span class="keyword">new</span> <span class="title class_">Cell</span>(<span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">r</span> + <span class="variable language_">this</span>.<span class="property">dr</span>[d], <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">c</span> + <span class="variable language_">this</span>.<span class="property">dc</span>[d]);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">direction</span> = -<span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;move&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">step</span> ++ ;   </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求长度</span></span><br><span class="line">        <span class="keyword">const</span> k = <span class="variable language_">this</span>.<span class="property">cells</span>.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = k; i &gt; <span class="number">0</span>; i -- ) &#123; <span class="comment">// 初始元素不变 每一个元素往后移动一位</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cells</span>[i] = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">cells</span>[i - <span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update_move</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> dx = <span class="variable language_">this</span>.<span class="property">next_cell</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">x</span>;</span><br><span class="line">        <span class="keyword">const</span> dy = <span class="variable language_">this</span>.<span class="property">next_cell</span>.<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">y</span>;</span><br><span class="line">        <span class="keyword">const</span> distance = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (distance &lt; <span class="variable language_">this</span>.<span class="property">eps</span>) &#123;  <span class="comment">// 走到目标点了</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>] = <span class="variable language_">this</span>.<span class="property">next_cell</span>;  <span class="comment">// 添加一个新蛇头</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">next_cell</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;idle&quot;</span>;  <span class="comment">// 走完了，停下来</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> move_distance = <span class="variable language_">this</span>.<span class="property">speed</span> * <span class="variable language_">this</span>.<span class="property">timedelta</span> / <span class="number">1000</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">x</span> += move_distance * dx / distance;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">y</span> += move_distance * dy / distance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>) &#123;  <span class="comment">// 每一帧执行一次</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;move&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">update_move</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> L = <span class="variable language_">this</span>.<span class="property">gamemap</span>.<span class="property">L</span>;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">gamemap</span>.<span class="property">ctx</span>;</span><br><span class="line"></span><br><span class="line">        ctx.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">color</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> cell <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">cells</span>) &#123;</span><br><span class="line">            ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">            ctx.<span class="title function_">arc</span>(cell.<span class="property">x</span> * L, cell.<span class="property">y</span> * L, L / <span class="number">2</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>);</span><br><span class="line">            ctx.<span class="title function_">fill</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="蛇尾移动"><a class="markdownIt-Anchor" href="#蛇尾移动"></a> 蛇尾移动</h3>
<p>在<code>Snake.js</code>中添加代码，判断蛇尾是否增长。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Snake.js</span></span><br><span class="line"><span class="title function_">check_tail_increasing</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (step &lt;= <span class="number">10</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (step % <span class="number">3</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改<code>Snake.js</code>，判断蛇尾在下一步中是否增长</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">next_cell</span> = <span class="literal">null</span>; <span class="comment">//下一步的目标位置</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">dr</span> = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]; <span class="comment">// 行</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">dc</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]; <span class="comment">//列</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">step</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">eps</span> = <span class="number">1e-2</span> <span class="comment">// 允许的误差</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">next_step</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> d = <span class="variable language_">this</span>.<span class="property">direction</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next_cell</span> = <span class="keyword">new</span> <span class="title class_">Cell</span>(<span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">r</span> + <span class="variable language_">this</span>.<span class="property">dr</span>[d], <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">c</span> + <span class="variable language_">this</span>.<span class="property">dc</span>[d]);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">direction</span> = -<span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;move&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">step</span> ++ ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求长度</span></span><br><span class="line">    <span class="keyword">const</span> k = <span class="variable language_">this</span>.<span class="property">cells</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = k; i &gt; <span class="number">0</span>; i -- ) &#123; <span class="comment">// 初始元素不变 每一个元素往后移动一位</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cells</span>[i] = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">cells</span>[i - <span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">update_move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dx = <span class="variable language_">this</span>.<span class="property">next_cell</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">x</span>;</span><br><span class="line">    <span class="keyword">const</span> dy = <span class="variable language_">this</span>.<span class="property">next_cell</span>.<span class="property">y</span> - <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">y</span>;</span><br><span class="line">    <span class="keyword">const</span> distance = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (distance &lt; <span class="variable language_">this</span>.<span class="property">eps</span>) &#123;  <span class="comment">// 走到目标点了</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>] = <span class="variable language_">this</span>.<span class="property">next_cell</span>;  <span class="comment">// 添加一个新蛇头</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next_cell</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;idle&quot;</span>;  <span class="comment">// 走完了，停下来</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">check_tail_increasing</span>()) &#123; <span class="comment">// 蛇不变长。</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cells</span>.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> move_distance = <span class="variable language_">this</span>.<span class="property">speed</span> * <span class="variable language_">this</span>.<span class="property">timedelta</span> / <span class="number">1000</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">x</span> += move_distance * dx / distance;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">y</span> += move_distance * dy / distance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">check_tail_increasing</span>()) &#123;  <span class="comment">// 蛇不变长</span></span><br><span class="line">            <span class="keyword">const</span> k = <span class="variable language_">this</span>.<span class="property">cells</span>.<span class="property">length</span>;</span><br><span class="line">            <span class="keyword">const</span> tail = <span class="variable language_">this</span>.<span class="property">cells</span>[k - <span class="number">1</span>], tail_target = <span class="variable language_">this</span>.<span class="property">cells</span>[k - <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">const</span> tail_dx = tail_target.<span class="property">x</span> - tail.<span class="property">x</span>;</span><br><span class="line">            <span class="keyword">const</span> tail_dy = tail_target.<span class="property">y</span> - tail.<span class="property">y</span>;</span><br><span class="line">            tail.<span class="property">x</span> += move_distance * tail_dx / distance;</span><br><span class="line">            tail.<span class="property">y</span> += move_distance * tail_dy / distance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现效果</strong></p>
<p><img src="SpringCourse/image-20220723164245732.png" alt="image-20220723164245732" /></p>
<h2 id="美化蛇"><a class="markdownIt-Anchor" href="#美化蛇"></a> 美化蛇</h2>
<p>修改<code>Snake.js</code>，让蛇变得连贯，缩小一点，添加下列代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Snake.js</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> L = <span class="variable language_">this</span>.<span class="property">gamemap</span>.<span class="property">L</span>;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">gamemap</span>.<span class="property">ctx</span>;</span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">color</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> cell <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">cells</span>) &#123;</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">        ctx.<span class="title function_">arc</span>(cell.<span class="property">x</span> * L, cell.<span class="property">y</span> * L, L / <span class="number">2</span> * <span class="number">0.8</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>);</span><br><span class="line">        ctx.<span class="title function_">fill</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">cells</span>.<span class="property">length</span>; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">const</span> a = <span class="variable language_">this</span>.<span class="property">cells</span>[i - <span class="number">1</span>], b = <span class="variable language_">this</span>.<span class="property">cells</span>[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(a.<span class="property">x</span> - b.<span class="property">x</span>) &lt; <span class="variable language_">this</span>.<span class="property">eps</span> &amp;&amp; <span class="title class_">Math</span>.<span class="title function_">abs</span>(a.<span class="property">y</span> - b.<span class="property">y</span>) &lt; <span class="variable language_">this</span>.<span class="property">eps</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(a.<span class="property">x</span> - b.<span class="property">x</span>) &lt; <span class="variable language_">this</span>.<span class="property">eps</span>) &#123;</span><br><span class="line">            ctx.<span class="title function_">fillRect</span>((a.<span class="property">x</span> - <span class="number">0.4</span>) * L, <span class="title class_">Math</span>.<span class="title function_">min</span>(a.<span class="property">y</span>, b.<span class="property">y</span>) * L, L * <span class="number">0.8</span>, <span class="title class_">Math</span>.<span class="title function_">abs</span>(a.<span class="property">y</span> - b.<span class="property">y</span>) * L);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.<span class="title function_">fillRect</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(a.<span class="property">x</span>, b.<span class="property">x</span>) * L, (a.<span class="property">y</span> - <span class="number">0.4</span>) * L, <span class="title class_">Math</span>.<span class="title function_">abs</span>(a.<span class="property">x</span> - b.<span class="property">x</span>) * L, L * <span class="number">0.8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实现效果</strong></p>
<p><img src="SpringCourse/image-20220723164420044.png" alt="image-20220723164420044" /></p>
<p>实现当蛇撞墙或者撞自己的身体或者撞对手身体，判定死亡。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Snake.js</span></span><br><span class="line"><span class="title function_">next_step</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">gamemap</span>.<span class="title function_">check_valid</span>(<span class="variable language_">this</span>.<span class="property">next_cell</span>)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;die&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;die&quot;</span>) &#123;</span><br><span class="line">        ctx.<span class="property">fillStyle</span> = <span class="string">&quot;white&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现后效果，当判定失败后，不能进行任何操作。</p>
<p><img src="SpringCourse/image-20220723164620339.png" alt="image-20220723164620339" /></p>
<h2 id="实现眼睛"><a class="markdownIt-Anchor" href="#实现眼睛"></a> 实现眼睛</h2>
<p>修改<code>Snake.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Snake.js</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">eye_direction</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">id</span> === <span class="number">1</span>) <span class="variable language_">this</span>.<span class="property">eye_direction</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">eye_dx</span> = [</span><br><span class="line">    [-<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">    [<span class="number">1</span>, -<span class="number">1</span>];</span><br><span class="line">    [-<span class="number">1</span>, -<span class="number">1</span>];</span><br><span class="line">];</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">eye_dy</span> = [</span><br><span class="line">    [-<span class="number">1</span>, -<span class="number">1</span>];</span><br><span class="line">    [-<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">    [<span class="number">1</span>, -<span class="number">1</span>];</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">next_step</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eye_direction</span> = d;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ctx.<span class="property">fillStyle</span> = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++ ) &#123;</span><br><span class="line">            <span class="keyword">const</span> eye_x = (<span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">eye_dx</span>[<span class="variable language_">this</span>.<span class="property">eye_direction</span>][i] * <span class="number">0.15</span>) * L;</span><br><span class="line">            <span class="keyword">const</span> eye_y = (<span class="variable language_">this</span>.<span class="property">cells</span>[<span class="number">0</span>].<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">eye_dy</span>[<span class="variable language_">this</span>.<span class="property">eye_direction</span>][i] * <span class="number">0.15</span>) * L;</span><br><span class="line"></span><br><span class="line">            ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">            ctx.<span class="title function_">arc</span>(eye_x, eye_y, L * <span class="number">0.05</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>);</span><br><span class="line">            ctx.<span class="title function_">fill</span>();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>最终效果</strong></p>
<p><img src="SpringCourse/image-20220723164809072.png" alt="image-20220723164809072" /></p>
]]></content>
      <categories>
        <category>AcWing</category>
        <category>Course</category>
      </categories>
      <tags>
        <tag>AcWing</tag>
        <tag>JAVA</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>AcWing 算法基础课</title>
    <url>/2022/03/20/AcWing/Algorithm_Basic/</url>
    <content><![CDATA[<h2 id="学习平台"><a class="markdownIt-Anchor" href="#学习平台"></a> 学习平台</h2>
<p><strong><a href="https://www.acwing.com/activity/content/11/">AcWing 算法基础课 </a></strong></p>
<h2 id="基础算法"><a class="markdownIt-Anchor" href="#基础算法"></a> 基础算法</h2>
<h3 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h3>
<p><strong>算法思想</strong> <kbd>分治</kbd></p>
<p>分支算法可分为三步：</p>
<ul>
<li>分成子问题</li>
<li>递归处理子问题</li>
<li>子问题合并</li>
</ul>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 快速排序：先排序后分治</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Quick_sort</span><span class="params">(<span class="type">int</span> p[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;  <span class="comment">// 边界问题</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x = p[l + r &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;  <span class="comment">// 分界点(哨兵)取中间值</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++ ;<span class="keyword">while</span>(p[i] &lt; x);  <span class="comment">// 在左边找到第一个比哨兵大的数</span></span><br><span class="line">        <span class="keyword">do</span> j-- ;<span class="keyword">while</span>(p[j] &gt; x);  <span class="comment">// 在右边找到第一个比哨兵小的数</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(p[i],p[j]);  <span class="comment">// 交换左右两边的两个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Quick_sort</span>(p, l, j);  <span class="comment">// 递归排序左边界</span></span><br><span class="line">    <span class="built_in">Quick_sort</span>(p, j + <span class="number">1</span>, r);  <span class="comment">// 递归排序有边界</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h3>
<p><strong>算法思想</strong> <kbd>分治</kbd></p>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 归并排序：线分治后排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge_sort</span><span class="params">(<span class="type">int</span> p[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r)<span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里的中间值不能取(l+r+1)/2</span></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Merge_sort</span>(p,l,mid);</span><br><span class="line">    <span class="built_in">Merge_sort</span>(p,mid+<span class="number">1</span>,r);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//合并两个有序数组，</span></span><br><span class="line">    <span class="type">int</span> k=<span class="number">0</span>,i = l,j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span>(p[i] &lt;= p[j]) tmp[k ++] = p[i ++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++] = p[j ++];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) tmp[k ++]=p[i ++];</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k ++]=p[j ++];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = l, j = <span class="number">0</span>;i &lt;= r; i ++, j ++) p[i]=tmp[j];</span><br><span class="line">    <span class="comment">//i=l是因为l永远是分组的左边界，不能写成i=0,同理r也永远是分组的右边界</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二分查找"><a class="markdownIt-Anchor" href="#二分查找"></a> 二分查找</h3>
<p><strong>算法思想</strong> <kbd>二分</kbd></p>
<p><strong>实现思想</strong> 假定目标值在区间<kbd>[l, r]</kbd> 中，每次将区间长度缩小一半，当<kbd>l = r</kbd> 时，则可以取到目标值。</p>
<p>整数二分查找存在两个模板，取决于中间值的取值方法：</p>
<ul>
<li>当<kbd>mid = l + r &gt;&gt; 1</kbd> 时：</li>
</ul>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>当<kbd>mid = l + r + 1 &gt;&gt; 1</kbd> 时：</li>
</ul>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高精度加法"><a class="markdownIt-Anchor" href="#高精度加法"></a> 高精度加法</h3>
<p><strong>算法思想</strong> <kbd>大数加法</kbd> ；</p>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(B.<span class="built_in">size</span>() &gt; A.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="built_in">add</span>(B,A);  <span class="comment">// 让两个大数中长度相对较短的做B，相对较长的做A</span></span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;  <span class="comment">// 用于存放结果</span></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>; <span class="comment">// 存放进位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; A.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">        t += A[i];</span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t += B[i]; <span class="comment">//如果B还没有遍历完，需要加上对应位置，若遍历完，则不需要加上了。</span></span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>); <span class="comment">// 若有进位，则只存放个位数字</span></span><br><span class="line">        t /= <span class="number">10</span>; <span class="comment">//将进位保存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t) C.<span class="built_in">push_back</span>(t); <span class="comment">//最后有进位的话（进位一定是个位数），将进位加入C</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高精度减法"><a class="markdownIt-Anchor" href="#高精度减法"></a> 高精度减法</h3>
<p><strong>算法思想</strong> <kbd>大数减法</kbd> ；</p>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A - B;需要首先使用bmp函数判断A是否大于B；若A大于B，则结果为正数并sub(A, B)；若A小于B，则结果为负数，需要先输出&#x27;-&#x27;并sub(B, A)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断A是否大于B，若是则返回true,否则返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --)  <span class="comment">// 长度相同时，从后往前遍历比较大小</span></span><br><span class="line">        <span class="keyword">if</span>(A[i] != B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//相等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高精度减法</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i &lt; A.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        t = A[i] - t; <span class="comment">// 若之前有借位，则需要先减去借位</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(t &lt; <span class="number">0</span>) t = <span class="number">1</span>;<span class="comment">// t &lt; 0 证明有借位</span></span><br><span class="line">        <span class="keyword">else</span> t=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个判断是为了确保结果不是0，若结果是0，则最后一个0不需要去掉</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>(); <span class="comment">//取出前导0  若结果为003，则需要去掉00</span></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高精度乘低精度"><a class="markdownIt-Anchor" href="#高精度乘低精度"></a> 高精度乘低精度</h3>
<p><strong>算法思想</strong> <code>大数乘法</code></p>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C = A * b, A &gt;= 0, b &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="高精度除以低精度"><a class="markdownIt-Anchor" href="#高精度除以低精度"></a> 高精度除以低精度</h3>
<p><strong>算法思想</strong> <code>大数除法</code></p>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前缀和"><a class="markdownIt-Anchor" href="#前缀和"></a> 前缀和</h3>
<p><strong>什么是前缀和</strong></p>
<p>原数组：<kbd>a[1], a[2], a[3], a[4], a[5], …, a[n]</kbd><br />
前缀和：<kbd>S[i]</kbd>为数组的前 i项和<br />
前缀和：<kbd>S[i] = a[1] + a[2] + a[3] + … + a[i]</kbd></p>
<p>为方便求解，以及后续方便计算，通常令<kbd>S[0] = 0</kbd> ,<kbd>原数组</kbd> 以及<kbd>前缀和数组</kbd> 的下标从1开始。</p>
<p><strong>前缀和的作用</strong></p>
<p>快速求出元素组中某段区间的和。</p>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">pSum</span><span class="params">(<span class="type">int</span> arr[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum[N];  <span class="comment">// 存放数组的前缀和</span></span><br><span class="line">    sum[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        sum[i] = arr[i] + sum[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>二维数组求解前缀和</strong></p>
<p><strong>计算过程</strong> <kbd>s[i, j] = s[i - 1, j] + s[i, j - 1] + s[i - 1, j - 1] + a[i, j]</kbd></p>
<p><img src="/img/AcWing/Basic/%E5%89%8D%E7%BC%80%E5%92%8C.png" alt="前缀和" /></p>
<p>同样的为了方便计算，二维数组下标也需要从 1 开始</p>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N][N], s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">            s[i][j] = s[i][j - <span class="number">1</span>] + s[i - <span class="number">1</span>][j] - s[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j]; <span class="comment">// 求前缀和</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> x1,y1,x2,y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">        <span class="comment">// 算子矩阵的和</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[x2][y2] - s[x2][y1 - <span class="number">1</span>] - s[x1 - <span class="number">1</span>][y2] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="差分"><a class="markdownIt-Anchor" href="#差分"></a> 差分</h3>
<p><code>差分</code> 和 <code>前缀和</code> 是一对互逆运算</p>
<p><strong>定义</strong> 对于一个给定的数列A，他的差分序列B定义为：</p>
<p><code>B[1] = A[1], B[i] = A[i] - A[i - 1](2 &lt;= i &lt;= n)</code></p>
<hr />
<h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2>
<h3 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h3>
<p>这里采用<strong>数组模拟</strong>链表，因为采用new Node()的过程是比较慢的；</p>
<ul>
<li>单链表：可以用于实现邻接表(存储树或图)</li>
<li>双链表：优化某些问题</li>
</ul>
<p><strong>实现方法</strong> 单链表使用数组模拟的方法：使用两个数组<kbd>e[n]</kbd>; <kbd>ne[n]</kbd> 其中<kbd>e[i]</kbd>存放第i个元素的值，<kbd>ne[i]</kbd>存放第i个元素的后继下标。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//head 表示头节点的下标</span></span><br><span class="line"><span class="comment">//e[i] 表示节点i的值</span></span><br><span class="line"><span class="comment">//ne[n] 表示节点i的next的值</span></span><br><span class="line"><span class="comment">//idx 存储当前已经用到了哪个点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x插到头节点之前</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = head;</span><br><span class="line">    head = idx;</span><br><span class="line">    idx ++；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除 下标是k的 后面的节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];  <span class="comment">// 相当于 p-&gt;next = p-&gt;next-&gt;next</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在下标为k的节点后插入一个数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = ne[k];</span><br><span class="line">    ne[k] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  	<span class="built_in">init</span>(); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双链表"><a class="markdownIt-Anchor" href="#双链表"></a> 双链表</h3>
<p>同样使用数组模拟双链表，</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在下标是k的节点右边插入x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span>&#123;  <span class="comment">//在k的左边插入的话，直接调用 add(l[k], x)</span></span><br><span class="line">    e[idx] = x;</span><br><span class="line">    r[idx] = r[k];</span><br><span class="line">    l[idx] = k;</span><br><span class="line">    r[k] = idx;</span><br><span class="line">    l[r[idx]] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除下标为k的节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    r[l[k]] = r[k];</span><br><span class="line">    l[r[k]] = l[k];</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h3>
<p>采用<strong>数组模拟栈</strong></p>
<p><strong>实现方法</strong> <kbd>top</kbd>栈顶指针，当<kbd>top == 0</kbd>时栈空，<kbd>stk[N]</kbd>存放元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> top, stk[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        string op;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&quot;push&quot;</span>)&#123;  <span class="comment">//入栈</span></span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            stk[++ top] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&quot;pop&quot;</span>) top --;  <span class="comment">// 出栈</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&quot;query&quot;</span>) cout &lt;&lt; stk[top] &lt;&lt;endl;  <span class="comment">//输出栈顶元素</span></span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; (top ? <span class="string">&quot;NO&quot;</span> : <span class="string">&quot;YES&quot;</span>) &lt;&lt; endl; <span class="comment">// 判断栈是否为空，top为0 则栈空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h3>
<p>采用<strong>数组模拟队列</strong></p>
<p><strong>实现方法</strong> <kbd>tail</kbd>队尾指针，<kbd>head</kbd>队头指针，当<kbd>head == 0 || head &gt; tail</kbd>时队空，<kbd>que[N]</kbd>存放元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> head, que[N], tail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        string op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&quot;push&quot;</span>)&#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            que[++tail] = x;</span><br><span class="line">            <span class="keyword">if</span>(head == <span class="number">0</span>) head++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&quot;pop&quot;</span>) head ++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&quot;query&quot;</span>) cout &lt;&lt; que[head] &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(head == <span class="number">0</span> || tail &lt; head) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> KMP</h3>
<p><strong>定义</strong> 是一个字符串匹配算法，对暴力的那种一一比对的方法进行了优化，使时间复杂度大大降低，</p>
<p><strong>算法习惯</strong> 下标从1开始；存在一个<code>模式串</code>、一个<code>模板串</code></p>
<p><strong>算法精讲</strong></p>
<p><a href="https://www.acwing.com/solution/content/14666/"> KMP字符串 </a></p>
<p><strong>算法思路</strong></p>
<ul>
<li><code>s[n]</code>模式串：即比较长的字符串</li>
<li><code>p[m]</code>模板串：即比较短的字符串</li>
<li><code>ne[m]</code>部分匹配值表：存储的是每一个下标对应的部分匹配值</li>
</ul>
<p><kbd>p[1, j] == p[i - ne[j] + 1, i]</kbd></p>
<p><img src="/img/AcWing/Basic/KMP.png" alt="KMP" /></p>
<ul>
<li>核心思想：在每次匹配失败后，不是把p串向后移动一位，而是把p串往后移动至下一次可以和前面部分匹配的位置，这样就可以跳过大多数的失配步骤。而每次p串移动的步数就是通过查找<code>ne[ ]</code>数组确定的。</li>
</ul>
<p><strong>匹配思路和实现代码</strong></p>
<p>KMP主要分为两步：<kbd>求解ne数组</kbd> ；<kbd>匹配字符串</kbd></p>
<p><code>s[n]</code>和<code>p[m]</code>都是从1开始的，</p>
<ul>
<li><strong>求解ne数组</strong></li>
</ul>
<p>因为<code>p[m]</code>下标从1开始，所以<code>ne[1] = 0</code>，求解<code>ne[]</code>时直接从下标为2开始遍历，i 。j表示当前前面最多匹配了j个字符。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动模拟一遍更清楚。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i++) <span class="comment">// ne[1]默认为0</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = next[j]; <span class="comment">//若已经匹配了字符，但是当前又不匹配了，则j需要返回起点。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(p[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line"></span><br><span class="line">    next[i] = j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>匹配字符串</strong></li>
</ul>
<p>i 从1开始遍历s数组，j 从0开始遍历p数组。每次将<code>s[i]</code>和<code>p[j + 1]</code>进行比较。若相等，则匹配；若碰到第i个字符不匹配，则直接将<kbd>j = ne[j]</kbd>，i 不变。<strong>通过将遍历p的指针前移来达到p后移的效果。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="comment">//如果j有对应p串的元素， 且s[i] != p[j+1], 则失配， 移动p串</span></span><br><span class="line">    <span class="comment">//用while是由于移动后可能仍然失配，所以要继续移动直到匹配或整个p串移到后面（j = 0)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(s[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">    <span class="comment">//当前元素匹配，j移向p串下一位</span></span><br><span class="line">    <span class="keyword">if</span>(j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//匹配成功，进行相关操作</span></span><br><span class="line">        j = next[j];  <span class="comment">//继续匹配下一个子串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="trie-树"><a class="markdownIt-Anchor" href="#trie-树"></a> Trie 树</h3>
<p><strong>算法定义</strong> 用于快速存储和查找字符串集合的树。</p>
<p><strong>实现思想</strong></p>
<ul>
<li><code>son[N][26]</code> 存放小写字母，因此每个节点最多可以扩展出26边，每代表一个点，每列代表该节点扩展出一条边。</li>
<li><code>cnt[i]</code> 以当前第i个结尾的有单词则为1，否则为0。</li>
<li><code>idx</code> 下标，idx为0时，即代表根节点，又是空节点。</li>
</ul>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组模拟的指针</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"><span class="comment">//son[N][26]: 存放小写字母，因此每个节点最多可以扩展出26条边</span></span><br><span class="line"><span class="comment">//cnt[N]: 以当前节点扩展的节点有多少个。</span></span><br><span class="line"><span class="comment">//idx: 下标，idx为0是既代表根节点，又是空节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span></span>&#123;</span><br><span class="line">   	<span class="type">int</span> p = <span class="number">0</span>;  <span class="comment">// 每个单词都是从第一行开始，</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++) &#123;</span><br><span class="line">       	<span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 将小写字母转换为0~25的数字</span></span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) son[p][u] = ++idx;  <span class="comment">//如果p这个节点不存在u这个子节点</span></span><br><span class="line">        p = son[p][u];  <span class="comment">//跳转到p行</span></span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p] ++;  <span class="comment">// </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//查询函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> str[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果p后没有u节点，则直接输出0</span></span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h3>
<p><strong>目的：</strong> 在近乎<code>O(1)</code>的时间复杂度内支持下面两个操作</p>
<p>​		1.将两个集合合并；</p>
<p>​		2.询问两个元素是否在一个集合中；</p>
<p>**原理：**每个集合用一颗树表示，树根的编号就是整个集合的编号，每个节点存储它的父节点，<code>p[x]</code>表示x的父节点。若<code>p[x] == x</code>，则x为根节点</p>
<p><strong>问题1：</strong> 如何判断树根节点： <kbd>if(p[x] == x)</kbd></p>
<p><strong>问题2：</strong> 如何求x的集合编号：<kbd>while(p[x] != x) x = p[x]</kbd> ；</p>
<p>**问题3： **如何合并两个集合： <code>p[x]</code>是x的集合编号，<code>p[y]</code>是y的集合编号，则<kbd>p[x] = y</kbd> ；</p>
<p><strong>优化：路径压缩：</strong> 当查询过一遍后，将路径上所有的节点直接指向根节点。</p>
<h3 id="代码模板"><a class="markdownIt-Anchor" href="#代码模板"></a> 代码模板</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N]; <span class="comment">//存放每个节点的父节点，第i个节点的父节点为p[i]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回x的祖宗节点 + 路径压缩（优化）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x) <span class="comment">// 如果不是根节点</span></span><br><span class="line">        p[x] = <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;                                                                                                                                           </span><br><span class="line"><span class="comment">// 合并x，y所在的两个集合</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    p[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);  <span class="comment">//将x的祖宗节点的父节点设置为 y的祖宗节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断x，y是否在同一集合中</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Judge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y))	<span class="comment">//祖宗节点是同一个</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="堆"><a class="markdownIt-Anchor" href="#堆"></a> 堆</h3>
<p><strong>作用</strong> 维护一个数据集合；</p>
<p><strong>需要实现的操作</strong></p>
<ul>
<li>插入一个数；<kbd>heap[++size] = x; up(size)</kbd></li>
<li>求集合当中的最小值；<kbd>heap[1];</kbd></li>
<li>删除最小值；<kbd>heap[1] = heap[size]; size–; down(1);</kbd></li>
<li>删除任意元素；<kbd>heap[k] = heap[size]; size–; down(k); up(k);</kbd></li>
<li>修改任意元素；<kbd>heap[k] = x; down(size); up(size);</kbd></li>
</ul>
<p><strong>基本结构</strong> 是一颗<code>完全二叉树</code>（除了最后一层节点之外，上层节点都是非空，最后一层节点是从左到右依次排布）</p>
<ul>
<li>小根堆：每个节点都满足小于等于左右两边的节点。</li>
</ul>
<p><strong>存储数据结构</strong> 使用数组存储，1号节点是根节点（下标从1开始），左儿子是<code>2x</code> ；右儿子是<code>2x+1</code></p>
<ul>
<li><code>h[N]</code>存储堆中的值, h[1]是堆顶，x的左儿子是<code>2x</code>, 右儿子是<code>2x + 1</code></li>
<li><code>ph[k]</code>存储第k个插入的点在堆中的位置</li>
<li><code>hp[k]</code>存储堆中下标是k的点是第几个插入的</li>
<li><code>size</code> 堆中元素的个数</li>
</ul>
<p><strong>需要的操作</strong></p>
<ul>
<li><code>down(x)</code> 将x节点往下移</li>
<li><code>up(x)</code> 将x节点往上移</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span></span><br><span class="line"><span class="comment">// ph[k]存储第k个插入的点在堆中的位置</span></span><br><span class="line"><span class="comment">// hp[k]存储堆中下标是k的点是第几个插入的</span></span><br><span class="line"><span class="type">int</span> h[N], ph[N], hp[N], size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换两个点，及其映射关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">    <span class="built_in">swap</span>(hp[a], hp[b]);</span><br><span class="line">    <span class="built_in">swap</span>(h[a], h[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;  <span class="comment">// 存在左孩子并且左孩子比较小</span></span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;  <span class="comment">// 存在右孩子并且有孩子比较小</span></span><br><span class="line">    <span class="keyword">if</span> (u != t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, t); <span class="comment">// 交换父亲节点 和 相对较小的子节点 </span></span><br><span class="line">        <span class="built_in">down</span>(t);  <span class="comment">//递归遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, u / <span class="number">2</span>);</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n)建堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span>; i; i -- ) <span class="built_in">down</span>(i);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="哈希表"><a class="markdownIt-Anchor" href="#哈希表"></a> 哈希表</h3>
<ul>
<li><strong>存储结构</strong> ：下面两种方法是为了解决映射冲突的。映射冲突是指将两个不同的数映射到同一个数上。
<ul>
<li>开放寻址法</li>
<li>拉链法：形状类似于邻接表，将映射到同一个位置的数用一个链放在下面。</li>
</ul>
</li>
<li><strong>字符串哈希方式</strong></li>
</ul>
<p><strong>作用</strong> ：将一堆较大范围的数映射到较小范围的一堆数中。</p>
<h3 id="stl简介"><a class="markdownIt-Anchor" href="#stl简介"></a> STL简介</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector, 变长数组，倍增的思想</span><br><span class="line">    <span class="built_in">size</span>()  返回元素个数</span><br><span class="line">    <span class="built_in">empty</span>()  返回是否为空</span><br><span class="line">    <span class="built_in">clear</span>()  清空</span><br><span class="line">    <span class="built_in">front</span>()/<span class="built_in">back</span>()</span><br><span class="line">    <span class="built_in">push_back</span>()/<span class="built_in">pop_back</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    []</span><br><span class="line">    支持比较运算，按字典序</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;</span><br><span class="line">    first, 第一个元素</span><br><span class="line">    second, 第二个元素</span><br><span class="line">    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）</span><br><span class="line"></span><br><span class="line">string，字符串</span><br><span class="line">    <span class="built_in">size</span>()/<span class="built_in">length</span>()  返回字符串长度</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">substr</span>(起始下标，(子串长度))  返回子串</span><br><span class="line">    <span class="built_in">c_str</span>()  返回字符串所在字符数组的起始地址</span><br><span class="line"></span><br><span class="line">queue, 队列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  向队尾插入一个元素</span><br><span class="line">    <span class="built_in">front</span>()  返回队头元素</span><br><span class="line">    <span class="built_in">back</span>()  返回队尾元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出队头元素</span><br><span class="line"></span><br><span class="line">priority_queue, 优先队列，默认是大根堆</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  插入一个元素</span><br><span class="line">    <span class="built_in">top</span>()  返回堆顶元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出堆顶元素</span><br><span class="line">    定义成小根堆的方式：priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line">stack, 栈</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  向栈顶插入一个元素</span><br><span class="line">    <span class="built_in">top</span>()  返回栈顶元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出栈顶元素</span><br><span class="line"></span><br><span class="line">deque, 双端队列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">front</span>()/<span class="built_in">back</span>()</span><br><span class="line">    <span class="built_in">push_back</span>()/<span class="built_in">pop_back</span>()</span><br><span class="line">    <span class="built_in">push_front</span>()/<span class="built_in">pop_front</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    ++, -- 返回前驱和后继，时间复杂度 <span class="built_in">O</span>(logn)</span><br><span class="line"></span><br><span class="line">    set/<span class="function">multiset</span></span><br><span class="line"><span class="function">        <span class="title">insert</span><span class="params">()</span>  插入一个数</span></span><br><span class="line"><span class="function">        <span class="title">find</span><span class="params">()</span>  查找一个数</span></span><br><span class="line"><span class="function">        <span class="title">count</span><span class="params">()</span>  返回某一个数的个数</span></span><br><span class="line"><span class="function">        <span class="title">erase</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="params">(<span class="number">1</span>)</span> 输入是一个数x，删除所有x   <span class="title">O</span><span class="params">(k + logn)</span></span></span><br><span class="line"><span class="function">            <span class="params">(<span class="number">2</span>)</span> 输入一个迭代器，删除这个迭代器</span></span><br><span class="line"><span class="function">        <span class="title">lower_bound</span><span class="params">()</span>/<span class="title">upper_bound</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="title">lower_bound</span><span class="params">(x)</span>  返回大于等于x的最小的数的迭代器</span></span><br><span class="line"><span class="function">            <span class="title">upper_bound</span><span class="params">(x)</span>  返回大于x的最小的数的迭代器</span></span><br><span class="line"><span class="function">    map/multimap</span></span><br><span class="line"><span class="function">        <span class="title">insert</span><span class="params">()</span>  插入的数是一个pair</span></span><br><span class="line"><span class="function">        <span class="title">erase</span><span class="params">()</span>  输入的参数是pair或者迭代器</span></span><br><span class="line"><span class="function">        <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        []  注意multimap不支持此操作。 时间复杂度是 <span class="title">O</span><span class="params">(logn)</span></span></span><br><span class="line"><span class="function">        <span class="title">lower_bound</span><span class="params">()</span>/<span class="title">upper_bound</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表</span></span><br><span class="line"><span class="function">    和上面类似，增删改查的时间复杂度是 <span class="title">O</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    不支持 <span class="title">lower_bound</span><span class="params">()</span>/<span class="title">upper_bound</span><span class="params">()</span>， 迭代器的++，--</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">bitset, 圧位</span></span><br><span class="line"><span class="function">    bitset&lt;10000&gt; s</span>;</span><br><span class="line">    ~, &amp;, |, ^</span><br><span class="line">    &gt;&gt;, &lt;&lt;</span><br><span class="line">    ==, !=</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">    <span class="built_in">count</span>()  返回有多少个<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">any</span>()  判断是否至少有一个<span class="number">1</span></span><br><span class="line">    <span class="built_in">none</span>()  判断是否全为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>()  把所有位置成<span class="number">1</span></span><br><span class="line">    <span class="built_in">set</span>(k, v)  将第k位变成v</span><br><span class="line">    <span class="built_in">reset</span>()  把所有位变成<span class="number">0</span></span><br><span class="line">    <span class="built_in">flip</span>()  等价于~</span><br><span class="line">    <span class="built_in">flip</span>(k) 把第k位取反</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="搜索与图论"><a class="markdownIt-Anchor" href="#搜索与图论"></a> 搜索与图论</h2>
<h3 id="dfs与bfs"><a class="markdownIt-Anchor" href="#dfs与bfs"></a> DFS与BFS</h3>
<p><strong>对比</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>数据结构</th>
<th>空间</th>
<th>性质</th>
</tr>
</thead>
<tbody>
<tr>
<td>DFS</td>
<td>stack</td>
<td>O(h)</td>
<td>不具有最短性</td>
</tr>
<tr>
<td>BFS</td>
<td>queue</td>
<td>O(2<sup>h</sup>)</td>
<td>“最短路”</td>
</tr>
</tbody>
</table>
<h4 id="深度优先搜索-dfs"><a class="markdownIt-Anchor" href="#深度优先搜索-dfs"></a> 深度优先搜索 DFS</h4>
<p><strong>算法：</strong> <code>回溯</code>、<code>剪枝</code></p>
<h4 id="宽度优先搜索-bfs"><a class="markdownIt-Anchor" href="#宽度优先搜索-bfs"></a> 宽度优先搜索 BFS</h4>
<p>类似于层序遍历</p>
<h3 id="树与图的遍历拓扑排序"><a class="markdownIt-Anchor" href="#树与图的遍历拓扑排序"></a> 树与图的遍历：拓扑排序</h3>
<p>树是一种特殊的图</p>
<h4 id="树与图的存储"><a class="markdownIt-Anchor" href="#树与图的存储"></a> 树与图的存储</h4>
<ul>
<li>有向图
<ul>
<li>邻接矩阵：二维数组，适用于稠密图，<code>T(n) = O(n ^ 2)</code></li>
<li>邻接表：n个节点对应n个单链表，适用于稀疏图。</li>
</ul>
</li>
</ul>
<p><strong>邻接表</strong></p>
<ul>
<li><code>h[N]</code>：所有头节点的集合</li>
<li><code>e[N]</code>：存每个节点的值</li>
<li><code>ne[N]</code>：存每个节点的next值</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</span></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一条边a-&gt;b</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ; <span class="comment">// 头插</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br></pre></td></tr></table></figure>
<h4 id="树与图的深度优先遍历"><a class="markdownIt-Anchor" href="#树与图的深度优先遍历"></a> 树与图的深度优先遍历</h4>
<p>只考虑有向图即可。</p>
<ul>
<li>时间复杂度：<code>O(n + m)</code>，n表示点数，m表示边数</li>
</ul>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>; <span class="comment">// st[u] 表示点u已经被遍历过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j]) <span class="built_in">dfs</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="树与图的宽度优先遍历"><a class="markdownIt-Anchor" href="#树与图的宽度优先遍历"></a> 树与图的宽度优先遍历</h4>
<ul>
<li>需要使用到队列，在对二叉树使用宽度有点遍历时，其实就是对二叉树进行层序遍历。</li>
</ul>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">st[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 表示1号点已经被遍历过</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>; <span class="comment">// 表示点j已经被遍历过</span></span><br><span class="line">            q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h4>
<ul>
<li>时间复杂度：<code>O(n + m)</code>，n表示点数，m表示边数</li>
</ul>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// d[i] 存储点i的入度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (!d[i])</span><br><span class="line">            q[ ++ tt] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++ ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (-- d[j] == <span class="number">0</span>)</span><br><span class="line">                q[ ++ tt] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。</span></span><br><span class="line">    <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最短路径问题"><a class="markdownIt-Anchor" href="#最短路径问题"></a> 最短路径问题</h3>
<p><font color='orange'>常见的<code>最短路径</code>问题</font> ：n点的数量，m边的数量。</p>
<ul>
<li><code>单源最短路径</code>
<ul>
<li>所有边权都是正数
<ul>
<li>朴素<code>Dijkstra</code>算法 ：<code>O(n^2)</code> 适用于稠密图</li>
<li>堆优化版的<code>Dijkstra</code>算法：<code>O(m * logn)</code> 适用于稀疏图</li>
</ul>
</li>
<li>存在负权边
<ul>
<li><code>Bellman-Ford</code> ： <code>O(nm)</code></li>
<li><code>SPFA</code> :  一般是<code>O(m)</code>，最坏是<code>O(nm)</code></li>
</ul>
</li>
</ul>
</li>
<li><code>多源汇最短路径</code> ：
<ul>
<li><code>Floyd</code>算法：<code>O(n^3)</code></li>
</ul>
</li>
</ul>
<p><img src="/img/AcWing/Basic/shortLoad.png" alt="shortLoad" /></p>
<h4 id="朴素dijkstra"><a class="markdownIt-Anchor" href="#朴素dijkstra"></a> 朴素<code>Dijkstra</code></h4>
<ul>
<li>使用<code>邻接矩阵</code>存储，有向图：无向图是一种特殊的有向图。</li>
<li><code>s[i]</code> ：当前已确定最短路径的点。</li>
<li><code>dist[i]</code> ：第<code>i</code>个节点距离起点(1号点)的距离。初始化<code>dist[1] = 0</code>、<code>disst[i] = +Max</code></li>
<li><code>g[N][N]</code> ：存储每条边，下标从1开始</li>
</ul>
<p><img src="/img/AcWing/Basic/Dijkstra.png" alt="Dijkstra" /></p>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g[N][N];  <span class="comment">// 存储每条边</span></span><br><span class="line"><span class="type">int</span> dist[N];  <span class="comment">// 存储1号点到每个点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];   <span class="comment">// 存储每个点的最短路是否已经确定，false:未确定，true：已确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist); <span class="comment">// 初始化dist数组，将每个元素初始化为正无穷大。</span></span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++ ) <span class="comment">// 循环前n-1个节点即可，最后一个节点不用判断。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;     <span class="comment">// 在还未确定最短路的点中，寻找距离最小的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j])) <span class="comment">//在所有st[j] == false 中找到dist最下的点。</span></span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用t更新其他点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 第一个节点和n不连通</span></span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="堆优化版的dijkstra"><a class="markdownIt-Anchor" href="#堆优化版的dijkstra"></a> 堆优化版的<code>Dijkstra</code></h4>
<ul>
<li>使用堆对朴素<code>Dijkstra</code>算法进行优化</li>
<li>堆：使用c++里面的优先队列。</li>
<li>数据结构：因为针对稀疏图，所以采用<code>邻接表</code>的方式存储。</li>
</ul>
<p><strong>代码模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;      <span class="comment">// 点的数量</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储所有点到1号点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点的最短距离是否已确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; <span class="comment">// 定义优先队列代替堆，这样定义是小根堆</span></span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);      <span class="comment">// first存储距离，second存储节点编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ver = t.second, distance = t.first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; distance + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j], j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="数学知识"><a class="markdownIt-Anchor" href="#数学知识"></a> 数学知识</h2>
<h3 id="数论"><a class="markdownIt-Anchor" href="#数论"></a> 数论</h3>
<h4 id="质数"><a class="markdownIt-Anchor" href="#质数"></a> 质数</h4>
<p><strong>Def</strong> 在大于1的整数中，如果只包含1和整数这两个约数，就被称为质数，或者素数。</p>
<p><strong>质数的判定—试除法</strong></p>
<p>实现思想 ：i 从 2 枚举到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span> 会缩减循环，但是<code>sqrt(n)</code>执行较慢，所以不使用。<code>O(sqrt(n))</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>分解质因数—试除法</strong></p>
<p>实现思想：从小到大枚举所有数，<code>O(sqrt(n))</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="comment">// i 一定是质数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i, s ++ ;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>朴素筛法求素数—埃氏筛法</strong></p>
<p>实现思想：从2遍历到n，遍历到第i个数的时候，若该数没有被删除，则加入质数数组，然后删除该数的所有倍数。<code>O(n * loglogn)</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有素数</span></span><br><span class="line"><span class="type">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i]) <span class="keyword">continue</span>; <span class="comment">//如果第i个数已经被删掉，跳过</span></span><br><span class="line">        primes[cnt ++ ] = i; <span class="comment">// 如果第i个数还没有被删掉，则说明从2~i-1没有值是i的因子</span></span><br><span class="line">        <span class="comment">// 删除 质数i 的所有倍数，这里仅删除质数的倍数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + i; j &lt;= n; j += i)</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>线性筛法求素数</strong></p>
<p><img src="/img/AcWing/Basic/%E7%BA%BF%E6%80%A7%E7%AD%9B%E6%B3%95%E6%B1%82%E7%B4%A0%E6%95%B0.png" alt="线性筛法求素数" /></p>
<p>相较于<code>埃氏筛法</code>快将近一倍。</p>
<p>实现思想：n只会被它的最小质因子筛掉。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有素数</span></span><br><span class="line"><span class="type">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt ++ ] = i; <span class="comment">// 如果是质数，加入至质数数组</span></span><br><span class="line">        <span class="comment">// 从小到大枚举所有的质数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// primes[j] 一定是i的最小质因子</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="约数"><a class="markdownIt-Anchor" href="#约数"></a> 约数</h4>
<p><strong>试除法求所有约数</strong></p>
<p>实现思想类似于试除法求质数。<code>O(sqrt(n))</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_divisors</span><span class="params">(<span class="type">int</span> x)</span>  <span class="comment">//使用vector数组存放所有约数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i != x / i) res.<span class="built_in">push_back</span>(x / i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>约数个数</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">如果 N = p1<span class="built_in">^</span>c1 * p2<span class="built_in">^</span>c2 * ... *pk<span class="built_in">^</span>ck</span><br><span class="line">约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1)</span><br><span class="line">约数之和： (p1<span class="built_in">^</span>0 + p1<span class="built_in">^</span>1 + ... + p1<span class="built_in">^</span>c1) * ... * (pk<span class="built_in">^</span>0 + pk<span class="built_in">^</span>1 + ... + pk<span class="built_in">^</span>ck)</span><br></pre></td></tr></table></figure>
<h3 id="组合计数"><a class="markdownIt-Anchor" href="#组合计数"></a> 组合计数</h3>
<h3 id="高斯消元"><a class="markdownIt-Anchor" href="#高斯消元"></a> 高斯消元</h3>
<h3 id="简单博弈论"><a class="markdownIt-Anchor" href="#简单博弈论"></a> 简单博弈论</h3>
]]></content>
      <categories>
        <category>AcWing</category>
        <category>Course</category>
      </categories>
      <tags>
        <tag>AcWing</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>算法提高课 - 动态规划</title>
    <url>/2022/08/17/AcWing/dynamicProgram/</url>
    <content><![CDATA[<h1 id="学习平台"><a class="markdownIt-Anchor" href="#学习平台"></a> 学习平台</h1>
<p><a href="https://www.acwing.com/about/"> AcWing </a> 、 <a href="https://leetcode.cn/"> LeetCode </a></p>
<h1 id="核心套路"><a class="markdownIt-Anchor" href="#核心套路"></a> 核心套路</h1>
<p><img src="/img/AcWing/dynamicProgram/DP.png" alt="DP" /></p>
<h1 id="数字三角模型线性dp"><a class="markdownIt-Anchor" href="#数字三角模型线性dp"></a> 数字三角模型【线性DP】</h1>
<h2 id="题目1摘花生"><a class="markdownIt-Anchor" href="#题目1摘花生"></a> 题目1：摘花生</h2>
<p><a href="https://www.acwing.com/problem/content/1017/"> 摘花生 </a></p>
<h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[i][j]</code>
<ul>
<li>集合：走到第 <em>i</em> 行第 <em>j</em> 列时拿到的最大花生数</li>
<li>属性：max，（属性的选择有：max，min，数量）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题可以根据上一步是从哪个方向来的进行划分
<ul>
<li>选择从北边来的：<code>f[i][j] = f[i - 1][j] + arr[i]</code></li>
<li>选择从西边来的：<code>f[i][j] = f[i][j - 1] + arr[i]</code></li>
</ul>
</li>
</ul>
<p><strong>集合划分的原则</strong></p>
<ul>
<li>一般原则：不重不漏，不重不一定都要满足（一般求数量时要满足）</li>
<li>如何将现有的集合划分为更小的子集，使得所有的子集都可以计算出来。</li>
</ul>
<h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// f[i][j] = max(f[i - 1][j], f[i][j - 1]) + w[i][j]  向南走和向东走的花生数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n, a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n --) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        ll f[a + <span class="number">1</span>][b + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= a; i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= b; j ++)</span><br><span class="line">                f[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b; j ++) &#123;</span><br><span class="line">                cin &gt;&gt; x;</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i][j - <span class="number">1</span>]) + x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; f[a][b] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * a * b )，其中 <em>n</em> 是数据的组数，<em>a</em> 是每组数据的行数，<em>b</em> 是每组数据的列数</li>
<li>空间复杂度：<em>O</em>(n * n)，需要使用额外的数组保存状态<code>f[][]</code></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：1122 ms</p>
<p>内存消耗：2520 KB</p>
<p>通过测试用例：10/10</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2最低通行费"><a class="markdownIt-Anchor" href="#题目2最低通行费"></a> 题目2：最低通行费</h2>
<p><a href="https://www.acwing.com/problem/content/1020/"> 最低通行费 </a></p>
<h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3>
<p><strong>动态规划分析</strong></p>
<p>因为从左上角走到右下角求最小值并且每个位置的值都是大于0的，所以只能向下或向右走。</p>
<p>因为求最小值，所以第0行和第0列需要赋初始值为<code>1e9</code></p>
<ul>
<li><strong>状态表示</strong>：<code>f[i][j]</code>
<ul>
<li>集合：走到第 <em>i</em> 行第 <em>j</em> 列时的最低通行费</li>
<li>属性：min，（属性的选择有：max，min，数量）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题可以根据上一步是从哪个方向来的进行划分
<ul>
<li>选择从北边来的：<code>f[i][j] = f[i - 1][j] + arr[i]</code></li>
<li>选择从西边来的：<code>f[i][j] = f[i][j - 1] + arr[i]</code></li>
</ul>
</li>
</ul>
<h3 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j ++)</span><br><span class="line">            f[i][j] = <span class="number">1e9</span>; <span class="comment">// 将所有的f[i][j] = 1e9</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)&#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>) f[i][j] = x; <span class="comment">// f[1][1] = x</span></span><br><span class="line">            <span class="keyword">else</span> f[i][j] = <span class="built_in">min</span>(f[i - <span class="number">1</span>][j], f[i][j - <span class="number">1</span>]) + x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n][n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * n )，其中 <em>n</em> 是正方形宽度</li>
<li>空间复杂度：<em>O</em>(n * n)，需要使用额外的数组保存状态<code>f[][]</code></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：33 ms</p>
<p>内存消耗：344 KB</p>
<p>通过测试用例：10/10</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目3方格取数"><a class="markdownIt-Anchor" href="#题目3方格取数"></a> 题目3：方格取数⭐</h2>
<p><a href="https://www.acwing.com/problem/content/1029/"> 方格取数 </a></p>
<h3 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h3>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[k][i1][i2]</code>
<ul>
<li>集合：表示两条路线分别从<code>[1][1]</code>、<code>[1][1]</code>走到<code>[i1][k - i1]</code>和 <code>[i2][k - i2]</code>的路线的最大值总和。其中 <em>k</em> 保证了两条路线的同步进行。</li>
<li>属性：max，（属性的选择有：max，min，数量）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题根据从上一步走到当前位置的操作
<ul>
<li>两条路线走到同一位置 <code>i1 == i2</code>：则只需要加一次 <code>w[i1][j1]</code>，否则还需要再加上<code>w[i2][j2]</code>，因此<code>t = w[i1][j1] || t = w[i1][j1] + w[i2][j2]</code></li>
<li><code>i1</code>从上向下，<code>i2</code>从上向下：<code>f[k][i1][i2] = max(f[k][i1][i2], f[k - 1][i1 - 1][i2 - 1] + t)</code></li>
<li><code>i1</code>从上向下，<code>i2</code>从左向右：<code>f[k][i1][i2] = max(f[k][i1][i2], f[k - 1][i1 - 1][i2] + t)</code></li>
<li><code>i1</code>从左向右，<code>i2</code>从上向下：<code>f[k][i1][i2] = max(f[k][i1][i2], f[k - 1][i1][i2 - 1] + t)</code></li>
<li><code>i1</code>从左向右，<code>i2</code>从左向右：<code>f[k][i1][i2] = max(f[k][i1][i2], f[k - 1][i1][i2] + t)</code></li>
</ul>
</li>
</ul>
<h3 id="题解-3"><a class="markdownIt-Anchor" href="#题解-3"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[N][N];</span><br><span class="line"><span class="type">int</span> f[N * <span class="number">2</span>][N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; a &gt;&gt; b &gt;&gt; c, a || b || c) w[a][b] = c;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">2</span>; k &lt;= n * <span class="number">2</span>; k ++) <span class="comment">// k 表示横纵坐标之和，从(1, 1)到(n, n)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i1 = <span class="number">1</span>; i1 &lt;= n; i1 ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i2 = <span class="number">1</span>; i2 &lt;= n; i2 ++)&#123;</span><br><span class="line">                <span class="type">int</span> j1 = k - i1, j2 = k - i2; <span class="comment">// 计算出两条路线对应的纵坐标</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(j1 &gt;= <span class="number">1</span> &amp;&amp; j1 &lt;= n &amp;&amp; j2 &gt;= <span class="number">1</span> &amp;&amp; j2 &lt;= n) &#123; <span class="comment">// 纵坐标需要在合法位置</span></span><br><span class="line">                    <span class="type">int</span> t = w[i1][j1];</span><br><span class="line">                    <span class="keyword">if</span>(i1 != i2) t += w[i2][j2]; <span class="comment">// 若两个位置不重合，需要加上两个位置，否则加一次仅可</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="type">int</span> &amp;x = f[k][i1][i2]; <span class="comment">// 使用 x 代替f[k][i1][i2]</span></span><br><span class="line">                    x = <span class="built_in">max</span>(x, f[k - <span class="number">1</span>][i1 - <span class="number">1</span>][i2 - <span class="number">1</span>] + t); <span class="comment">// i1下，i2下</span></span><br><span class="line">                    x = <span class="built_in">max</span>(x, f[k - <span class="number">1</span>][i1 - <span class="number">1</span>][i2] + t); <span class="comment">// i1下，i2右</span></span><br><span class="line">                    x = <span class="built_in">max</span>(x, f[k - <span class="number">1</span>][i1][i2 - <span class="number">1</span>] + t); <span class="comment">// i1右，i2下</span></span><br><span class="line">                    x = <span class="built_in">max</span>(x, f[k - <span class="number">1</span>][i1][i2] + t); <span class="comment">// i1右，i2右</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; f[n + n][n][n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * n )，其中 <em>n</em> 是方格的宽度</li>
<li>空间复杂度：<em>O</em>(n * n * n)，需要使用额外的数组保存状态<code>f[][][]</code></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：11 ms</p>
<p>内存消耗：216 KB</p>
<p>通过测试用例：11/11</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目3传纸条"><a class="markdownIt-Anchor" href="#题目3传纸条"></a> 题目3：传纸条⭐</h2>
<p><a href="https://www.acwing.com/problem/content/277/"> 传纸条 </a></p>
<h3 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h3>
<p>和方格取数的解题思想完全一致</p>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[k][i1][i2]</code>
<ul>
<li>集合：表示两条路线分别从<code>[1][1]</code>、<code>[1][1]</code>走到<code>[i1][k - i1]</code>和 <code>[i2][k - i2]</code>的路线的最大值总和。其中 <em>k</em> 保证了两条路线的同步进行。</li>
<li>属性：max，（属性的选择有：max，min，数量）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题根据从上一步走到当前位置的操作
<ul>
<li>两条路线走到同一位置 <code>i1 == i2</code>：则只需要加一次 <code>w[i1][j1]</code>，否则还需要再加上<code>w[i2][j2]</code>，因此<code>t = w[i1][j1] || t = w[i1][j1] + w[i2][j2]</code></li>
<li><code>i1</code>从上向下，<code>i2</code>从上向下：<code>f[k][i1][i2] = max(f[k][i1][i2], f[k - 1][i1 - 1][i2 - 1] + t)</code></li>
<li><code>i1</code>从上向下，<code>i2</code>从左向右：<code>f[k][i1][i2] = max(f[k][i1][i2], f[k - 1][i1 - 1][i2] + t)</code></li>
<li><code>i1</code>从左向右，<code>i2</code>从上向下：<code>f[k][i1][i2] = max(f[k][i1][i2], f[k - 1][i1][i2 - 1] + t)</code></li>
<li><code>i1</code>从左向右，<code>i2</code>从左向右：<code>f[k][i1][i2] = max(f[k][i1][i2], f[k - 1][i1][i2] + t)</code></li>
</ul>
</li>
</ul>
<h3 id="题解-4"><a class="markdownIt-Anchor" href="#题解-4"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> w[N][N];</span><br><span class="line"><span class="type">int</span> f[N * <span class="number">2</span>][N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)</span><br><span class="line">            cin &gt;&gt; w[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">2</span>; k &lt;= n + m; k ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i1 = <span class="number">1</span>; i1 &lt;= n; i1 ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i2 = <span class="number">1</span>; i2 &lt;= n; i2 ++) &#123;</span><br><span class="line">                <span class="type">int</span> j1 = k - i1, j2 = k - i2;</span><br><span class="line">                <span class="keyword">if</span>(j1 &gt;= <span class="number">1</span> &amp;&amp; j1 &lt;= m &amp;&amp; j2 &gt;= <span class="number">1</span> &amp;&amp; j2 &lt;= m) &#123;</span><br><span class="line">                    <span class="type">int</span> t = w[i1][j1];</span><br><span class="line">                    <span class="keyword">if</span>(i1 != i2) t += w[i2][j2];</span><br><span class="line">                    <span class="type">int</span> &amp;x = f[k][i1][i2];</span><br><span class="line">                    x = <span class="built_in">max</span>(x, f[k - <span class="number">1</span>][i1 - <span class="number">1</span>][i2 - <span class="number">1</span>] + t);</span><br><span class="line">                    x = <span class="built_in">max</span>(x, f[k - <span class="number">1</span>][i1 - <span class="number">1</span>][i2] + t);</span><br><span class="line">                    x = <span class="built_in">max</span>(x, f[k - <span class="number">1</span>][i1][i2 - <span class="number">1</span>] + t);</span><br><span class="line">                    x = <span class="built_in">max</span>(x, f[k - <span class="number">1</span>][i1][i2] + t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; f[n + m][n][n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m )，其中 <em>n</em> 是方格的宽度</li>
<li>空间复杂度：<em>O</em>(n * n * n)，需要使用额外的数组保存状态<code>f[][][]</code></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：33 ms</p>
<p>内存消耗：1112 KB</p>
<p>通过测试用例：10/10</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="最长上升子序列模型"><a class="markdownIt-Anchor" href="#最长上升子序列模型"></a> 最长上升子序列模型</h1>
<h2 id="题目1怪盗基德的滑翔伞"><a class="markdownIt-Anchor" href="#题目1怪盗基德的滑翔伞"></a> 题目1：怪盗基德的滑翔伞</h2>
<p><a href="https://www.acwing.com/problem/content/1019/"> 怪盗基德的滑翔伞 </a></p>
<h3 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h3>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[i]</code>
<ul>
<li>集合：表示以第 <em>i</em> 个数据结尾的数值上升子序列的集合</li>
<li>属性：max，（属性的选择有：max，min，数量）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题根据上升子序列的倒数第二位是数组中的第几个数
<ul>
<li>第 <em>i</em> 个数据就是最长上升子序列的第一位，则<code>f[i] = 1</code></li>
<li>第 <em>j</em> 个数据是以第 <em>i</em> 个数据结尾的最长上升子序列的倒数第二个位，则需要满足 <code>1 &lt;= j &lt;= i &amp;&amp; a[j] &lt; a[i]</code>,则<code>f[i] = f[j] + 1</code></li>
</ul>
</li>
</ul>
<h3 id="题解-5"><a class="markdownIt-Anchor" href="#题解-5"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// f[i] 表示以第i个数结尾的数值上升子序列的集合  max</span></span><br><span class="line"><span class="comment">// f[i] 按照前一位是第几个数字划分，j从 1到i，</span></span><br><span class="line"><span class="comment">// f[i] 初始为1，前面没有比第i个数字小的</span></span><br><span class="line"><span class="comment">// 若a[j] &lt; a[i] 则 f[i] = max(f[i], f[j] + 1);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> k, n;</span><br><span class="line"><span class="type">int</span> a[N], f[N], d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span>(k --) &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="type">int</span> resUp = <span class="number">0</span>, resDown = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;  <span class="comment">// 求上升子序列</span></span><br><span class="line">            f[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i] &gt; a[j])</span><br><span class="line">                    f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;  <span class="comment">// 求下降子序列</span></span><br><span class="line">            d[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i] &lt; a[j])</span><br><span class="line">                    d[i] = <span class="built_in">max</span>(d[i], d[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">            resUp = <span class="built_in">max</span>(resUp, f[i]);</span><br><span class="line">            resDown = <span class="built_in">max</span>(resDown, d[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>(resDown, resUp) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * n)，其中 <em>n</em> 是建筑的个数</li>
<li>空间复杂度：<em>O</em>(n)，需要使用额外的数组保存状态<code>f[]</code></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：88 ms</p>
<p>内存消耗：344 KB</p>
<p>通过测试用例：10/10 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2登山"><a class="markdownIt-Anchor" href="#题目2登山"></a> 题目2：登山⭐</h2>
<p><a href="https://www.acwing.com/problem/content/1016/"> 登山 </a></p>
<h3 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h3>
<p>根据题意分析可知，本题是<strong>先上升子序列到某个点之后是下降子序列</strong>，因此需要分别求出上升子序列和下降子序列，然后遍历一遍，找出在某个点上升子序列加上下降子序列并<strong>减一</strong>最大，因为在最高点的时候加了两次。</p>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[i]</code>、<code>d[i]</code>
<ul>
<li>集合：<code>f[i]</code>表示以第 <em>i</em> 个数据结尾的数值上升子序列的集合，<code>f[i]</code>表示以第 <em>i</em> 个数据开始的数值下降子序列的集合（就是从后往前找上升子序列）</li>
<li>属性：max，（属性的选择有：max，min，数量）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题根据上升子序列的倒数第二位是数组中的第几个数
<ul>
<li>第 <em>i</em> 个数据就是最长上升子序列的第一位，则<code>f[i] = 1</code></li>
<li>第 <em>j</em> 个数据是以第 <em>i</em> 个数据结尾的最长上升子序列的倒数第二个位，则需要满足 <code>1 &lt;= j &lt;= i &amp;&amp; a[j] &lt; a[i]</code>,则<code>f[i] = f[j] + 1</code></li>
</ul>
</li>
</ul>
<h3 id="题解-6"><a class="markdownIt-Anchor" href="#题解-6"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最开始可能是上升子序列，当走到某个点后，不能继续上升了，转为下降子序列。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], f[N], d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;  <span class="comment">// 从前往后求上升子序列</span></span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j ++) </span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; a[j])</span><br><span class="line">                f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n; i; i --) &#123;  <span class="comment">// 从后往前求上升子序列</span></span><br><span class="line">        d[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = n; j &gt; i; j --)</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; a[j])</span><br><span class="line">                d[i] = <span class="built_in">max</span>(d[i], d[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) res = <span class="built_in">max</span>(res, f[i] + d[i] - <span class="number">1</span>); <span class="comment">// 在顶点位置多加了1</span></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * n)，其中 <em>n</em> 是景点个数</li>
<li>空间复杂度：<em>O</em>(n)，需要使用额外的数组保存状态<code>f[]</code></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：51 ms</p>
<p>内存消耗：216 KB</p>
<p>通过测试用例：11/11 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目3合唱队形"><a class="markdownIt-Anchor" href="#题目3合唱队形"></a> 题目3：合唱队形</h2>
<p><a href="https://www.acwing.com/problem/content/484/"> 合唱队形 </a></p>
<h3 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h3>
<p>和【题目2：登山】思路完全一样</p>
<h3 id="题解-7"><a class="markdownIt-Anchor" href="#题解-7"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], f[N], g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j ++)</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; a[j])</span><br><span class="line">                f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n; i ; i--)&#123;</span><br><span class="line">        g[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = n; j &gt; i; j --)</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; a[j])</span><br><span class="line">                g[i] = <span class="built_in">max</span>(g[i], g[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) res = <span class="built_in">max</span>(res, f[i] + g[i] - <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; n - res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * n)，其中 <em>n</em> 是学生个数</li>
<li>空间复杂度：<em>O</em>(n)，需要使用额外的数组保存状态<code>f[]</code></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：20 ms</p>
<p>内存消耗：220 KB</p>
<p>通过测试用例：11/11 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目4友好城市"><a class="markdownIt-Anchor" href="#题目4友好城市"></a> 题目4：友好城市⭐</h2>
<p><a href="https://www.acwing.com/problem/content/1014/"> 友好城市 </a></p>
<h3 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h3>
<p><strong>分析</strong>：建造的桥互不影响，按照左边城市编号从小到大进行排序后，与自己对应的右边城市也应该时从小到大的。否则就会交叉。</p>
<p>所以可以使用<code>pair&lt;int, int&gt;</code>进行保存每对友好城市的编号，然后以<code>first</code>进行排序后，对排序后的<code>second</code>编号求最长上升子序列即可。</p>
<h3 id="题解-8"><a class="markdownIt-Anchor" href="#题解-8"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">PII q[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;q[i].first, &amp;q[i].second);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(q, q + n); <span class="comment">// 按照左边的数进行从小到大排序</span></span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].second &gt; q[j].second)</span><br><span class="line">                f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        res = <span class="built_in">max</span>(res, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * n)，其中 <em>n</em> 是城市个数</li>
<li>空间复杂度：<em>O</em>(n)，需要使用额外的数组保存状态<code>f[]</code></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：284 ms</p>
<p>内存消耗：352 KB</p>
<p>通过测试用例：10/10 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目4最大上升子序列的和"><a class="markdownIt-Anchor" href="#题目4最大上升子序列的和"></a> 题目4：最大上升子序列的和</h2>
<p><a href="https://www.acwing.com/problem/content/1018/"> 最大上升子序列的和 </a></p>
<h3 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h3>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[i]</code>
<ul>
<li>集合：表示以第 <em>i</em> 个数据结尾的数值上升子序列的和</li>
<li>属性：max，（属性的选择有：max，min，数量）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题根据上升子序列的倒数第二位是数组中的第几个数
<ul>
<li>第 <em>i</em> 个数据就是最长上升子序列的第一位，则<code>f[i] = 1</code></li>
<li>第 <em>j</em> 个数据是以第 <em>i</em> 个数据结尾的最长上升子序列的倒数第二个位，则需要满足 <code>1 &lt;= j &lt;= i &amp;&amp; a[j] &lt; a[i]</code>,则<code>f[i] = f[j] + a[i]</code></li>
</ul>
</li>
</ul>
<h3 id="题解-9"><a class="markdownIt-Anchor" href="#题解-9"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示以i结尾的最大上升子序列的和</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        f[i] = a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt; a[j])</span><br><span class="line">                f[i] = <span class="built_in">max</span>(f[i], f[j] + a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) res = <span class="built_in">max</span>(res, f[i]);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * n)，其中 <em>n</em> 是序列长度</li>
<li>空间复杂度：<em>O</em>(n)，需要使用额外的数组保存状态<code>f[]</code></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：39 ms</p>
<p>内存消耗：216 KB</p>
<p>通过测试用例：11/11 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目5拦截导弹"><a class="markdownIt-Anchor" href="#题目5拦截导弹"></a> 题目5：拦截导弹❗</h2>
<h3 id="思路-10"><a class="markdownIt-Anchor" href="#思路-10"></a> 思路</h3>
<p>本题难点：处理数据的输入、第二小问</p>
<p>第一小问的解题思路就是 【最长上升子序列】的标准解题思路。</p>
<p>第二小问不理解</p>
<h3 id="题解-10"><a class="markdownIt-Anchor" href="#题解-10"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N], f[N], q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理一整行输入</span></span><br><span class="line">    string line;</span><br><span class="line">    <span class="built_in">getline</span>(cin, line);</span><br><span class="line">    <span class="function">stringstream <span class="title">ssin</span><span class="params">(line)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(ssin &gt;&gt; h[n]) n ++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// dp</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(h[j] &gt;= h[i])</span><br><span class="line">                f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, f[i]);  <span class="comment">// 计算最多能拦截的导弹数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不太理解</span></span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; cnt &amp;&amp; q[k] &lt; h[i]) k ++ ;</span><br><span class="line">        <span class="keyword">if</span> (k == cnt) q[cnt ++ ] = h[i];</span><br><span class="line">        <span class="keyword">else</span> q[k] = h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * n)，其中 <em>n</em> 是序列长度</li>
<li>空间复杂度：<em>O</em>(n)，需要使用额外的数组保存状态<code>f[]</code></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：39 ms</p>
<p>内存消耗：216 KB</p>
<p>通过测试用例：11/11 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="背包模型"><a class="markdownIt-Anchor" href="#背包模型"></a> 背包模型</h1>
<h2 id="题目1背包问题"><a class="markdownIt-Anchor" href="#题目1背包问题"></a> 题目1：背包问题</h2>
<p><a href="https://www.acwing.com/problem/content/2/"> 背包问题 </a></p>
<h3 id="思路-11"><a class="markdownIt-Anchor" href="#思路-11"></a> 思路</h3>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[i][j]</code>
<ul>
<li>集合：只从前 <em>i</em> 个物品中选择并且总体积小于等于 <em>j</em> 的所有选法。</li>
<li>属性：max，（属性的选择有：max，min，数量）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题可以根据是否选择第 <em>i</em> 件物品来划分
<ul>
<li>不选择第 <em>i</em> 件物品：<code>f[i][j] = f[i - 1][j]</code></li>
<li>选择第 <em>i</em> 件物品：可以先计算不选择第 <em>i</em> 件物品并且总体积不超过 <code>j - v[i]</code>的选法再加上第 <em>i</em> 件物品的价值<code>w[i]</code>。所以最后的表示为： <code>f[i][j] = f[i - 1][j - v[i]] + w[i]</code></li>
</ul>
</li>
</ul>
<p><strong>集合划分的原则</strong> ⭐</p>
<ul>
<li>一般原则：不重不漏，不重不一定都要满足（一般求数量时要满足）</li>
<li>如何将现有的集合划分为更小的子集，使得所有的子集都可以计算出来。</li>
</ul>
<h3 id="题解-11"><a class="markdownIt-Anchor" href="#题解-11"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">二维表示</button></li><li class="tab"><button type="button" data-href="#题解-2">一维表示-优化</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;<span class="comment">//n个物品，背包容量是m</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)&#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= v[i])&#123;  <span class="comment">// 当第i件物品的体积不超过j时</span></span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - v[i]] + w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">        res = <span class="built_in">max</span>(res, f[n][i]);</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m)，其中 <em>n</em> 和 <em>m</em> 分别是物品数和背包体积</li>
<li>空间复杂度：<em>O</em>(n * m)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：54 ms</p>
<p>内存消耗：4184 KB</p>
<p>通过测试用例：10/10</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m; v[i] &lt;= j; j --)  <span class="comment">// 从大到小判断是为了求解f[j - v[i]] + w[i]时的仍然时i - 1层的</span></span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m)，其中 <em>n</em> 和 <em>m</em> 分别是物品数和背包体积</li>
<li>空间复杂度：<em>O</em>(n * m)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：54 ms</p>
<p>内存消耗：4184 KB</p>
<p>通过测试用例：10/10</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2完全背包问题"><a class="markdownIt-Anchor" href="#题目2完全背包问题"></a> 题目2：完全背包问题</h2>
<p><a href="https://www.acwing.com/problem/content/3/"> 完全背包问题 </a></p>
<h3 id="思路-12"><a class="markdownIt-Anchor" href="#思路-12"></a> 思路</h3>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[i][j]</code>
<ul>
<li><strong>集合</strong>：只从前 <em>i</em> 个物品中选择并且总体积小于等于 <em>j</em> 的所有选法。</li>
<li><strong>属性</strong>：max，（属性的选择有：max，min，数量）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题可以根据选择 <em>k</em> 个第 <em>i</em> 件物品来划分
<ul>
<li>选择第 <em>k</em> 个第 <em>i</em> 件物品：和 <strong>背包问题</strong> 中的选择第 <em>i</em> 件物品类似，<code>f[i][j] = f[i - 1][j - k * v[i]] + k * w[i]</code>，其中 <code>k ∈ &#123;0, 1, 2, ..., s[i]&#125;</code></li>
</ul>
</li>
</ul>
<h3 id="题解-12"><a class="markdownIt-Anchor" href="#题解-12"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">三重循环-TLE</button></li><li class="tab"><button type="button" data-href="#题解-2">双重循环-二维表示</button></li><li class="tab"><button type="button" data-href="#题解-3">双重循环-一维表示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">   	</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k * v[i] &lt;= j; k ++)&#123;  <span class="comment">// 遍历第i个物品的选择个数</span></span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m)，其中 <em>n</em> 和 <em>m</em> 分别是物品数和背包体积</li>
<li>空间复杂度：<em>O</em>(n * m)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：54 ms</p>
<p>内存消耗：4184 KB</p>
<p>通过测试用例：10/10</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j ++)&#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= v[i])</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i][j - v[i]] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m)，其中 <em>n</em> 和 <em>m</em> 分别是物品数和背包体积</li>
<li>空间复杂度：<em>O</em>(n * m)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：54 ms</p>
<p>内存消耗：4184 KB</p>
<p>通过测试用例：10/10</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = v[i]; j &lt;= m; j ++)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m)，其中 <em>n</em> 和 <em>m</em> 分别是物品数和背包体积</li>
<li>空间复杂度：<em>O</em>(n * m)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：54 ms</p>
<p>内存消耗：4184 KB</p>
<p>通过测试用例：10/10</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目3采药"><a class="markdownIt-Anchor" href="#题目3采药"></a> 题目3：采药</h2>
<p><a href="https://www.acwing.com/problem/content/submission/425/"> 采药 </a></p>
<h3 id="思路-13"><a class="markdownIt-Anchor" href="#思路-13"></a> 思路</h3>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[i][j]</code>
<ul>
<li>集合：只从前 <em>i</em> 个物品中选择并且总体积小于等于 <em>j</em> 的所有选法。</li>
<li>属性：max，（属性的选择有：max，min，数量）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题可以根据是否选择第 <em>i</em> 件物品来划分
<ul>
<li>不选择第 <em>i</em> 件物品：<code>f[i][j] = f[i - 1][j]</code></li>
<li>选择第 <em>i</em> 件物品：可以先计算不选择第 <em>i</em> 件物品并且总体积不超过 <code>j - v[i]</code>的选法再加上第 <em>i</em> 件物品的价值<code>w[i]</code>。所以最后的表示为： <code>f[i][j] = f[i - 1][j - v[i]] + w[i]</code></li>
</ul>
</li>
</ul>
<h3 id="题解-13"><a class="markdownIt-Anchor" href="#题解-13"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">二维表示</button></li><li class="tab"><button type="button" data-href="#题解-2">一维表示-优化</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;<span class="comment">//n个物品，背包容量是m</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)&#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= v[i])&#123;  <span class="comment">// 当第i件物品的体积不超过j时</span></span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - v[i]] + w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">        res = <span class="built_in">max</span>(res, f[n][i]);</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m)，其中 <em>n</em> 和 <em>m</em> 分别是物品数和背包体积</li>
<li>空间复杂度：<em>O</em>(n * m)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：18 ms</p>
<p>内存消耗：604 KB</p>
<p>通过测试用例：10/10 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, M = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> w[N], v[N];</span><br><span class="line"><span class="type">int</span> f[M];  <span class="comment">// f[i][j] 表示拿到第i个物品并且总重量不超过j的价值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;  <span class="comment">// n：总体积， m：物品个数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= v[i]; j --) &#123; <span class="comment">// 总体积</span></span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);  <span class="comment">// 拿第i个物品</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m)，其中 <em>n</em> 和 <em>m</em> 分别是物品数和背包体积</li>
<li>空间复杂度：<em>O</em>(n)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：18 ms</p>
<p>内存消耗：220 KB</p>
<p>通过测试用例：10/10 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目4装箱问题"><a class="markdownIt-Anchor" href="#题目4装箱问题"></a> 题目4：装箱问题</h2>
<p><a href="https://www.acwing.com/problem/content/1026/"> 装箱问题 </a></p>
<h3 id="思路-14"><a class="markdownIt-Anchor" href="#思路-14"></a> 思路</h3>
<p>基础 【01背包】问题</p>
<h3 id="题解-14"><a class="markdownIt-Anchor" href="#题解-14"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">一维表示-优化</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">40</span>, V = <span class="number">20010</span>;</span><br><span class="line"><span class="type">int</span> n, m; <span class="comment">// n 物品个数</span></span><br><span class="line"><span class="type">int</span> v[N];</span><br><span class="line"><span class="type">int</span> f[V]; <span class="comment">// f[j]表示总体积不超过j的物品总体积，最大值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v[i];</span><br><span class="line">    <span class="comment">// for(int i = 0; i &lt;= m; i ++) f[i] = n;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= v[i]; j --)&#123;</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; m - f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m)，其中 <em>n</em> 和 <em>m</em> 分别是物品数和背包体积</li>
<li>空间复杂度：<em>O</em>(n)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：19 ms</p>
<p>内存消耗：344 KB</p>
<p>通过测试用例：8/8 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目5宠物小精灵之收服"><a class="markdownIt-Anchor" href="#题目5宠物小精灵之收服"></a> 题目5：宠物小精灵之收服⭐⭐</h2>
<p><a href="https://www.acwing.com/problem/content/1024/"> 宠物小精灵之收服 </a></p>
<h3 id="思路-15"><a class="markdownIt-Anchor" href="#思路-15"></a> 思路</h3>
<p><strong>【二维01背包问题】</strong></p>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[i][j][k]</code>
<ul>
<li>集合：只从前 <em>i</em> 个物品中选择 并且 花费1小于等于 <em>j</em>  并且 花费2不超过 <em>k</em> 的所有选法。 下面的题解按照01背包问题的优化方法进行了优化，所以只需要二维。</li>
<li>属性：max，（属性的选择有：max，min，数量）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题可以根据是否选择第 <em>i</em> 件物品来划分
<ul>
<li>不选择第 <em>i</em> 件物品：<code>f[i][j][k] = f[i - 1][j][k]</code></li>
<li>选择第 <em>i</em> 件物品：可以先计算不选择第 <em>i</em> 件物品并且总体积不超过 <code>j - v[i]</code>的选法再加上第 <em>i</em> 件物品的价值<code>w[i]</code>。所以最后的表示为： <code>f[i][j][k] = f[i - 1][j - v1[i]][k - v2[i]] + w[i]</code></li>
</ul>
</li>
</ul>
<p>另外本题存在陷阱，当精零体力值小于等于0时不能被抓，所以最后输出的结果是 <code>f[m][t - 1]</code>，至少保留一滴体力。</p>
<h3 id="题解-15"><a class="markdownIt-Anchor" href="#题解-15"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">二维表示-优化</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, M = <span class="number">1010</span>, K = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> m, t, n; <span class="comment">// m精灵球数量，t初始体力值，n小精灵数量</span></span><br><span class="line"><span class="type">int</span> v1[N], v2[N]; <span class="comment">// v1需要的精灵球数，v2对皮卡丘造成的伤害</span></span><br><span class="line"><span class="type">int</span> f[M][K]; </span><br><span class="line"><span class="comment">// f[i][j][k] 表示只从前i个数中选择并且花费1不超过j并且花费2不超过k的所有选法的最大值。</span></span><br><span class="line"><span class="comment">// 优化一维，变成两维。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; t &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; v1[i] &gt;&gt; v2[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//dp</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= v1[i]; j --)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = t - <span class="number">1</span>; k &gt;= v2[i]; k --) &#123;</span><br><span class="line">                f[j][k] = <span class="built_in">max</span>(f[j][k], f[j - v1[i]][k - v2[i]] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; f[m][t - <span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">// 因为精灵体力小于等于0也不会被收服，所以需要t - 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到满足 最大价值 的所有状态里，第二维费用消耗最少的</span></span><br><span class="line">    <span class="type">int</span> const_health = t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= t - <span class="number">1</span>; k ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(f[m][k] == f[m][t - <span class="number">1</span>]) &#123; </span><br><span class="line">            const_health = <span class="built_in">min</span>(const_health, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; t - const_health &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m * t)，其中 m精灵球数量，t初始体力值，n小精灵数量</li>
<li>空间复杂度：<em>O</em>(m * k)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：841 ms</p>
<p>内存消耗：2268 KB</p>
<p>通过测试用例：13/13 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目6数字组合"><a class="markdownIt-Anchor" href="#题目6数字组合"></a> 题目6：数字组合⭐</h2>
<p><a href="https://www.acwing.com/problem/content/280/"> 数字组合 </a></p>
<h3 id="思路-16"><a class="markdownIt-Anchor" href="#思路-16"></a> 思路</h3>
<p>本题和上面【01背包问题】不同的点是<strong>属性</strong>，本题求解的<strong>属性</strong>是数量<code>count</code></p>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[i][j]</code>
<ul>
<li>集合：只从前 <em>i</em> 个物品中选择并且总体积小于等于 <em>j</em> 的所有选法。</li>
<li>属性：count，（属性的选择有：max，min，count）</li>
</ul>
</li>
<li><strong>状态计算</strong>：状态计算的实质就是 <strong>集合划分</strong> ，本题可以根据是否选择第 <em>i</em> 件物品来划分
<ul>
<li>不选择第 <em>i</em> 件物品：<code>f[i][j] = f[i - 1][j]</code></li>
<li>选择第 <em>i</em> 件物品：可以先计算不选择第 <em>i</em> 件物品并且总体积不超过 <code>j - v[i]</code>的选法。所以最后的表示为： <code>f[i][j] = f[i - 1][j - v[i]]</code></li>
<li>所以<code>f[i][j] = f[i - 1][j] + f[i - 1][j - v[i]]</code></li>
</ul>
</li>
</ul>
<h3 id="题解-16"><a class="markdownIt-Anchor" href="#题解-16"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">二维</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只从前i个物品中选并且恰好是j的 数量</span></span><br><span class="line"><span class="comment">// 属性：数量</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, M = <span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> f[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// f[0][0] = 1; 空集</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= a[i]; j --)&#123;</span><br><span class="line">            f[j] = f[j] + f[j - a[i]];  <span class="comment">// 不选第i个 + 选第i个</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m)，其中 n 是整数个数，m 是目标和</li>
<li>空间复杂度：<em>O</em>(m)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：15 ms</p>
<p>内存消耗：344 KB</p>
<p>通过测试用例：11/11 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目7买书"><a class="markdownIt-Anchor" href="#题目7买书"></a> 题目7：买书</h2>
<h3 id="思路-17"><a class="markdownIt-Anchor" href="#思路-17"></a> 思路</h3>
<p>和 【数字组合】思路类似，需要明确背包的体积：小明拥有的钱数，每个物品的体积：每本书的价格。</p>
<h3 id="题解-17"><a class="markdownIt-Anchor" href="#题解-17"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">二维</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>&#125;;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = a[i]; j &lt;= n; j ++)</span><br><span class="line">            f[j] = f[j] + f[j - a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n)，其中 n 是小明拥有的钱数</li>
<li>空间复杂度：<em>O</em>(m)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：15 ms</p>
<p>内存消耗：216 KB</p>
<p>通过测试用例：10/10 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目8货币系统"><a class="markdownIt-Anchor" href="#题目8货币系统"></a> 题目8：货币系统</h2>
<h3 id="思路-18"><a class="markdownIt-Anchor" href="#思路-18"></a> 思路</h3>
<p>和 【数字组合】思路类似，需要明确背包的体积：需要组成的面值m，每个物品的体积：每个货币的面值，物种数量：n</p>
<h3 id="题解-18"><a class="markdownIt-Anchor" href="#题解-18"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">二维</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>, M = <span class="number">3010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">ll f[M];  <span class="comment">// f[j] 表示面值为j的方案数。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = a[i]; j &lt;= m; j ++)</span><br><span class="line">            f[j] += f[j - a[i]];</span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * m)，其中 n 是货币种类数，m是面值</li>
<li>空间复杂度：<em>O</em>(m)</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：12 ms</p>
<p>内存消耗：220 KB</p>
<p>通过测试用例：11/11 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="状态机模型"><a class="markdownIt-Anchor" href="#状态机模型"></a> 状态机模型</h1>
<h1 id="状态压缩dp"><a class="markdownIt-Anchor" href="#状态压缩dp"></a> 状态压缩DP</h1>
<p><strong>状态压缩DP</strong></p>
<ul>
<li>棋盘式（基于连通性）</li>
<li>集合</li>
</ul>
<h1 id="区间dp"><a class="markdownIt-Anchor" href="#区间dp"></a> 区间DP</h1>
<h2 id="题目1石子合并"><a class="markdownIt-Anchor" href="#题目1石子合并"></a> 题目1：石子合并</h2>
<p><a href="https://www.acwing.com/problem/content/284/">石子合并</a></p>
<h3 id="思路-19"><a class="markdownIt-Anchor" href="#思路-19"></a> 思路</h3>
<p><strong>动态规划分析</strong></p>
<ul>
<li><strong>状态表示</strong>：<code>f[i][j]</code>
<ul>
<li><strong>集合</strong>：所有将第 <em>i</em> 堆石子到第 <em>j</em> 堆石子合并成一堆石子的合并方式</li>
<li><strong>属性</strong>：min</li>
</ul>
</li>
<li><strong>状态计算</strong>：本质就是 <strong>集合划分</strong> ，以分界线的位置进行分类。
<ul>
<li>将区间分为<code>f[i][k]</code> 和 <code>f[k + 1][j]</code>，则总代价为<code>f[i][k] + f[k + 1][j] +s[j] - s[i - 1]</code>， <code>s[]</code>为前缀和数组</li>
<li><code>f[i][j] = main(f[i][k] + f[k + 1][j] +s[j] - s[i - 1])</code>，<code>k ∈ &#123; i ~ j -1 &#125;</code></li>
</ul>
</li>
</ul>
<h3 id="题解-19"><a class="markdownIt-Anchor" href="#题解-19"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">区间DP</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; s[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len ++) <span class="comment">// 遍历需要计算的石子的个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i ++)&#123; <span class="comment">// 遍历当前堆中的左右边界</span></span><br><span class="line">            <span class="type">int</span> l = i, r = i + len - <span class="number">1</span>;</span><br><span class="line">            f[l][r] = <span class="number">1e9</span>; <span class="comment">// 初始话f[][]数组</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = l; k &lt; r; k ++) &#123; <span class="comment">// 在左右边界内再将石子划分为两堆</span></span><br><span class="line">                f[l][r] = <span class="built_in">min</span>(f[l][r], f[l][k] + f[k + <span class="number">1</span>][r] + s[r] - s[l - <span class="number">1</span>]); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; f[<span class="number">1</span>][n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n ^ 3)，其中 <em>n</em> 是石子的个数</li>
<li>空间复杂度：<em>O</em>(n * n)，需要使用额外的数组保存状态<code>f[][]</code></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：157 ms</p>
<p>内存消耗：1368 KB</p>
<p>通过测试用例：11/11</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>AcWing</category>
        <category>Course</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>AcWing</tag>
        <tag>LeetCode</tag>
        <tag>DP</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>算法提高课 - 搜索</title>
    <url>/2022/09/01/AcWing/Search/</url>
    <content><![CDATA[<h1 id="学习平台"><a class="markdownIt-Anchor" href="#学习平台"></a> 学习平台</h1>
<p><a href="https://www.acwing.com/about/"> AcWing </a> 、 <a href="https://leetcode.cn/"> LeetCode </a></p>
<p>💡：模板题、⭐：经典题，类型不太一样、❗：难题，存在不理解</p>
<h1 id="flood-fill"><a class="markdownIt-Anchor" href="#flood-fill"></a> Flood Fill</h1>
<blockquote>
<p>顾名思义为洪水覆盖法，每次把经过遍历的点看作已经被覆盖的点，然后根据题目要求向周围没有遍历的点扩展即可。</p>
</blockquote>
<p>主要是通过<code>bfs</code>求解是否连通问题。当然也可以求解连通图的数量或者大小，只需要进行变形即可。</p>
<p>为什么从一个点开始遍历使用<code>bfs</code>遍历到目标节点时，即为最短距离：</p>
<p>队列的性质：<strong>两段性</strong> （例如数的的层序遍历，队列中<strong>最多</strong>只存相邻两层中的元素）、<strong>单调性</strong></p>
<h2 id="题目1池塘计数"><a class="markdownIt-Anchor" href="#题目1池塘计数"></a> 题目1：池塘计数 💡</h2>
<p><a href="https://www.acwing.com/activity/content/problem/content/1468/"> 池塘计数 </a></p>
<h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3>
<p>本题为<strong>八连通问题</strong>，即一个点的连通点有八个方向，因此可以使用双重<code>for</code>循环遍历这八个点，特别注意，需要将自己”扣掉“。</p>
<p>本题的属性是：数量，即为计算连通区域的数量。因此状态数组<code>st[][]</code>使用<code>bool</code>类型即可</p>
<p>需要用到的数组：</p>
<ul>
<li><code>g[][]</code>：保存原来的地图</li>
<li><code>q[][]</code>：<code>pair&lt;int, int&gt;</code>类型数组，主要用于模拟队列，每次遍历一个点，将该点的横纵坐标存入队列中。</li>
<li><code>st[][]</code>：状态数组，用来记录某个位置的点是否被遍历过。</li>
</ul>
<h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line">PII que[N * N]; <span class="comment">// 存放是水的坐标</span></span><br><span class="line"><span class="type">bool</span> used[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> sx, <span class="type">int</span> sy)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>; <span class="comment">// hh队头指针，tt队尾指针</span></span><br><span class="line">    que[<span class="number">0</span>] = &#123;sx, sy&#125;;</span><br><span class="line">    used[sx][sy] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt) &#123; <span class="comment">// 当队列不空</span></span><br><span class="line">        PII t = que[hh ++]; <span class="comment">// 将队头元素取出并且出队</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = t.x - <span class="number">1</span>; i &lt;= t.x + <span class="number">1</span>; i ++) <span class="comment">// 遍历3 * 3的区间范围</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = t.y - <span class="number">1</span>; j &lt;= t.y + <span class="number">1</span>; j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == t.x &amp;&amp; j == t.y) <span class="keyword">continue</span>; <span class="comment">// 将自己去掉</span></span><br><span class="line">                <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= n || j &lt; <span class="number">0</span> || j &gt;= m) <span class="keyword">continue</span>; <span class="comment">// 出界</span></span><br><span class="line">                <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;.&#x27;</span> || used[i][j]) <span class="keyword">continue</span>; <span class="comment">// 如果当前点不是水坑，或者已经被遍历过了</span></span><br><span class="line">                </span><br><span class="line">                que[++ tt] = &#123;i, j&#125;;  <span class="comment">// 将该点入队</span></span><br><span class="line">                used[i][j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line">            <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;W&#x27;</span> &amp;&amp; !used[i][j]) &#123; <span class="comment">// 如果当前位置是水坑并且没有被判断过</span></span><br><span class="line">                <span class="built_in">bfs</span>(i, j);  <span class="comment">// 遍历和该水坑连通的所有水坑。</span></span><br><span class="line">                cnt ++;</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * a * b )，其中 <em>n</em> 是数据的组数，<em>a</em> 是每组数据的行数，<em>b</em> 是每组数据的列数</li>
<li>空间复杂度：<em>O</em>(n * n)，模拟队列最坏情况存放所有的点</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：328 ms</p>
<p>内存消耗：7392 KB</p>
<p>通过测试用例：10/10 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2城堡问题"><a class="markdownIt-Anchor" href="#题目2城堡问题"></a> 题目2：城堡问题</h2>
<p><a href="https://www.acwing.com/problem/content/1100/">城堡问题</a></p>
<h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3>
<p>求房间总数的思路和【池塘计数】完全相同，本题为4连通问题。输出最大房间的面积，每次出队则当前房间面积+1。取最大值即可。</p>
<h3 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1西，2北，4东，8南</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>, M = N * N;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line">PII q[M];</span><br><span class="line"><span class="type">bool</span> st[N][N]; <span class="comment">// 每个点的状态</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> sx, <span class="type">int</span> sy)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>; <span class="comment">// 队头指针, 队尾指针</span></span><br><span class="line">    <span class="type">int</span> area = <span class="number">0</span>; <span class="comment">// 连通块的面积</span></span><br><span class="line">    </span><br><span class="line">    q[<span class="number">0</span>] = &#123;sx, sy&#125;;</span><br><span class="line">    st[sx][sy] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt) &#123;</span><br><span class="line">        PII t = q[hh ++]; <span class="comment">// 取出队头元素</span></span><br><span class="line">        area ++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++)&#123;</span><br><span class="line">            <span class="type">int</span> a = t.x + dx[i], b = t.y + dy[i]; <span class="comment">// [a][b]分别是上下左右是个房间</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(a &lt; <span class="number">0</span> || a &gt;= m || b &lt; <span class="number">0</span> || b &gt;= n) <span class="keyword">continue</span>;  <span class="comment">// 越界</span></span><br><span class="line">            <span class="keyword">if</span>(st[a][b]) <span class="keyword">continue</span>; <span class="comment">// 位置为0，或者已经被遍历过了</span></span><br><span class="line">            <span class="keyword">if</span>(g[t.x][t.y] &gt;&gt; i &amp; <span class="number">1</span>) <span class="keyword">continue</span>; <span class="comment">// 第i个位置为墙</span></span><br><span class="line">            </span><br><span class="line">            q[++ tt] = &#123;a, b&#125;;</span><br><span class="line">            st[a][b] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            cin &gt;&gt; g[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>, maxs = <span class="number">0</span>; <span class="comment">// cnt:连通块个数，maxs:最大面积</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++)</span><br><span class="line">            <span class="keyword">if</span>(!st[i][j])&#123;</span><br><span class="line">                maxs = <span class="built_in">max</span>(maxs, <span class="built_in">bfs</span>(i, j));</span><br><span class="line">                cnt ++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; maxs &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O</em>(n * a * b )，其中 <em>n</em> 是数据的组数，<em>a</em> 是每组数据的行数，<em>b</em> 是每组数据的列数</li>
<li>空间复杂度：<em>O</em>(n * n)，模拟队列最坏情况存放所有的点</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：328 ms</p>
<p>内存消耗：7392 KB</p>
<p>通过测试用例：10/10 个数据</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>AcWing</category>
        <category>Course</category>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>AcWing</tag>
        <tag>LeetCode</tag>
        <tag>搜索</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>故障注入&amp;检测流程</title>
    <url>/2022/03/22/LLVM/01faultInjection/</url>
    <content><![CDATA[<h1 id="故障注入检测流程"><a class="markdownIt-Anchor" href="#故障注入检测流程"></a> 故障注入&amp;检测流程</h1>
<h2 id="cpu故障注入检测流程"><a class="markdownIt-Anchor" href="#cpu故障注入检测流程"></a> CPU故障注入&amp;检测流程</h2>
<h3 id="处理源程序"><a class="markdownIt-Anchor" href="#处理源程序"></a> 处理源程序</h3>
<ol>
<li><strong>将源代码转换成中间代码，划分了基本块</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang -S -g -emit-llvm dm_dist.c -o dm_dist.ll</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>**给中间代码添加全局变量：**调用<code>Pass</code> <code>AddGlobalSig.so</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opt -load ../AddGlobalSig.so -AddGlobalSig -S dm_dist.ll -o dm_dist.ll</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>**对每个基本块进行脆弱性分析；**并将结果输出至<code>allindex.txt</code>文件中</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opt -load ../Index.so -Index -disable-output dm_dist.ll 2&gt; allindex.txt</span><br></pre></td></tr></table></figure>
<p><code>allindex.txt</code>文件里面的内容为（基本块号，每个基本块里的指令数量）</p>
<ol start="4">
<li>**执行排序程序，**将<code>allindex.txt</code>文件的内容按照基本块指令数量从小到大排序，并输出前n/3-1个基本块的块号至<code>index.txt</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pthon3 sort.py &gt; index.txt</span><br></pre></td></tr></table></figure>
<ol start="5">
<li><strong>将脆弱性高的基本块进行再拆分.</strong> 这里的<code>$line</code>是 <code>index.txt</code> 里面存放的值</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> `<span class="built_in">cat</span> index.txt`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	/home/yy2/Desktop/llvm/build/bin/opt -load /home/yy2/Desktop/llvm/build/lib/SplitBlock.so -SplitBlock -S -index <span class="variable">$line</span> dm_dist.ll -o dm_dist.ll</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li><strong>使用<code>CFCSS</code>对中间代码进行插桩</strong> 使用<code>Pass：CFCSS.so</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opt -load ../CFCSS.so -CFCSS -S dm_dist.ll -o cfcss.ll</span><br></pre></td></tr></table></figure>
<ol start="7">
<li><strong>编译.ll文件生成可执行程序</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang cfcss.ll -o dm_dist/dm_dist_cf</span><br></pre></td></tr></table></figure>
<h3 id="故障注入"><a class="markdownIt-Anchor" href="#故障注入"></a> 故障注入</h3>
<p><strong>调用<code>auto.sh</code>进行自动化注入</strong></p>
<p>$1 待注入程序    $2 程序的输入文件(不懂)    $3 运行次数   $4 p/r 故障注入方式  $5 守护进程检测时间间隔</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./auto.sh ../qt/TestProgram/dm_dist/dm_dist_cf input_small.dat <span class="string">&quot;2500&quot;</span> <span class="string">&quot;r&quot;</span> <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure>
<p>在<code>auto.sh</code>里面调用<code>gdb</code>工具进行故障注入。<code>start.py</code></p>
<h3 id="结果分析"><a class="markdownIt-Anchor" href="#结果分析"></a> 结果分析</h3>
<p>调用python文件进行结果分析:使用了<code>statistics.py</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 ../qt/CPUControl/fault_inject/statistics.py inject.output inject.correct</span><br></pre></td></tr></table></figure>
<h2 id="寄存器故障注入检测流程"><a class="markdownIt-Anchor" href="#寄存器故障注入检测流程"></a> 寄存器故障注入&amp;检测流程</h2>
<h3 id="标签扩展"><a class="markdownIt-Anchor" href="#标签扩展"></a> 标签扩展</h3>
<ol>
<li><strong>使用clang将源程序转化为中间代码</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang dm.cpp --target=arm-v7-linux-gnueabi -emit-llvm -g -S -o dm.ll</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>加固程序,给中间代码添加编号</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opt -load ../pass/build/libgenLLFIIndex/libgenLLFIIndex.so -genllfiindexpass -S dm.ll -o dm_id.ll</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>加固，通过冗余进行程序加固</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opt -load ../pass/build/libdmr/libdmr.so -eddi -select_set_file=../xzt_jcq/index.txt -S dm_id.ll -o dm_df.ll</span><br></pre></td></tr></table></figure>
<h3 id="交叉编译"><a class="markdownIt-Anchor" href="#交叉编译"></a> 交叉编译</h3>
<ol>
<li><strong>编译程序，生成链接文件</strong> 生成.o文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang dm_df.ll --target=arm-v7-linux-gnueabi -c -o dm_df.o</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>链接程序，生成可执行文件</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arm-linux-gnueabi-gcc dm_df.o exec.o -static -o dm_df</span><br></pre></td></tr></table></figure>
<h3 id="故障注入-2"><a class="markdownIt-Anchor" href="#故障注入-2"></a> 故障注入</h3>
<p>通过<code>gem5</code>对可执行程序进行故障注入</p>
<p>通过for循环执行n次命令，从而进行n次故障注入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">../res/gemFI/build/ARM/gem5.opt ../res/gemFI/configs/example/se.py -c dm_df</span><br></pre></td></tr></table></figure>
<h3 id="结果分析-2"><a class="markdownIt-Anchor" href="#结果分析-2"></a> 结果分析</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python ./.statistics.py</span><br></pre></td></tr></table></figure>
<h2 id="io故障注入检测流程"><a class="markdownIt-Anchor" href="#io故障注入检测流程"></a> IO故障注入&amp;检测流程</h2>
<h3 id="加固"><a class="markdownIt-Anchor" href="#加固"></a> 加固</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arm-linux-gnueabi-g++ ../qt/IO/benchmark/dm/ManagerTask.cpp ../Desktop/qt/IO/benchmark/dm/dm.cpp -static -g -o /../Desktop/qt/IO/benchmark/dm/IOFaultTolerance</span><br><span class="line">arm-linux-gnueabi-g++ ../Desktop/qt/IO/benchmark/dm/dm_dist.cpp ../Desktop/qt/IO/benchmark/dm/exec.cpp -static -g -o ../Desktop/qt/IO/benchmark/dm/dm_dist.out</span><br></pre></td></tr></table></figure>
<h3 id="故障注入-3"><a class="markdownIt-Anchor" href="#故障注入-3"></a> 故障注入</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">../home/yy2/res/gemFI/build/ARM/gem5.opt /home/yy2/res/gemFI/configs/example/se.py -c </span><br><span class="line">../Desktop/qt/IO/benchmark/dm/dm.out</span><br><span class="line">../res/gemFI/build/ARM/gem5.opt /gemFI/configs/example/se.py -c ../Desktop/qt/IO/benchmark/dm/IOFaultTolerance</span><br></pre></td></tr></table></figure>
<h3 id="结果分析-3"><a class="markdownIt-Anchor" href="#结果分析-3"></a> 结果分析</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python statistic.py <span class="comment">#调用的是/home/yy2/Desktop/qt/IO/benchmark/dm/fiwork/fi/golden/out.txt</span></span><br></pre></td></tr></table></figure>
<h2 id="llvm-ir"><a class="markdownIt-Anchor" href="#llvm-ir"></a> LLVM IR</h2>
<p>生成.ll文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">../Desktop/llvm/build/bin/clang -S -g -emit-llvm dm_dist.c -o dm_dist.ll</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LLVM</category>
      </categories>
      <tags>
        <tag>LLVM</tag>
        <tag>故障注入</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM Pass编写及运行</title>
    <url>/2022/03/22/LLVM/02PassWriteProcess/</url>
    <content><![CDATA[<h1 id="pass编写运行"><a class="markdownIt-Anchor" href="#pass编写运行"></a> Pass编写运行</h1>
<h2 id="编写pass"><a class="markdownIt-Anchor" href="#编写pass"></a> 编写Pass</h2>
<ol>
<li>在<code>llvm/lib/Transforms/</code>目录下新建文件夹，命名为<code>MyPass</code></li>
</ol>
<p><img src="/img/LLVM/Pass1.png" alt="Pass1" /></p>
<ol start="2">
<li>在<code>MyPass</code> 文件夹下创建两个文件，分别为<code>MyPass.cpp</code>、<code>CMakeLists.txt</code></li>
</ol>
<p><img src="/img/LLVM/Pass2.png" alt="image-20220102144652248" /></p>
<ol start="3">
<li>对<code>MyPass.cpp</code>以及<code>CMakeLists.txt</code>文件进行编写。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">#MyPass.cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Analysis/LoopInfo.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_TYPE <span class="string">&quot;hello&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">MyPass</span> : <span class="keyword">public</span> FunctionPass&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">        <span class="built_in">MyPass</span>() : <span class="built_in">FunctionPass</span>(ID)&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">            LoopInfo *LI = &amp;<span class="built_in">getAnalysis</span>&lt;LoopInfoWrapperPass&gt;().<span class="built_in">getLoopInfo</span>();</span><br><span class="line">            <span class="built_in">errs</span>()&lt;&lt;<span class="string">&quot;Function &quot;</span>&lt;&lt;F.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(Loop *L : *LI)</span><br><span class="line">                <span class="built_in">countBlocksInLoop</span>(L,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">countBlocksInLoop</span><span class="params">(Loop *L,<span class="type">unsigned</span> nest)</span></span>&#123;</span><br><span class="line">            <span class="type">unsigned</span> num_Blocks=<span class="number">0</span>;</span><br><span class="line">            Loop::block_iterator bb;</span><br><span class="line">            <span class="keyword">for</span>(bb = L-&gt;<span class="built_in">block_begin</span>();bb!=L-&gt;<span class="built_in">block_end</span>();++bb)</span><br><span class="line">                num_Blocks++;</span><br><span class="line">            <span class="built_in">errs</span>()&lt;&lt;<span class="string">&quot;Loop level &quot;</span>&lt;&lt; nest &lt;&lt;<span class="string">&quot;has&quot;</span>&lt;&lt;num_Blocks&lt;&lt;<span class="string">&quot; blocks\n&quot;</span>;</span><br><span class="line">            std::vector&lt;Loop*&gt; subLoops = L-&gt;<span class="built_in">getSubLoops</span>();</span><br><span class="line">            Loop::iterator j,f;</span><br><span class="line">            <span class="keyword">for</span>(j = subLoops.<span class="built_in">begin</span>(),f=subLoops.<span class="built_in">end</span>();j!=f;++j)</span><br><span class="line">                <span class="built_in">countBlocksInLoop</span>(*j, nest+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">getAnalysisUsage</span><span class="params">(AnalysisUsage &amp;AU)</span> <span class="type">const</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">            AU.<span class="built_in">addRequired</span>&lt;LoopInfoWrapperPass&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> MyPass::ID=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;MyPass&gt; <span class="title">X</span><span class="params">(<span class="string">&quot;MyPass&quot;</span>,<span class="string">&quot;Function Block Count&quot;</span>,<span class="literal">false</span>,<span class="literal">false</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="params">#</span>CMakeLists.txt</span><br><span class="line">cmake<span class="built_in">_</span>minimum<span class="built_in">_</span>required(VERSION 3.5)</span><br><span class="line"></span><br><span class="line">add<span class="built_in">_</span>llvm<span class="built_in">_</span>loadable<span class="built_in">_</span>module(MyPass</span><br><span class="line">	MyPass.cpp</span><br><span class="line">	)</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>对Transforms/文件夹下面的CMakeLists.txt文件进行修改。</li>
</ol>
<p><img src="/img/LLVM/Pass3.png" alt="image-20220102145118378" /></p>
<h2 id="编译生成so文件"><a class="markdownIt-Anchor" href="#编译生成so文件"></a> 编译生成.so文件</h2>
<p>在<code>llvm/build/</code>目录下面执行<code>make</code>指令，则会编译生成动态链接库<code>.so</code>文件，生成的文件在<code>llvm/build/lib/</code>目录下面。</p>
<h2 id="编写测试程序"><a class="markdownIt-Anchor" href="#编写测试程序"></a> 编写测试程序</h2>
<p>编写<code>.c</code>或<code>.cpp</code>文件，然后用<code>clang</code>工具对源程序进行编译，生成<code>LLVM IR</code>中间代码。</p>
<h2 id="运行pass"><a class="markdownIt-Anchor" href="#运行pass"></a> 运行Pass</h2>
<p>通过调用测试程序运行<code>Pass</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opt -load ../Desktop/llvm/build/lib/MyPass.so -MyPass -disable-output testPra.ll</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LLVM</category>
      </categories>
      <tags>
        <tag>LLVM</tag>
        <tag>Pass</tag>
      </tags>
  </entry>
  <entry>
    <title>908.最小差值</title>
    <url>/2022/04/30/LeetCode/20220430/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode-cn.com/problems/smallest-range-i/"> 最小差值 1 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>先找到数组中的最大值和最小值，然后用二者的差在减去 2 * k，若小于等于 0，则结果为 0，否则，结果为差值。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">smallestRangeI</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> min = <span class="number">10000</span>, max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min &gt; nums[i])  <span class="comment">// 找最小值</span></span><br><span class="line">                min = nums[i];</span><br><span class="line">            <span class="keyword">if</span>(max &lt; nums[i])  <span class="comment">// 找最大值</span></span><br><span class="line">                max = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max - min &lt;= k * <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (max - min - k * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em></li>
<li>空间复杂度：<em>O(n)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：132 ms, 在所有 C++ 提交中击败了52.57%的用户</p>
<p>内存消耗：83.3 MB, 在所有 C++ 提交中击败了57.45%的用户</p>
<p>通过测试用例：48 / 48</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>1305.两颗二叉搜索树中的所有元素</title>
    <url>/2022/05/01/LeetCode/20220501/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees/"> 两颗二叉搜索树中的所有元素 </a></p>
<h2 id="思路-1"><a class="markdownIt-Anchor" href="#思路-1"></a> 思路 1</h2>
<p>先前序遍历两个二叉搜索树，将所有节点的值存放至<code>vector&lt;int&gt;</code>中，然后在进行排序。</p>
<h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路 2</h2>
<p>先进行中序遍历，得到两个二叉搜索树对应的数组，该数组均为有序（从小到大），然后进行归并即可。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li><li class="tab"><button type="button" data-href="#题解-2">题解 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="comment">// 二叉树的前序遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">preTraverse</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">preTraverse</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">preTraverse</span>(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getAllElements</span><span class="params">(TreeNode* root1, TreeNode* root2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">preTraverse</span>(root1);</span><br><span class="line">        <span class="built_in">preTraverse</span>(root2);</span><br><span class="line">        <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O((n + m) * log(n + m))</em>，其中 <em>n</em> 和 <em>m</em> 分别为两棵二叉搜索树的节点个数。</li>
<li>空间复杂度：<em>O(n + m)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：120 ms, 在所有 C++ 提交中击败了82.38%的用户</p>
<p>内存消耗：83.3 MB, 在所有 C++ 提交中击败了60.43%的用户</p>
<p>通过测试用例：48 / 48</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InoTraversal</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">InoTraversal</span>(root-&gt;left, nums);</span><br><span class="line">        nums.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="built_in">InoTraversal</span>(root-&gt;right, nums);       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getAllElements</span><span class="params">(TreeNode* root1, TreeNode* root2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; nums1, nums2;</span><br><span class="line">        <span class="built_in">InoTraversal</span>(root1, nums1);</span><br><span class="line">        <span class="built_in">InoTraversal</span>(root2, nums2);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; nums1.<span class="built_in">size</span>() &amp;&amp; j &lt; nums2.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i] &lt; nums2[j])</span><br><span class="line">                res.<span class="built_in">push_back</span>(nums1[i++]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res.<span class="built_in">push_back</span>(nums2[j++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; nums1.<span class="built_in">size</span>()) res.<span class="built_in">push_back</span>(nums1[i++]);</span><br><span class="line">        <span class="keyword">while</span>(j &lt; nums2.<span class="built_in">size</span>()) res.<span class="built_in">push_back</span>(nums2[j++]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O((n + m))</em>，其中 <em>n</em> 和 <em>m</em> 分别为两棵二叉搜索树的节点个数。</li>
<li>空间复杂度：<em>O(n + m)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：116 ms, 在所有 C++ 提交中击败了88.62%的用户</p>
<p>内存消耗：85.4 MB, 在所有 C++ 提交中击败了6.23%的用户</p>
<p>通过测试用例：48 / 48</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>LeetCode</tag>
        <tag>二叉搜索树</tag>
        <tag>深度优先搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>591.标签验证器</title>
    <url>/2022/05/02/LeetCode/20220502-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode-cn.com/problems/tag-validator/"> 标签验证器 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>如果当前字符为 <strong>&lt;</strong>，需要考虑下面四种情况：</p>
<ul>
<li>如果下一个字符为 <strong>/</strong>，那么说明我们遇到了一个结束标签。我们需要定位下一个 <strong>&gt;</strong> 的位置 <strong>j</strong>，此时 <code>code[i+2..j−1]</code> 就是该结束标签的名称。我们需要判断该名称与当前栈顶的名称是否匹配，如果匹配，说明名称的标签已经闭合，我们需要将当前栈顶的名称弹出。同时根据规则 <strong>1</strong>，我们需要保证整个 <strong>code</strong> 被闭合标签包围，因此如果栈中已经没有标签，但是 <strong>j</strong> 并不是 <strong>code</strong> 的末尾，那么说明后续还会有字符，它们不被闭合标签包围。</li>
<li>如果下一个字符为 <strong>!</strong>，那么说明我们遇到了一个 <strong>cdata</strong>，我们需要继续往后读 77 个字符，判断其是否为 \texttt{[CDATA[}[CDATA[。在这之后，我们定位下一个 <strong>]]&gt;</strong> 的位置 <strong>j</strong>，此时 <code>code[i+9..j−1]</code> 就是 <strong>cdata</strong> 中的内容，它不需要被解析，所以我们也不必进行任何验证。需要注意的是，根据规则 <strong>1</strong>，栈中需要存在至少一个开放的标签。</li>
<li>如果下一个字符为大写字母，那么说明我们遇到了一个开始标签。我们需要定位下一个 <strong>&gt;</strong> 的位置 <strong>j</strong>，此时 <code>code[i+2..j−1]</code> 就是该开始标签的名称。我们需要判断该名称是否恰好由 1 至 9 个大写字母组成，如果是，说明该标签合法，我们需要将该名称放入栈顶。</li>
<li>除此之外，如果不存在下一个字符，或者下一个字符不属于上述三种情况，那么 <strong>code</strong> 是不合法的。</li>
</ul>
<p>如果当前的字符为其它字符，那么根据规则 1，栈中需要存在至少一个开放的标签。</p>
<p>在遍历完成后，我们还需要保证此时栈中没有任何（还没有结束的）标签。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string code)</span> </span>&#123;</span><br><span class="line">        stack&lt;string&gt; stk;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, n = code.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(code[i] == <span class="string">&#x27;&lt;&#x27;</span>)&#123;  <span class="comment">// 当前字符为 &lt;</span></span><br><span class="line">                <span class="keyword">if</span>(i == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(code[i + <span class="number">1</span>] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; code[i + <span class="number">1</span>] &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;  <span class="comment">// 下一个字符是大写字母</span></span><br><span class="line">                    <span class="type">int</span> j = code.<span class="built_in">find</span>(<span class="string">&#x27;&gt;&#x27;</span>, i);  <span class="comment">// 从i开始找，找到第一个 &gt;，并返回其下标</span></span><br><span class="line">                    <span class="keyword">if</span>(j == string::npos) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 不存在 &gt;</span></span><br><span class="line">                    string str = code.<span class="built_in">substr</span>(i + <span class="number">1</span>, j - i - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(str.<span class="built_in">length</span>() &lt; <span class="number">1</span> || str.<span class="built_in">length</span>() &gt; <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 判断长度是否合法</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; str.<span class="built_in">size</span>(); k ++)&#123;  <span class="comment">// 判断是否全为大写字母</span></span><br><span class="line">                        <span class="keyword">if</span>(str[k] &lt; <span class="string">&#x27;A&#x27;</span> || str[k] &gt; <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    stk.<span class="built_in">push</span>(str);</span><br><span class="line">                    i = j + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(code[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> j = code.<span class="built_in">find</span>(<span class="string">&#x27;&gt;&#x27;</span>, i);</span><br><span class="line">                    <span class="keyword">if</span>(j == string::npos) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    string str = code.<span class="built_in">substr</span>(i + <span class="number">2</span>, j - i - <span class="number">2</span>);</span><br><span class="line">                    <span class="keyword">if</span>(stk.<span class="built_in">empty</span>() || stk.<span class="built_in">top</span>() != str) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 如果栈顶元素为空 或者 和栈顶元素不匹配</span></span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">                    i = j + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(stk.<span class="built_in">empty</span>() &amp;&amp; i != n) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果栈为空，但是还没遍历到字符串末尾</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(code[i + <span class="number">1</span>] == <span class="string">&#x27;!&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(stk.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    string str = code.<span class="built_in">substr</span>(i + <span class="number">2</span>, <span class="number">7</span>);  <span class="comment">// 往后读7个字符</span></span><br><span class="line">                    <span class="keyword">if</span>(str != <span class="string">&quot;[CDATA[&quot;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="type">int</span> j = code.<span class="built_in">find</span>(<span class="string">&quot;]]&gt;&quot;</span>, i);</span><br><span class="line">                    <span class="keyword">if</span>(j == string::npos) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    i = j + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(stk.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 当前字符为其他字符，但是栈为空了，</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>(); <span class="comment">// 可能还存在栈最后还不空的情况</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为 <em>code</em> 的长度，我们只需要对 <em>code</em> 进行一次遍历。</li>
<li>空间复杂度：<em>O(n)</em>，即为栈存储标签名称需要使用的空间。</li>
</ul>
</div>
<div class="note success 执行结果 simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：6.3 MB, 在所有 C++ 提交中击败了96.00%的用户</p>
<p>通过测试用例：260 / 260</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>栈</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>937.重新排列日志文件</title>
    <url>/2022/05/03/LeetCode/20220503-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode-cn.com/problems/reorder-data-in-log-files/"> 重新排列日志文件 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<ul>
<li>思路1：先遍历一边数组，分别将字母日志和数字日志存入<code>vector&lt;string&gt;</code>中，然后将字母日志使用自定义排序进行排序，再将数字日志加入排序后的字母日志即可。</li>
<li>思路2：直接使用 <code>stable_sort</code>进行自定义排序.</li>
</ul>
<h2 id="stable_sort-和-sort-的区别"><a class="markdownIt-Anchor" href="#stable_sort-和-sort-的区别"></a> <code>stable_sort</code> 和 <code>sort</code> 的区别</h2>
<ul>
<li><code>sort</code>是快速排序实现，因此是不稳定的；<code>stable_sort</code>是归并排序实现，因此是稳定的。（这里的稳定是指排序后相等元素的相对位置保持不变）</li>
<li>对于相等的元素<code>sort</code>可能改变顺序，<code>stable_sort</code>保证排序后相等的元素次序不变。</li>
<li>如果提供了比较函数，<code>sort</code>不要求比较函数的参数被限定为<code>const</code>，而<code>stable_sort</code>则要求参数被限定为<code>const</code>，否则编译不能通过。</li>
</ul>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li><li class="tab"><button type="button" data-href="#题解-2">题解2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">reorderLogFiles</span><span class="params">(vector&lt;string&gt;&amp; logs)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; dig;  <span class="comment">// 保存数字日志</span></span><br><span class="line">        vector&lt;string&gt; let;  <span class="comment">// 保存字母日志</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; logs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            string str = logs[i];</span><br><span class="line">            <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(; j &lt; str.<span class="built_in">size</span>(); j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str[j] == <span class="string">&#x27; &#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(str[j + <span class="number">1</span>] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[j + <span class="number">1</span>] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123; <span class="comment">//是数字日志</span></span><br><span class="line">                dig.<span class="built_in">push_back</span>(str);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; <span class="comment">// 是字母日志</span></span><br><span class="line">                let.<span class="built_in">push_back</span>(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(let.<span class="built_in">begin</span>(), let.<span class="built_in">end</span>(), [](string &amp;a, string &amp;b) &#123;  <span class="comment">//自定义sort排序</span></span><br><span class="line">            <span class="type">int</span> x = a.<span class="built_in">find</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">int</span> y = b.<span class="built_in">find</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            string stra = a.<span class="built_in">substr</span>(x + <span class="number">1</span>);</span><br><span class="line">            string strb = b.<span class="built_in">substr</span>(y + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(stra != strb) <span class="keyword">return</span> stra &lt; strb;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> a &lt; b;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; dig.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            let.<span class="built_in">push_back</span>(dig[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> let;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * log n)</em>，其中 <em>n</em> 为 <em>logs</em> 的字符数，是平均情况下内置排序的时间复杂度。</li>
<li>空间复杂度：<em>O(n)</em>，额外存放日志的数组</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：16 ms, 在所有 C++ 提交中击败了23.57%的用户</p>
<p>内存消耗：12.4 MB, 在所有 C++ 提交中击败了31.52%的用户</p>
<p>通过测试用例：65 / 65</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">reorderLogFiles</span><span class="params">(vector&lt;string&gt;&amp; logs)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stable_sort</span>(logs.<span class="built_in">begin</span>(), logs.<span class="built_in">end</span>(), [&amp;](<span class="type">const</span> string &amp;a, <span class="type">const</span> string &amp;b)&#123;  <span class="comment">// stable_sort</span></span><br><span class="line">            <span class="type">int</span> x = a.<span class="built_in">find_first_of</span>(<span class="string">&quot; &quot;</span>); <span class="comment">// 找到a的第一个空格</span></span><br><span class="line">            <span class="type">int</span> y = b.<span class="built_in">find_first_of</span>(<span class="string">&quot; &quot;</span>); <span class="comment">// 找到b的第一个空格</span></span><br><span class="line">            <span class="type">bool</span> isDigital_a = <span class="built_in">isdigit</span>(a[x + <span class="number">1</span>]);</span><br><span class="line">            <span class="type">bool</span> isDigital_b = <span class="built_in">isdigit</span>(b[y + <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(isDigital_a &amp;&amp; isDigital_b)&#123;  <span class="comment">// 两个都是数字日志</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!isDigital_a &amp;&amp; !isDigital_b) &#123; <span class="comment">// 两个都是字母日志</span></span><br><span class="line">                string stra = a.<span class="built_in">substr</span>(x + <span class="number">1</span>);</span><br><span class="line">                string strb = b.<span class="built_in">substr</span>(y + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(stra != strb) <span class="keyword">return</span> stra &lt; strb;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> a &lt; b;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> isDigital_a ? <span class="literal">false</span> : <span class="literal">true</span>;  <span class="comment">// 判断a是否是数字日志，若a是数字日志，则返回false</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> logs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * log n)</em>，其中 <em>n</em> 为 <em>logs</em> 的字符数，是平均情况下内置排序的时间复杂度。</li>
<li>空间复杂度：<em>O(n)</em>，额外存放日志的数组</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：12 ms, 在所有 C++ 提交中击败了59.80%的用户</p>
<p>内存消耗：10.9 MB, 在所有 C++ 提交中击败了83.87%的用户</p>
<p>通过测试用例：65 / 65</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>LeetCode</tag>
        <tag>字符串</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>34.在排序数组中查找元素的第一个和最后一个位置</title>
    <url>/2022/05/02/LeetCode/20220502-02/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/"> 在排序数组中查找元素的第一个和最后一个位置 </a></p>
<h2 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h2>
<p><code>二分查找模板</code></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>使用二分算法的两个模板分别可以求出元素出现的第一个位置和最后一个位置。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解 1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;  <span class="comment">//第一个模板</span></span><br><span class="line">            <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt;= target) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[l] != target)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(l);</span><br><span class="line">            l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r)&#123;  <span class="comment">// 第二个模板</span></span><br><span class="line">                <span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &lt;= target) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(log n)</em>，其中 <em>n</em> 为数组的长度。二分查找的时间复杂度是<em>O(log n)</em>，一共执行两次，所以总的时间复杂度是<em>O(log n)</em></li>
<li>空间复杂度：<em>O(1)</em>，只需要常数空间存放若干变量</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4 ms, 在所有 C++ 提交中击败了93.27%的用户</p>
<p>内存消耗：13.3 MB, 在所有 C++ 提交中击败了34.09%的用户</p>
<p>通过测试用例：88 / 88</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>78.子集</title>
    <url>/2022/05/03/LeetCode/20220503-03/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode-cn.com/problems/subsets/"> 子集 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>先确定需要的子数组的大小，（从 0 到 <code>nums.size()</code> 依次遍历），然后递归进行选择，每次递归都从上一个元素的下一位置开始，直到临时数组的大小等于当前确定的所需子数组的大小，将其加入结果数组。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">    <span class="comment">// x 当前需要子集的大小， npc 应该开始位置</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> x, <span class="type">int</span> npc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == arr.<span class="built_in">size</span>())&#123; <span class="comment">// 当前子集的大小满足目前所需的大小</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(arr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = npc; i &lt; nums.<span class="built_in">size</span>(); i ++)&#123;  <span class="comment">// 从npc 开始遍历</span></span><br><span class="line">            arr.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">dfs</span>(nums, x, i + <span class="number">1</span>);</span><br><span class="line">            arr.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsets</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= nums.<span class="built_in">size</span>(); i++)&#123;  <span class="comment">// 遍历，i代表需要子集的大小，</span></span><br><span class="line">            <span class="built_in">dfs</span>(nums, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * 2 ^ n)</em>，一共 <em>2 ^ n</em> 个状态，每种状态需要 O*(<em>n</em>) 的时间来构造子集。</li>
<li>空间复杂度：<em>O</em>(<em>n</em>)。临时数组 <em>arr</em> 的空间代价是 O*(<em>n</em>)，递归时栈空间的代价为 <em>O</em>(<em>n</em>)。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4 ms, 在所有 C++ 提交中击败了43.18%的用户</p>
<p>内存消耗：7.6 MB, 在所有 C++ 提交中击败了13.53%的用户</p>
<p>通过测试用例：10 / 10</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="延伸题目"><a class="markdownIt-Anchor" href="#延伸题目"></a> 延伸题目</h2>
<p><a href="https://leetcode-cn.com/problems/subsets-ii/"> 子集 II </a></p>
<h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2>
<ul>
<li>思路1：在上面的基础上，当满足条件时使用<code>map</code> 进行去重，若重复则不加入，反之则加入。（需要先排序）</li>
<li>思路2：递归法实现子树枚举，在递归时，若发现没有选择上一个数，并且当前数字与上一个数字相同，则可以跳过当前生成的子集。</li>
</ul>
<h2 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">使用hash表</button></li><li class="tab"><button type="button" data-href="#题解-2">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;vector&lt;<span class="type">int</span>&gt;, <span class="type">int</span>&gt; hsp;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> x, <span class="type">int</span> npc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="built_in">size</span>() == x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hsp[arr] == <span class="number">1</span>) <span class="keyword">return</span>;  <span class="comment">//使用map进行判断是否有重复的</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(arr);</span><br><span class="line">            hsp[arr] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = npc; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            arr.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            <span class="built_in">dfs</span>(nums, x, i + <span class="number">1</span>);</span><br><span class="line">            arr.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= nums.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(nums, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * 2 ^ n)</em>，一共 <em>2 ^ n</em> 个状态，每种状态需要 O*(<em>n</em>) 的时间来构造子集。</li>
<li>空间复杂度：<em>O</em>(<em>n</em>)。临时数组 <em>arr</em> 的空间代价是 O*(<em>n</em>)，递归时栈空间的代价为 <em>O</em>(<em>n</em>)。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：12 ms, 在所有 C++ 提交中击败了5.73%的用户</p>
<p>内存消耗：9.5 MB, 在所有 C++ 提交中击败了13.58%的用户</p>
<p>通过测试用例：20 / 20</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> x, <span class="type">bool</span> pre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(arr);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(nums, x + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(!pre &amp;&amp; x &gt; <span class="number">0</span> &amp;&amp; nums[x] == nums[x - <span class="number">1</span>]) <span class="comment">// 上一个数和当前数相等，并且上一个数没有被加入</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        arr.<span class="built_in">push_back</span>(nums[x]);</span><br><span class="line">        <span class="built_in">dfs</span>(nums, x + <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">        arr.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">subsetsWithDup</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">dfs</span>(nums, <span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * 2 ^ n)</em>，其中 <em>n</em> 是数组 <em>nums</em> 的长度。排序的时间复杂度为 *O(n * log n) <em>。最坏情况下 <em>nums</em> 中无重复元素，需要枚举其所有 <em>2 ^ n</em> 个子集，每个子集加入答案时需要拷贝一份，耗时 <em>O(n)</em> ，一共需要 <em>O(n * 2 ^ n) + O(n) = O(n * 2 ^ n)</em> 的时间来构造子集。由于在渐进意义上 <em>O(n * log n) * 小于</em>O(n * 2 ^ n)</em> ，故总的时间复杂度为 <em>O(n * 2 ^ n)</em><br />
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</li>
<li>空间复杂度：<em>O</em>(<em>n</em>)。临时数组 <em>arr</em> 的空间代价是 O*(<em>n</em>)，递归时栈空间的代价为 <em>O</em>(<em>n</em>)。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4 ms, 在所有 C++ 提交中击败了54.66%的用户</p>
<p>内存消耗：15.6 MB, 在所有 C++ 提交中击败了5.03%的用户</p>
<p>通过测试用例：20 / 20</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>递归</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>1090.受标签影响的最大值</title>
    <url>/2022/05/03/LeetCode/20220503-02/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode-cn.com/problems/largest-values-from-labels/"> 受标签影响的最大值 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>使用<code>vector&lt;pair&lt;int, int&gt;&gt;</code> 将 <em>values</em> 和 <em>labels</em> 对应起来，然后按照 <em>values</em> 从大到小进行排序，每次在满足对应的标签没有达到上限时（使用<code>unordered_map</code>进行计数），优先取最大的即可。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; arr;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hsp;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestValsFromLabels</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; values, vector&lt;<span class="type">int</span>&gt;&amp; labels, <span class="type">int</span> numWanted, <span class="type">int</span> useLimit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; values.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            arr.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(values[i], labels[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), [](pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &amp;a, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &amp;b)&#123;  <span class="comment">// 将arr数组从大到小进行排序</span></span><br><span class="line">            <span class="keyword">return</span> a.first &gt; b.first;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>() &amp;&amp; numWanted; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hsp[arr[i].second] &lt; useLimit)&#123;</span><br><span class="line">                hsp[arr[i].second] ++;</span><br><span class="line">                res += arr[i].first;</span><br><span class="line">                numWanted--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * log n)</em>，其中 <em>n</em> 为 <em>values</em> 的大小，主要是 <code>sort()</code>函数的时间发复杂度</li>
<li>空间复杂度：<em>O(n)</em>，数组和哈希表对应的空间</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：24 ms, 在所有 C++ 提交中击败了80.30%的用户</p>
<p>内存消耗：19.8 MB, 在所有 C++ 提交中击败了65.15%的用户</p>
<p>通过测试用例：81 / 81</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>贪心</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>1823.找出游戏的获胜者</title>
    <url>/2022/05/04/LeetCode/20220504-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode-cn.com/problems/find-the-winner-of-the-circular-game/"> 找出游戏的获胜者 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>使用队列将所有数字存储起来，然后进行循环遍历直到队列中只剩一个元素，每次循环先将 k 减一，将队头元素使用临时变量保存起来，然后出队，dang k 不等于0时，将刚出队的元素再次入队，若 k 等于0，则需要更新 k 。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findTheWinner</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">            que.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> x = k;</span><br><span class="line">        <span class="keyword">while</span>(que.<span class="built_in">size</span>() &gt; <span class="number">1</span>)&#123;  <span class="comment">// 循环遍历，直到队列中只剩一人</span></span><br><span class="line">            x --;</span><br><span class="line">            <span class="type">int</span> top = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(x != <span class="number">0</span>)&#123;  <span class="comment">// 当还没到第k个，则再次入栈</span></span><br><span class="line">                que.<span class="built_in">push</span>(top);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;  <span class="comment">// 到第k个，则需要更新x，再次计数</span></span><br><span class="line">                x = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> que.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * k)</em>，其中 n 是做游戏的小伙伴数量，<em>k</em> 是每一轮离开圈子的小伙伴的计数。初始时需要将 <em>n</em> 个元素加入队列，每一轮需要将 <em>k</em> 个元素从队列中取出，将 <em>k−1</em> 个元素加入队列，一共有 <em>n−1</em> 轮，因此时间复杂度是 <em>O(n * k)</em>。</li>
<li>空间复杂度：<em>O(n)</em>，队列最多有n个元素。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：72 ms, 在所有 C++ 提交中击败了11.70%的用户</p>
<p>内存消耗：23.8 MB, 在所有 C++ 提交中击败了15.31%的用户</p>
<p>通过测试用例：95 / 95</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数学</tag>
        <tag>数组</tag>
        <tag>递归</tag>
        <tag>队列</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>933.最近请求的次数</title>
    <url>/2022/05/06/LeetCode/20220506-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<h4 id="最近的请求次数"><a class="markdownIt-Anchor" href="#最近的请求次数"></a> <a href="https://leetcode-cn.com/problems/number-of-recent-calls/"> 最近的请求次数 </a></h4>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>使用队列，每次将新的 t 加入队列，然后循环判断对头元素是否大于 t - 3000，若小于则出队，否则结束循环，最后返回队列中的元素个数即可。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RecentCounter</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="built_in">RecentCounter</span>() &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>()) que.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ping</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        que.<span class="built_in">push</span>(t);</span><br><span class="line">        <span class="keyword">while</span>(que.<span class="built_in">front</span>() &lt; t - <span class="number">3000</span>)&#123;</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> que.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RecentCounter* obj = new RecentCounter();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;ping(t);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是调用 ping 的次数</li>
<li>空间复杂度：<em>O(n)</em>，队列中元素的个数</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：144 ms, 在所有 C++ 提交中击败了32.54%的用户</p>
<p>内存消耗：56.1 MB, 在所有 C++ 提交中击败了24.97%的用户</p>
<p>通过测试用例：68 / 68</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>队列</tag>
        <tag>设计</tag>
        <tag>数据流</tag>
      </tags>
  </entry>
  <entry>
    <title>47.全排列 II</title>
    <url>/2022/05/04/LeetCode/20220504-02/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode-cn.com/problems/permutations-ii/"> 全排列 II </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>对数组进行递归，若当前元素和上一次递归选择的元素相同，则直接跳过（相当于剪枝），若当前元素不等于上一次元素且没有被选择过，则可以选择，加入数组，直到临时数组的大小等于 <code>nums</code> 数组的大小，则将该临时数据加入至结果数组中。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; used;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="built_in">size</span>() == nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(arr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">-11</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x == nums[i]) <span class="keyword">continue</span>;  <span class="comment">// 当前位置刚选过的x和当前值相等。则直接跳过</span></span><br><span class="line">            <span class="keyword">if</span>(!used[i])&#123;  <span class="comment">// 当前值没有被选择</span></span><br><span class="line">                used[i] = <span class="literal">true</span>;</span><br><span class="line">                arr.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                <span class="built_in">dfs</span>(nums, arr);</span><br><span class="line">                used[i] = <span class="literal">false</span>;</span><br><span class="line">                x = arr[arr.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">                arr.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) used.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        <span class="built_in">dfs</span>(nums, arr);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * n!)</em></li>
<li>空间复杂度：<em>O( n)</em>，结果数组中最多有 n 个元素的数组</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4 ms, 在所有 C++ 提交中击败了91.98%的用户</p>
<p>内存消耗：8.7 MB, 在所有 C++ 提交中击败了56.14%的用户</p>
<p>通过测试用例：33 / 33</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>递归</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>713.乘积小于k的子数组</title>
    <url>/2022/05/05/LeetCode/20220505-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode-cn.com/problems/subarray-product-less-than-k/"> 乘积小于 K 的子数组 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<ul>
<li>使用 <code>queue</code> 队列实现 <code>滑动窗口</code> ，当前元素入队后，若队列中总的乘积小于 k，则继续遍历下一个元素，若队列中总的乘积大于等于 k，则依次出队，直到队列中的总元素乘积小于 k，每个遍历后需要将队列中的总元素个数加至结果变量中。</li>
<li>使用两个指针代表 <code>滑动窗口</code> 的两个边界。</li>
</ul>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li><li class="tab"><button type="button" data-href="#题解-2">题解2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            que.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">            sum *= nums[i];</span><br><span class="line">            <span class="keyword">while</span>(!que.<span class="built_in">empty</span>() &amp;&amp; sum &gt;= k)&#123;</span><br><span class="line">                <span class="type">int</span> top = que.<span class="built_in">front</span>();</span><br><span class="line">                que.<span class="built_in">pop</span>();</span><br><span class="line">                sum /= top;</span><br><span class="line">            &#125;</span><br><span class="line">            res += que.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是数组 <em>nums</em> 的大小</li>
<li>空间复杂度：<em>O(n)</em>，队列最多有 <em>n</em> 个元素</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：68 ms, 在所有 C++ 提交中击败了53.23%的用户</p>
<p>内存消耗：63 MB, 在所有 C++ 提交中击败了5.26%的用户</p>
<p>通过测试用例：97 / 97</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">            sum *= nums[j];</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; sum &gt;= k)&#123;</span><br><span class="line">                sum /= nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += j - i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是数组 <em>nums</em> 的大小</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：52 ms, 在所有 C++ 提交中击败了96.72%的用户</p>
<p>内存消耗：59.8 MB, 在所有 C++ 提交中击败了65.17%的用户</p>
<p>通过测试用例：97 / 97</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>209.长度最小的子数组</title>
    <url>/2022/05/05/LeetCode/20220505-02/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/"> 长度最小的子数组 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<ul>
<li>使用双指针记录滑动窗口的左边界和右边界，当满足条件后，进行判断并记录结果。</li>
</ul>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = INT_MAX;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; sum &gt;= target)&#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, j - i + <span class="number">1</span>);  </span><br><span class="line">                sum -= nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res == INT_MAX ? <span class="number">0</span> : res;  <span class="comment">// 若是最后还没有找到区间，则为 0 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是数组 <em>nums</em> 的大小</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：8 ms, 在所有 C++ 提交中击败了61.48%的用户</p>
<p>内存消耗：10.2 MB, 在所有 C++ 提交中击败了71.05%的用户</p>
<p>通过测试用例：19 / 19</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>942.增减字符串匹配</title>
    <url>/2022/05/09/LeetCode/20220509-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/di-string-match/"> 增减字符串匹配 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>定义两个变量，<code>l</code> 表示最小值0，<code>h</code>表示最大值 <code>s.size()</code>,然后遍历当前元素，若当前元素是 <code>I</code>，则当前位置需要赋值 <code>l</code>并更新<code>l</code>的值，反之，则赋值<code>h</code>的值，并更新<code>h</code>的值。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">diStringMatch</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, h = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">&#x27;I&#x27;</span>)  <span class="comment">// 当前字符是 I 时，添加此时最小的</span></span><br><span class="line">                res[i] = l ++;</span><br><span class="line">            <span class="keyword">else</span>  <span class="comment">// 当前字符是 D 时，添加此时最大的</span></span><br><span class="line">                res[i] = h --;</span><br><span class="line">        &#125;</span><br><span class="line">        res[n] = l; <span class="comment">// 添加最后一个数</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是字符串 s 的长度</li>
<li>空间复杂度：<em>O(1)</em>，数组长度 为 <em>n + 1</em>，但返回值不计入空间复杂度</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4 ms, 在所有 C++ 提交中击败了88.53%的用户</p>
<p>内存消耗：8.4 MB, 在所有 C++ 提交中击败了73.80%的用户</p>
<p>通过测试用例：95 / 95</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数学</tag>
        <tag>字符串</tag>
        <tag>数组</tag>
        <tag>贪心</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>442.数组中的重复数据</title>
    <url>/2022/05/10/LeetCode/20220510-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/find-all-duplicates-in-an-array/"> 数组中重复的数据 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>使用 <code>unordered_map</code> 保存每个整数出现的次数，最后遍历一遍哈希表，将整数出现次数为 2 的整数存入结果数组中。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hsp;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            hsp[nums[i]] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = hsp.<span class="built_in">begin</span>(); it != hsp.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == <span class="number">2</span>)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(it-&gt;first);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是数组 <em>nums</em> 的长度</li>
<li>空间复杂度：<em>O(n)</em>，定义的哈希表的大小</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：68 ms, 在所有 C++ 提交中击败了19.03%的用户</p>
<p>内存消耗：43.5 MB, 在所有 C++ 提交中击败了9.79%的用户</p>
<p>通过测试用例：28 / 28</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>449.序列化和反序列化二叉搜索树</title>
    <url>/2022/05/11/LeetCode/20220511-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/serialize-and-deserialize-bst/"> 序列化和反序列化二叉搜索树</a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p><strong>后序遍历</strong>：二叉搜索树可根据后序遍历的结果将其恢复。</p>
<p>序列化：只需要对二叉搜索树进行后序遍历，再将数组编码成字符串即可。</p>
<p>反序列化时，需要先将字符串解码成后序遍历的数组。在将后序遍历的数组恢复成二叉搜索树时，不需要先排序得到中序遍历的数组再根据中序和后序遍历的数组来恢复二叉树，而可以根据有序性直接由后序遍历的数组恢复二叉搜索树。后序遍历得到的数组中，根结点的值位于数组末尾，左子树的节点均小于根节点的值，右子树的节点均大于根节点的值，可以根据这些性质设计递归函数恢复二叉搜索树。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function">string <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        <span class="built_in">postTraversal</span>(root, arr);</span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            res += <span class="built_in">to_string</span>(arr[i]) + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">substr</span>(<span class="number">0</span>, res.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">postTraversal</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt; &amp;arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="built_in">postTraversal</span>(root-&gt;left, arr);</span><br><span class="line">        <span class="built_in">postTraversal</span>(root-&gt;right, arr);</span><br><span class="line">        arr.<span class="built_in">emplace_back</span>(root-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(string data)</span> </span>&#123;</span><br><span class="line">        TreeNode* root;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        <span class="built_in">transArr</span>(data, arr);</span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            root = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// int n = arr.size();</span></span><br><span class="line">        <span class="comment">// root-&gt;val = arr[n - 1];</span></span><br><span class="line">        root = <span class="built_in">dfs</span>(arr);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transArr</span><span class="params">(string data, vector&lt;<span class="type">int</span>&gt; &amp;arr)</span></span>&#123;  <span class="comment">// 将string 拆分为整数数组</span></span><br><span class="line">        <span class="type">int</span> npc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; data.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == data.<span class="built_in">size</span>() - <span class="number">1</span>)&#123;</span><br><span class="line">                string str = data.<span class="built_in">substr</span>(npc, i - npc + <span class="number">1</span>);</span><br><span class="line">                arr.<span class="built_in">emplace_back</span>(<span class="built_in">stoi</span>(str));</span><br><span class="line">                npc = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(data[i] == <span class="string">&#x27;,&#x27;</span>)&#123;</span><br><span class="line">                string str = data.<span class="built_in">substr</span>(npc, i - npc);</span><br><span class="line">                arr.<span class="built_in">emplace_back</span>(<span class="built_in">stoi</span>(str));</span><br><span class="line">                npc = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.<span class="built_in">size</span>() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> npc = arr[n - <span class="number">1</span>];</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(npc);</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">find</span>(arr, npc); <span class="comment">// 寻找最后一个小于 根节点的下标，则x左边的都是该节点的左子树，右边的都是该节点的右子树</span></span><br><span class="line">        <span class="keyword">if</span>(x &gt;= <span class="number">0</span>)&#123;  </span><br><span class="line">            root-&gt;left = <span class="built_in">dfs</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">begin</span>() + x));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= n - <span class="number">2</span>)&#123;</span><br><span class="line">            root-&gt; right = <span class="built_in">dfs</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(arr.<span class="built_in">begin</span>() + x, arr.<span class="built_in">begin</span>() + n - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(vector&lt;<span class="type">int</span>&gt; arr, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>() - <span class="number">1</span>; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; x)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec* ser = new Codec();</span></span><br><span class="line"><span class="comment">// Codec* deser = new Codec();</span></span><br><span class="line"><span class="comment">// string tree = ser-&gt;serialize(root);</span></span><br><span class="line"><span class="comment">// TreeNode* ans = deser-&gt;deserialize(tree);</span></span><br><span class="line"><span class="comment">// return ans;</span></span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是树的节点个数，<em>serialize</em> 需要 <em>O(n)</em> 时间遍历每个点。<em>deserialize</em> 需要 <em>O(n)</em> 时间恢复每个点</li>
<li>空间复杂度：<em>O(n)</em>，其中 <em>n</em> 是树的节点个数，<em>serialize</em> 需要 <em>O(n)</em> 空间数组保存每个点的值，递归的深度最深也为 <em>O(n)</em>。<em>deserialize</em> 需要 <em>O(n)</em> 空间用数组保存每个点的值，递归的深度最深也为 <em>O(n)</em>。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：36 ms, 在所有 C++ 提交中击败了44.95%的用户</p>
<p>内存消耗：36.3 MB, 在所有 C++ 提交中击败了12.22%的用户</p>
<p>通过测试用例：62 / 62</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二叉搜索树</tag>
        <tag>深度优先搜索</tag>
        <tag>字符串</tag>
        <tag>设计</tag>
        <tag>树</tag>
        <tag>广度优先搜索</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>944.删列造序</title>
    <url>/2022/05/12/LeetCode/20220512-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/delete-columns-to-make-sorted/"> 删列造序 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>暴力解法：遍历二维数组，先遍历列，再遍历行。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDeletionSize</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; strs.<span class="built_in">size</span>(); j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(strs[j][i] &lt; strs[j - <span class="number">1</span>][i])&#123;</span><br><span class="line">                    res ++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * m)</em>，其中 <em>n</em> 是字符串的个数，m是每个字符串的长度</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：36 ms, 在所有 C++ 提交中击败了68.31%的用户</p>
<p>内存消耗：11.9 MB, 在所有 C++ 提交中击败了33.14%的用户</p>
<p>通过测试用例：85 / 85</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>字符串</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 01.05.一次编辑</title>
    <url>/2022/05/13/LeetCode/20220513-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/one-away-lcci/"> 一次编辑 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>分类讨论：</p>
<ul>
<li>当两个字符串相等时，直接返回 <code>True</code></li>
<li>当两个字符串的长度相差超过2时，直接返回 <code>False</code></li>
<li>当两个字符串长度相差为 1 时，则调用函数判断是否只存在一处编辑</li>
<li>当两个字符串长度相等时，遍历一遍字符串，判断每个位置的字符是否相等，若不相等的个数大于 1 时，则返回 <code>False</code> ，否则返回 <code>True</code></li>
</ul>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// a 是较大的字符串，b是较小的字符串</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isDelete</span><span class="params">(string a, string b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string str = a;</span><br><span class="line">            str.<span class="built_in">erase</span>(i, <span class="number">1</span>);  <span class="comment">// 删除一个字符</span></span><br><span class="line">            <span class="keyword">if</span>(str == b) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">oneEditAway</span><span class="params">(string first, string second)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> firstLen = first.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> secondLen = second.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(first == second) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(firstLen - secondLen) &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(firstLen - secondLen) == <span class="number">1</span>) &#123; <span class="comment">// 插入或者删除一个字符</span></span><br><span class="line">            <span class="keyword">if</span>(firstLen &gt; secondLen)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">isDelete</span>(first, second);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">isDelete</span>(second, first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; first.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(first[i] != second[i])&#123;</span><br><span class="line">                    num ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> num == <span class="number">1</span> || num == <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是字符串的长度，最多遍历一遍字符串</li>
<li>空间复杂度：<em>O(n)</em>，判断是否删除时，需要找一个临时变量存储字符串</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：6.2 MB, 在所有 C++ 提交中击败了19.66%的用户</p>
<p>通过测试用例：1146 / 1146</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>字符串</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>82.删除排序链表中的重复元素 II</title>
    <url>/2022/05/14/LeetCode/20220514-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/"> 删除排序链表中的重复元素 II </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>首先再原有的链表前面插入一个新的节点，可以减少头指针变化。若 <code>cur-&gt;next-&gt;val == cur-&gt;next-&gt;next-&gt;val</code> 则删除 <code>cur-&gt;next</code>,然后依次判断，将所有重复的节点全部删除。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode* cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(cur-&gt;next &amp;&amp; cur-&gt;next-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next-&gt;val == cur-&gt;next-&gt;next-&gt;val)&#123;</span><br><span class="line">                <span class="type">int</span> x = cur-&gt;next-&gt;val;  <span class="comment">// 记录下一节点的值</span></span><br><span class="line">                <span class="keyword">while</span> (cur-&gt;next &amp;&amp; cur-&gt;next-&gt;val == x) &#123; <span class="comment">// 循环删除和下一节点值相等的所有节点</span></span><br><span class="line">                    cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是链表中节点的个数，最多遍历一遍链表</li>
<li>空间复杂度：<em>O(n)</em>，使用新的链表进行遍历</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4 ms, 在所有 C++ 提交中击败了92.06%的用户</p>
<p>内存消耗：10.8 MB, 在所有 C++ 提交中击败了65.46%的用户</p>
<p>通过测试用例：166 / 166</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>双指针</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>812.最大三角形面积</title>
    <url>/2022/05/15/LeetCode/20220515-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/largest-triangle-area/"> 最大三角形面积 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>暴力解法：三重循环。主要是计算三角形面积的公式</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">triangleArea</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> x3, <span class="type">int</span> y3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> * <span class="built_in">abs</span>(x1 * y2 + x2 * y3 + x3 * y1 - x1 * y3 - x2 * y1 - x3 * y2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">largestTriangleArea</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = points.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">double</span> ret = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j + <span class="number">1</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    ret = <span class="built_in">max</span>(ret, <span class="built_in">triangleArea</span>(points[i][<span class="number">0</span>], points[i][<span class="number">1</span>], points[j][<span class="number">0</span>], points[j][<span class="number">1</span>], points[k][<span class="number">0</span>], points[k][<span class="number">1</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n ^ 3)</em>，其中 <em>n</em> 是数组中元素的个数</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：8 ms, 在所有 C++ 提交中击败了78.81%的用户</p>
<p>内存消耗：7.4 MB, 在所有 C++ 提交中击败了54.24%的用户</p>
<p>通过测试用例：57 / 57</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数学</tag>
        <tag>数组</tag>
        <tag>几何</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题 04.06.后继者</title>
    <url>/2022/05/16/LeetCode/20220516-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/successor-lcci/"> 后继者 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>直接进行中序遍历，当找到指定节点时，让 <code>loop = true</code>，然后继续递归，若<code>loop &amp;&amp; !res</code> 时，则赋值，否则 <code>return</code></p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode *res = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">bool</span> loop = <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">InorderTra</span><span class="params">(TreeNode *root, TreeNode* p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">InorderTra</span>(root-&gt;left, p);</span><br><span class="line">        <span class="keyword">if</span>(loop)&#123;  <span class="comment">// 已经找到指定节点</span></span><br><span class="line">            <span class="keyword">if</span>(res == <span class="literal">NULL</span>)  <span class="comment">// 下一节点还没确定</span></span><br><span class="line">                res = root;</span><br><span class="line">            <span class="keyword">else</span>  <span class="comment">// 下一节点已经确定</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root == p) loop = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">InorderTra</span>(root-&gt;right, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">inorderSuccessor</span><span class="params">(TreeNode* root, TreeNode* p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">InorderTra</span>(root, p);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是二叉树中节点的个数</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：20 ms, 在所有 C++ 提交中击败了98.29%的用户</p>
<p>内存消耗：22.2 MB, 在所有 C++ 提交中击败了83.77%的用户</p>
<p>通过测试用例：24 / 24</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>二叉搜索树</tag>
        <tag>深度优先搜索</tag>
        <tag>树</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>953.验证外星语词典</title>
    <url>/2022/05/17/LeetCode/20220517-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/verifying-an-alien-dictionary/"> 验证外星语词典 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>暴力解法：将 <code>words</code>中的单词按照 <code>order</code> 的字典序进行排序后与原数组进行对比，若相同则返回 <code>true</code>，若存在不同则返回 <code>false</code></p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAlienSorted</span><span class="params">(vector&lt;string&gt;&amp; words, string order)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; hsp;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; order.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            hsp[order[i]] = num ++;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;string&gt; arr;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; words.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            arr.<span class="built_in">emplace_back</span>(words[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>(), [&amp;](string &amp;a, string &amp;b)&#123;</span><br><span class="line">            <span class="type">int</span> len_a = a.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> len_b = b.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">min</span>(len_a, len_b);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i] == b[i]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">return</span> hsp[a[i]] &lt; hsp[b[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> len_a &lt; len_b;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] != words[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * logn)</em>，其中 <em>n</em> 是数组中元素的个数</li>
<li>空间复杂度：<em>O(n)</em>，需要另外一个数组保存排序后的words</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：8 ms, 在所有 C++ 提交中击败了28.37%的用户</p>
<p>内存消耗：10.1 MB, 在所有 C++ 提交中击败了5.05%的用户</p>
<p>通过测试用例：120 / 120</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>字符串</tag>
        <tag>数组</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>462.最少移动次数使数组元素相等 II</title>
    <url>/2022/05/19/LeetCode/20220519-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/minimum-moves-to-equal-array-elements-ii/"> 最少移动次数使数组元素相等 II </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>排序后寻找中间位置的值，如果数组元素个数是奇数，则直接取中间值，如果是偶数，则取中间两值的平均值，然后遍历一遍数组，每次计算当前元素和中间值差的绝对值并加入到结果中。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span>) &#123; <span class="comment">// 奇数</span></span><br><span class="line">            x = nums[n / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> r = nums[n / <span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> l = nums[n / <span class="number">2</span> - <span class="number">1</span>];</span><br><span class="line">            x = (r + l) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            res += <span class="built_in">abs</span>(nums[i] - x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * logn)</em>，其中 <em>n</em> 是数组中元素的个数，排序时间复杂度是<em>O(n * logn)</em>，计算时间复杂度是<em>O(n)</em>，所以总的时间复杂度是<em>O(n * logn)</em></li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：8 ms, 在所有 C++ 提交中击败了88.62%的用户</p>
<p>内存消耗：10.7 MB, 在所有 C++ 提交中击败了11.78%的用户</p>
<p>通过测试用例：30 / 30</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>LeetCode</tag>
        <tag>数学</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>961.在长度 2N 的数组中找出重复 N 次的元素</title>
    <url>/2022/05/21/LeetCode/20220521-01/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/n-repeated-element-in-size-2n-array/"> 在长度 2N 的数组中找出重复 N 次的元素 </a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>利用哈希表统计每个数字出现的次数，若次数等于 <code>nums.size() / 2</code>则返回该数字。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">repeatedNTimes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hsp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            hsp[nums[i]] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = hsp.<span class="built_in">begin</span>(); it != hsp.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second == n)</span><br><span class="line">                <span class="keyword">return</span> it-&gt;first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 是数组中元素的个数</li>
<li>空间复杂度：<em>O(n)</em>，</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：44 ms, 在所有 C++ 提交中击败了28.13%的用户</p>
<p>内存消耗：29.4 MB, 在所有 C++ 提交中击败了25.96%的用户</p>
<p>通过测试用例：102 / 102</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>473.火柴拼正方形⭐</title>
    <url>/2022/06/01/LeetCode/20220601/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<h4 id="火柴拼正方形"><a class="markdownIt-Anchor" href="#火柴拼正方形"></a> <a href="https://leetcode.cn/problems/matchsticks-to-square/"> 火柴拼正方形 </a></h4>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>为了减少搜索量，需要对火柴长度从大到小进行排序。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> index, vector&lt;<span class="type">int</span>&gt; &amp;matchsticks, vector&lt;<span class="type">int</span>&gt; &amp;edges, <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == matchsticks.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edges.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            edges[i] += matchsticks[index];</span><br><span class="line">            <span class="keyword">if</span> (edges[i] &lt;= len &amp;&amp; <span class="built_in">dfs</span>(index + <span class="number">1</span>, matchsticks, edges, len)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            edges[i] -= matchsticks[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">makesquare</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;matchsticks)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> totalLen = <span class="built_in">accumulate</span>(matchsticks.<span class="built_in">begin</span>(), matchsticks.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (totalLen % <span class="number">4</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(matchsticks.<span class="built_in">begin</span>(), matchsticks.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;()); <span class="comment">// 减少搜索量</span></span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">edges</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>, matchsticks, edges, totalLen / <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(4 ^ n)</em>，其中 <em>n</em> 是数组中元素的个数</li>
<li>空间复杂度：<em>O(n)</em>，递归栈需要占 <em>O(n)</em> 的空间</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：248 ms, 在所有 C++ 提交中击败了20.09%的用户</p>
<p>内存消耗：9.6 MB, 在所有 C++ 提交中击败了76.84%的用户</p>
<p>通过测试用例：185 / 185</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>动态规划</tag>
        <tag>数组</tag>
        <tag>回溯</tag>
        <tag>位运算</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>498.对角线遍历</title>
    <url>/2022/06/14/LeetCode/20220614/</url>
    <content><![CDATA[<h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2>
<p><a href="https://leetcode.cn/problems/diagonal-traverse/">对角线遍历</a></p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<p>进行模拟，有向右上和左下两个方向的区别。分别找出在边界需要改变的坐标方法。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findDiagonalOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="type">int</span> row = mat.<span class="built_in">size</span>(), col = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            cout &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;      &quot;</span> &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">            res.<span class="built_in">push_back</span>(mat[x][y]);</span><br><span class="line">            <span class="keyword">if</span> (x == row - <span class="number">1</span> &amp;&amp; y == col - <span class="number">1</span> ) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(flag) &#123;  <span class="comment">// flag 为true时向右上角</span></span><br><span class="line">                <span class="keyword">if</span>(y == col - <span class="number">1</span>)&#123;</span><br><span class="line">                    x ++;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">0</span>) &#123;</span><br><span class="line">                    y ++;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    x --;</span><br><span class="line">                    y ++;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(x == row - <span class="number">1</span>) &#123;</span><br><span class="line">                    y ++;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">                    x ++;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    x ++;</span><br><span class="line">                    y --;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n + m)</em>，其中 <em>n</em> 是数组行数，m是数组列数</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：104 ms, 在所有 C++ 提交中击败了8.27%的用户</p>
<p>内存消耗：17.8 MB, 在所有 C++ 提交中击败了78.97%的用户</p>
<p>通过测试用例：32 / 32</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>数组</tag>
        <tag>模拟</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 第291场周赛</title>
    <url>/2022/05/02/LeetCode/291WeeklyCompetition/</url>
    <content><![CDATA[<h2 id="题目-1移除指定数字得到的最大结果"><a class="markdownIt-Anchor" href="#题目-1移除指定数字得到的最大结果"></a> 题目 1：移除指定数字得到的最大结果</h2>
<p><a href="https://leetcode-cn.com/problems/remove-digit-from-number-to-maximize-result/"> 移除指定数字得到的最大结果 </a></p>
<h3 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h3>
<p><code>字符串</code></p>
<h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3>
<p>遍历一遍字符串，当遇到指定字符时，使用 <code>erase</code> 函数删除该字符，然后使用 <code>compare()</code>函数进行字符串比较，因为字符串的长度都是相等的，所以就相当于比较的是对应整型的大小。最后保存最大的即可。</p>
<h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDigit</span><span class="params">(string number, <span class="type">char</span> digit)</span> </span>&#123;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; number.<span class="built_in">length</span>(); i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(number[i] == digit)&#123;</span><br><span class="line">                string str = number;  <span class="comment">// 用于临时保存原来的string</span></span><br><span class="line">                str.<span class="built_in">erase</span>(i, <span class="number">1</span>); <span class="comment">// 删除该字符，从i开始删除，删除1个字符</span></span><br><span class="line">                <span class="keyword">if</span>(res == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                    res = str;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(res.<span class="built_in">compare</span>(str) &lt; <span class="number">0</span>)&#123;  <span class="comment">// 比较字符串大小</span></span><br><span class="line">                    res = str;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n ^ 2)</em>，其中 <em>n</em> 为 <em>number</em> 的长度，我们只需要对 <em>number</em> 进行一次遍历，但是<code>erase</code>函数的时间复杂度为<em>O(n)</em>。</li>
<li>空间复杂度：<em>O(n)</em>，即为存储标结果需要使用的空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：6.4 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>通过测试用例：112 / 112</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目-2必须拿起的最小连续卡牌数"><a class="markdownIt-Anchor" href="#题目-2必须拿起的最小连续卡牌数"></a> 题目 2：必须拿起的最小连续卡牌数</h2>
<p><a href="https://leetcode-cn.com/problems/minimum-consecutive-cards-to-pick-up/"> 必须拿起的最小连续卡牌数 </a></p>
<h3 id="标签-2"><a class="markdownIt-Anchor" href="#标签-2"></a> 标签</h3>
<p><code>队列</code>、<code>哈希表</code></p>
<h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3>
<p>使用队列存储元素，若将要加入的元素已经存在于队列中，则开始出队，知道队列中不存在该元素，然后和<code>res</code>比较大小，若<code>res</code>大于队列元素个数 加 2（因为此时当前元素还没加入，并且和其相同的元素也已经出队了，所以需要加 2）。然后将当前元素入队，继续往后遍历。</p>
<p>判断当前元素是否存在于队列中需要使用<code>unordered_map&lt;int, int&gt;</code>哈希表进行存储，表示 K 在哈希表中的个数为 V 。</p>
<h3 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumCardPickup</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cards)</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que; <span class="comment">// 队列</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hsp;  <span class="comment">// 哈希表</span></span><br><span class="line">        que.<span class="built_in">push</span>(cards[<span class="number">0</span>]);</span><br><span class="line">        hsp[cards[<span class="number">0</span>]] ++;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; cards.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(hsp[cards[i]] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span>(hsp[cards[i]] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> top = que.<span class="built_in">front</span>();</span><br><span class="line">                    hsp[top] --;</span><br><span class="line">                    que.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(res == <span class="number">-1</span> || res &gt; (que.<span class="built_in">size</span>() + <span class="number">2</span>)) res = que.<span class="built_in">size</span>() + <span class="number">2</span>;</span><br><span class="line">                hsp[cards[i]] ++;</span><br><span class="line">                que.<span class="built_in">push</span>(cards[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                hsp[cards[i]] ++;</span><br><span class="line">                que.<span class="built_in">push</span>(cards[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为 <em>cards</em> 的长度，我们只需要对 <em>cards</em> 进行一次遍历.</li>
<li>空间复杂度：<em>O(2 * n)</em>，即为队列和哈希表所需要的空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：372 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：116.4 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>通过测试用例：78 / 78</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目-3含最多-k-个可整除元素的子数组"><a class="markdownIt-Anchor" href="#题目-3含最多-k-个可整除元素的子数组"></a> 题目 3：含最多 K 个可整除元素的子数组 ⭐</h2>
<p><a href="https://leetcode-cn.com/problems/k-divisible-elements-subarrays/"> 含最多 K 个可整除元素的子数组 </a></p>
<h3 id="标签-3"><a class="markdownIt-Anchor" href="#标签-3"></a> 标签</h3>
<p><code>哈希表</code>、<code>字符串</code></p>
<h3 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h3>
<p>对 <code>nums</code> 数组进行双重循环，第一重确定开始的位置*（0 ~ nums.size() - 1）* ，然后依次遍历数组，使用整型变量 <em>count</em> 记录出现能整除 <em>p</em> 的个数，当 <em>count</em> 大于 <em>k</em> 时，就跳出循环。否则将该元素转为字符串加入 <em>str</em> 中，<strong>注意</strong>  需要在每个数后面加个 <code>,</code>，是为了防止出现连续加入 1,9和直接加入19造成的歧义。最后将<em>str</em> 直接加入<code>unordered_map</code> 中进行去重。最后结果为<code>unordered_map</code>的个数。</p>
<p>去重也可以使用<code>map&lt;vector&lt;int&gt;, int&gt;</code></p>
<h3 id="unordered_map-和-map-的区别"><a class="markdownIt-Anchor" href="#unordered_map-和-map-的区别"></a> unordered_map 和 map 的区别</h3>
<ul>
<li><code>map</code>，<code>set</code>底层是红黑树，有序的，存储的数据类型可以自定义，空间时间复杂度比较高</li>
<li><code>unordered_map</code>，<code>unordered_set</code>底层实现的时哈希表，无序存储，查询、插入时间空间复杂度比较低（相较于上面两个），但是缺点就是数据类型只能是基本数据类型，比如：<code>int</code>，<code>char</code>，<code>float</code>，<code>string</code>等。</li>
</ul>
<h3 id="题解-3"><a class="markdownIt-Anchor" href="#题解-3"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">使用unordered_map</button></li><li class="tab"><button type="button" data-href="#题解-2">使用map</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countDistinct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; hsp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;  <span class="comment">// 记录能被p整除的个数</span></span><br><span class="line">            string str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; nums.<span class="built_in">size</span>(); j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] % p == <span class="number">0</span>) count ++;</span><br><span class="line">                <span class="keyword">if</span>(count &gt; k) <span class="keyword">break</span>;</span><br><span class="line">                str += <span class="built_in">to_string</span>(nums[j]); <span class="comment">// 将整型转为string类型，并添加到str中</span></span><br><span class="line">                str += <span class="string">&quot;,&quot;</span>; <span class="comment">// 防止出现 1 9  和 19 一样的情况</span></span><br><span class="line">                hsp[str] ++;  <span class="comment">// 使用unordered_map进行去重</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; hsp.size() &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hsp.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n ^ 2)</em>，其中 <em>n</em> 为 <em>nums</em> 的长度</li>
<li>空间复杂度：<em>O((1 + n) * n / 2)</em>，即为 <em>unordered_map</em> 做多需要使用的空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：492 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：204.6 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>通过测试用例：129 / 129</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countDistinct</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        map&lt;vector&lt;<span class="type">int</span>&gt;, <span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;  <span class="comment">// 记录能被p整除的个数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; nums.<span class="built_in">size</span>(); j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] % p == <span class="number">0</span>) count ++;</span><br><span class="line">                <span class="keyword">if</span>(count &gt; k) <span class="keyword">break</span>;</span><br><span class="line">                res[<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(nums.<span class="built_in">begin</span>() + i, nums.<span class="built_in">begin</span>() + j + <span class="number">1</span>)] = <span class="number">1</span>; <span class="comment">// 添加入map</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; hsp.size() &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n ^ 2)</em>，其中 <em>n</em> 为 <em>nums</em> 的长度</li>
<li>空间复杂度：<em>O((1 + n) * n / 2)</em>，即为 <em>map</em> 做多需要使用的空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：1220 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：261 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>通过测试用例：129 / 129</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目-4字符串的总引力"><a class="markdownIt-Anchor" href="#题目-4字符串的总引力"></a> 题目 4：字符串的总引力 ⭐⭐</h2>
<p><a href="https://leetcode-cn.com/problems/total-appeal-of-a-string/"> 字符串的总引力 </a></p>
<h3 id="标签-4"><a class="markdownIt-Anchor" href="#标签-4"></a> 标签</h3>
<p><code>字符串</code>、<code>哈希表</code>、<code>动态规划</code></p>
<h3 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h3>
<p>分类讨论：</p>
<ul>
<li>如果 <em>s[i]</em> 之前没有遇到过，那么致谢子串的引力值都会增加 1，这些子串的引力值之和会增加 i，再加上1，即 <em>s[i]</em> 单独组成的子串的引力值。</li>
<li>如果 <em>s[i]</em> 之前遇到过，设其上次出现的下标为 <em>j</em>，那么向子串 <code>s[0...i - 1], s[1...i - 1], s[2...i - 1], ..., s[j...i - 1]</code> 的末尾添加<code>s[i]</code>后，这些子串的引力值是不会变化的，因为 <code>s[i]</code> 已经在 <code>s[j]</code> 出现过了；而子串<code>s[j + 1 .. i - 1], s[j + 2 .. i - 1], .. ,s[i - 1 .. i - 1]</code>由于不包含 <code>s[i]</code>,这些子串的引力值都会增加 1，因此有 <code>i - j - 1</code>个子串的引力值会增加 1，这些子串的引力值之和会增加 <code>i - j -1</code>，在加上 1，即 <code>s[i]</code> 单独组成的子串的引力值。</li>
</ul>
<h3 id="题解-4"><a class="markdownIt-Anchor" href="#题解-4"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">appealSum</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pos</span><span class="params">(<span class="number">26</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, sum = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="type">int</span> a = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            sum += i - pos[a];</span><br><span class="line">            res += sum;</span><br><span class="line">            pos[a] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为 <em>s</em> 的长度。</li>
<li>空间复杂度：<em>O(∣Σ∣)</em>，其中 <em>∣Σ∣</em> 为字符集合的大小，本题中字符均为小写字母，所以 <em>∣Σ∣=26</em>。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：20 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：10.4 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>通过测试用例：76 / 76</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 第292场周赛</title>
    <url>/2022/05/09/LeetCode/292WeeklyCompetition/</url>
    <content><![CDATA[<h2 id="题目1字符串中最大的-3-位相同数字"><a class="markdownIt-Anchor" href="#题目1字符串中最大的-3-位相同数字"></a> 题目1：字符串中最大的 3 位相同数字</h2>
<p><a href="https://leetcode.cn/problems/largest-3-same-digit-number-in-string/"> 字符串中最大的 3 位相同数字 </a></p>
<h3 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h3>
<p><code>字符串</code></p>
<h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3>
<p>遍历一遍数组，每次从第 i 个位置截取长度为 3 字符串，然后判断字符串是否符合要求，若符合，则更新结果。</p>
<h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">largestGoodInteger</span><span class="params">(string num)</span> </span>&#123;</span><br><span class="line">        string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num.<span class="built_in">size</span>() - <span class="number">2</span>; i ++)&#123;</span><br><span class="line">            string str = num.<span class="built_in">substr</span>(i, <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>] == str[<span class="number">1</span>] &amp;&amp; str[<span class="number">1</span>] == str[<span class="number">2</span>] &amp;&amp; res &lt; str)&#123;</span><br><span class="line">                res = str;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为 字符串 <em>num</em> 的长度</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：6.4 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>通过测试用例：140 / 140</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2统计值等于子树平均值的节点数"><a class="markdownIt-Anchor" href="#题目2统计值等于子树平均值的节点数"></a> 题目2：统计值等于子树平均值的节点数</h2>
<p><a href="https://leetcode.cn/problems/count-nodes-equal-to-average-of-subtree/"> 统计值等于子树平均值的节点数 </a></p>
<h3 id="标签-2"><a class="markdownIt-Anchor" href="#标签-2"></a> 标签</h3>
<p><code>二叉树</code>、<code>后序遍历</code>、<code>pair</code></p>
<h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3>
<ol>
<li>递归函数与返回值
<ul>
<li>用pair&lt;int,int&gt;作为返回值记录以当前节点为根的子树的总值与节点个数</li>
<li><code>pair&lt;int,int&gt; getAvgVal(TreeNode* root)&#123;&#125;</code></li>
</ul>
</li>
<li>递归函数出口
<ul>
<li>如果遇到空节点 返回{0,0}</li>
<li><code>if(root==nullptr) return &#123;0,0&#125;;</code></li>
</ul>
</li>
<li>单层递归逻辑
<ul>
<li>用l_pair接住遍历过程中左子树的 pair&lt;&gt;;</li>
<li>用r_pair接住遍历过程中右子树的 pair&lt;&gt;;</li>
<li>计算当前节点的 pair&lt;&gt;;</li>
<li>判断当前节点是否符合条件，++ans;</li>
<li>返回当前节点的 pair&lt;&gt;;</li>
</ul>
</li>
</ol>
<h3 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 总数，个数</span></span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">getAvgVal</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pair_l = <span class="built_in">getAvgVal</span>(root-&gt;left);</span><br><span class="line">        pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pair_r = <span class="built_in">getAvgVal</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum = pair_l.first + pair_r.first + root-&gt;val;</span><br><span class="line">        <span class="type">int</span> count = pair_l.second + pair_r.second + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; cur = &#123;sum, count&#125;;</span><br><span class="line">        <span class="keyword">if</span>(sum / count == root-&gt;val) res++;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">averageOfSubtree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; per = <span class="built_in">getAvgVal</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为 二叉树中的节点个数</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：6.4 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>通过测试用例：140 / 140</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目3统计打字方案数"><a class="markdownIt-Anchor" href="#题目3统计打字方案数"></a> 题目3：统计打字方案数</h2>
<p><a href="https://leetcode.cn/problems/count-number-of-texts/"> 统计打字方案数 </a></p>
<h2 id="题目4检查是否有合法括号字符串路径"><a class="markdownIt-Anchor" href="#题目4检查是否有合法括号字符串路径"></a> 题目4：检查是否有合法括号字符串路径</h2>
<p><a href="https://leetcode.cn/problems/check-if-there-is-a-valid-parentheses-string-path/"> 检查是否有合法括号字符串路径 </a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 第293场周赛</title>
    <url>/2022/05/16/LeetCode/293WeeklyCompetition/</url>
    <content><![CDATA[<h2 id="题目1移除字母异位词后的结果数组"><a class="markdownIt-Anchor" href="#题目1移除字母异位词后的结果数组"></a> 题目1：移除字母异位词后的结果数组</h2>
<p><a href="https://leetcode.cn/problems/find-resultant-array-after-removing-anagrams/"> 移除字母异位词后的结果数组 </a></p>
<h3 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h3>
<p><code>排序</code>、<code>数组</code>、<code>字符串</code></p>
<h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3>
<p>先将 <code>words</code> 中的每个字符串进行排序，然后逆序遍历，若当前字符串和前一字符串相等，则删除<strong>原数组</strong>中的该位置的字符串。最后返回原数组</p>
<h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">removeAnagrams</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; arr;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; words.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string str = words[i];</span><br><span class="line">            <span class="built_in">sort</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>());</span><br><span class="line">            arr.<span class="built_in">emplace_back</span>(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = arr.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i --)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == arr[i - <span class="number">1</span>])&#123;</span><br><span class="line">                words.<span class="built_in">erase</span>(words.<span class="built_in">begin</span>() + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> words;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为数组 <code>words</code> 的大小</li>
<li>空间复杂度：<em>O(n)</em>，保存每个字符串排序后的数组</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：13.2 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>通过测试用例：201 / 201</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2不含特殊楼层的最大连续楼层数"><a class="markdownIt-Anchor" href="#题目2不含特殊楼层的最大连续楼层数"></a> 题目2：不含特殊楼层的最大连续楼层数</h2>
<p><a href="https://leetcode.cn/problems/maximum-consecutive-floors-without-special-floors/"> 不含特殊楼层的最大连续楼层数 </a></p>
<h3 id="标签-2"><a class="markdownIt-Anchor" href="#标签-2"></a> 标签</h3>
<p><code>数组</code>、<code>排序</code>、<code>数学</code></p>
<h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3>
<p>将特殊楼层数组 <code>special</code> 进行排序，然后分别计算每两个特殊楼层之间的楼层数，取最大值。然后再和两端的楼层数作比较，取最大值。</p>
<h3 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxConsecutive</span><span class="params">(<span class="type">int</span> bottom, <span class="type">int</span> top, vector&lt;<span class="type">int</span>&gt;&amp; special)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(special.<span class="built_in">begin</span>(), special.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = special.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; special.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, special[i] - special[i - <span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 两端的楼层计算</span></span><br><span class="line">        res = <span class="built_in">max</span>(res, special[<span class="number">0</span>] - bottom);</span><br><span class="line">        res = <span class="built_in">max</span>(res, top - special[n - <span class="number">1</span>]); </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为数组 <code>special</code> 的大小</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：176 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：56.7 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>通过测试用例：80 / 80</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目3按位与结果大于零的最长组合"><a class="markdownIt-Anchor" href="#题目3按位与结果大于零的最长组合"></a> 题目3：按位与结果大于零的最长组合</h2>
<p><a href="https://leetcode.cn/problems/largest-combination-with-bitwise-and-greater-than-zero/"> 按位与结果大于零的最长组合 </a></p>
<h2 id="题目4统计区间中的整数数目"><a class="markdownIt-Anchor" href="#题目4统计区间中的整数数目"></a> 题目4：统计区间中的整数数目</h2>
<p><a href="https://leetcode.cn/problems/count-integers-in-intervals/"> 统计区间中的整数数目 </a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 第294场周赛</title>
    <url>/2022/05/23/LeetCode/294WeeklyCompetition/</url>
    <content><![CDATA[<h2 id="题目1字母在字符串中的百分比"><a class="markdownIt-Anchor" href="#题目1字母在字符串中的百分比"></a> 题目1：字母在字符串中的百分比</h2>
<p><a href="https://leetcode.cn/problems/percentage-of-letter-in-string/">字母在字符串中的百分比</a></p>
<h3 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h3>
<p><code>字符串</code></p>
<h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3>
<p>遍历一遍字符串，统计目标字符的个数，然后先乘100再除以字符串的大小。</p>
<h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">percentageLetter</span><span class="params">(string s, <span class="type">char</span> letter)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">float</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == letter)</span><br><span class="line">                num ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; n &lt;&lt; &quot; &quot; &lt;&lt; num &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span> num * <span class="number">100</span> / n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为字符串 <em>s</em> 的大小</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：5.9 MB, 在所有 C++ 提交中击败了50.00%的用户</p>
<p>通过测试用例：85 / 85</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2装满石头的背包的最大数量"><a class="markdownIt-Anchor" href="#题目2装满石头的背包的最大数量"></a> 题目2：装满石头的背包的最大数量</h2>
<p><a href="https://leetcode.cn/problems/maximum-bags-with-full-capacity-of-rocks/">装满石头的背包的最大数量</a></p>
<h3 id="标签-2"><a class="markdownIt-Anchor" href="#标签-2"></a> 标签</h3>
<p><code>数组</code>、<code>排序</code></p>
<h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3>
<p>先计算出每个背包剩余的空间并保存至一个数组中，然后将该数组从小到大进行排序，遍历一遍，若当前位置的元素小于额外的石头数量，并且额外的石头数量大于0，则将 <code>additionalRocks -= arr[i]</code> 并且装满石头的背包数加一。</p>
<h3 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumBags</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; capacity, vector&lt;<span class="type">int</span>&gt;&amp; rocks, <span class="type">int</span> additionalRocks)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; capacity.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            arr.<span class="built_in">push_back</span>(capacity[i] - rocks[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> nums = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                nums ++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(additionalRocks &gt; <span class="number">0</span> &amp;&amp; additionalRocks &gt;= arr[i])&#123;</span><br><span class="line">                additionalRocks -= arr[i];</span><br><span class="line">                nums++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * logn)</em>，其中 <em>n</em> 为数组的大小，排序耗时。</li>
<li>空间复杂度：<em>O(n)</em>，需要一个额外的数组保存每个背包剩余的空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：144 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：87.4 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>通过测试用例：79 / 79</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目3表示一个折线图的最少线段数"><a class="markdownIt-Anchor" href="#题目3表示一个折线图的最少线段数"></a> 题目3：表示一个折线图的最少线段数</h2>
<p><a href="https://leetcode.cn/problems/minimum-lines-to-represent-a-line-chart/">表示一个折线图的最少线段数</a></p>
<h3 id="标签-3"><a class="markdownIt-Anchor" href="#标签-3"></a> 标签</h3>
<p><code>数组</code>、<code>排序</code>、<code>数学</code></p>
<h3 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h3>
<p>先将所有的点按照横坐标从小到大进行排序，直接使用 <code>sort(stockPrices.begin(), stockPrices.end());</code> 进行排序即可。然后遍历一遍函数，每次计算当前元素和前一元素组成的线段的斜率是否和前一段斜率相同，若不同，则结果加一。需要使用一个变量记录前一斜率，再不相同时更新该变量。</p>
<p><code>sort(stockPrices.begin(), stockPrices.end());</code>，默认按照数组的第一列进行升序排序。</p>
<p><code>sort(stockPrices.rbegin(), stockPrices.rend());</code>，默认按照数组的第一列进行降序排列。</p>
<h3 id="题解-3"><a class="markdownIt-Anchor" href="#题解-3"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumLines</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; stockPrices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stockPrices.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(stockPrices.<span class="built_in">size</span>() == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(stockPrices.<span class="built_in">begin</span>(), stockPrices.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> pre = <span class="number">2e9</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; stockPrices.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="type">int</span> x1 = stockPrices[i - <span class="number">1</span>][<span class="number">0</span>], y1 = stockPrices[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> x2 = stockPrices[i][<span class="number">0</span>], y2 = stockPrices[i][<span class="number">1</span>];</span><br><span class="line">            <span class="type">long</span> <span class="type">double</span> cur = (<span class="type">long</span> <span class="type">double</span>)(y2 - y1) / (<span class="type">long</span> <span class="type">double</span>)(x2 - x1);</span><br><span class="line">            <span class="keyword">if</span>(cur != pre)&#123;</span><br><span class="line">                res ++;</span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * logn)</em>，其中 <em>n</em> 为数组的大小，排序耗时。</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：392 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：98.3 MB, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>通过测试用例：79 / 79</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目4巫师的总力量和"><a class="markdownIt-Anchor" href="#题目4巫师的总力量和"></a> 题目4：巫师的总力量和</h2>
<p><a href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/">巫师的总力量和</a></p>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>周赛</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>王牌面试学习计划[Leetcode 75]</title>
    <url>/2022/06/28/LeetCode/Leetcode75/</url>
    <content><![CDATA[<h1 id="day01前缀和"><a class="markdownIt-Anchor" href="#day01前缀和"></a> day01：前缀和</h1>
<h2 id="题目1"><a class="markdownIt-Anchor" href="#题目1"></a> 题目1</h2>
<p><a href="https://leetcode.cn/problems/running-sum-of-1d-array/"> 一维数组的动态和 </a></p>
<h3 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h3>
<p><code>数组</code>、<code>前缀和</code></p>
<h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">runningSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        arr.<span class="built_in">push_back</span>(nums[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            arr.<span class="built_in">push_back</span>(arr[i - <span class="number">1</span>] + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为 <em>nums</em> 的大小</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4 ms, 在所有 C++ 提交中击败了49.82%的用户</p>
<p>内存消耗：8.2 MB, 在所有 C++ 提交中击败了65.68%的用户</p>
<p>通过测试用例：53 / 53</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2"><a class="markdownIt-Anchor" href="#题目2"></a> 题目2</h2>
<p><a href="https://leetcode.cn/problems/find-pivot-index/">寻找数组的中心下标</a></p>
<h3 id="标签-2"><a class="markdownIt-Anchor" href="#标签-2"></a> 标签</h3>
<p><code>数组</code>、<code>前缀和</code></p>
<h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3>
<p>先求出前缀和数组，求解前可以将前缀和数组置为0，方便后续计算。遍历前缀和数组，i从1到<code>n-1</code></p>
<ul>
<li>左边：<code>arr[i] - arr[0]</code></li>
<li>右边：<code>arr[n - 1] - arr[i]</code></li>
</ul>
<h3 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pivotIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;  <span class="comment">// 保存前缀和</span></span><br><span class="line">        arr.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            arr.<span class="built_in">push_back</span>(arr[i] + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; arr.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            <span class="type">int</span> l = arr[i - <span class="number">1</span>] - arr[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> r = arr[n - <span class="number">1</span>] - arr[i];</span><br><span class="line">            <span class="keyword">if</span>(l == r) <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为 <em>nums</em> 的大小</li>
<li>空间复杂度：<em>O(n)</em>，保存前缀和数组用到</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：28 ms, 在所有 C++ 提交中击败了17.17%的用户</p>
<p>内存消耗：31.8 MB, 在所有 C++ 提交中击败了5.02%的用户</p>
<p>通过测试用例：745 / 745</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="day02字符串"><a class="markdownIt-Anchor" href="#day02字符串"></a> day02：字符串</h1>
<h2 id="题目1-2"><a class="markdownIt-Anchor" href="#题目1-2"></a> 题目1</h2>
<p><a href="https://leetcode.cn/problems/isomorphic-strings/"> 同构字符串 </a></p>
<h3 id="标签-3"><a class="markdownIt-Anchor" href="#标签-3"></a> 标签</h3>
<p><code>字符串</code>、<code>哈希表</code></p>
<h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3>
<p>使用哈希表<code>unordered_map</code>存储两个单词之间的映射关系即可。</p>
<h3 id="题解-3"><a class="markdownIt-Anchor" href="#题解-3"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isIsomorphic</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; hsp;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; map;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hsp[s[i]] == <span class="number">0</span> &amp;&amp; map[t[i]] == <span class="number">0</span>)&#123;</span><br><span class="line">                hsp[s[i]] = t[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">                map[t[i]] = s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(hsp[s[i]] != t[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span> || map[t[i]] != s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为 <em>nums</em> 的大小</li>
<li>空间复杂度：<em>O(2 * n)</em>， 需要使用两个哈希表</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：8 ms, 在所有 C++ 提交中击败了56.60%的用户</p>
<p>内存消耗：6.7 MB, 在所有 C++ 提交中击败了85.03%的用户</p>
<p>通过测试用例：43 / 43</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2-2"><a class="markdownIt-Anchor" href="#题目2-2"></a> 题目2</h2>
<p><a href="https://leetcode.cn/problems/is-subsequence/"> 判断子序列 </a></p>
<h3 id="标签-4"><a class="markdownIt-Anchor" href="#标签-4"></a> 标签</h3>
<p><code>字符串</code>、<code>双指针</code>、<code>动态规划</code></p>
<h3 id="题解-4"><a class="markdownIt-Anchor" href="#题解-4"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubsequence</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; t.<span class="built_in">size</span>(); j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == s.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == t[j])&#123;</span><br><span class="line">                i ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == s.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为数组 <em>t</em> 的大小</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：6.2 MB, 在所有 C++ 提交中击败了63.35%的用户</p>
<p>通过测试用例：17 / 17</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="day03链表"><a class="markdownIt-Anchor" href="#day03链表"></a> day03：链表</h1>
<h2 id="题目1-3"><a class="markdownIt-Anchor" href="#题目1-3"></a> 题目1</h2>
<p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">合并两个有序链表</a></p>
<h3 id="标签-5"><a class="markdownIt-Anchor" href="#标签-5"></a> 标签</h3>
<p><code>递归</code>、<code>链表</code></p>
<h3 id="题解-5"><a class="markdownIt-Anchor" href="#题解-5"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        ListNode *list = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        ListNode *head = list;</span><br><span class="line">        ListNode *p = list1;</span><br><span class="line">        ListNode *q = list2;</span><br><span class="line">        <span class="keyword">while</span>(p &amp;&amp; q)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p -&gt; val &lt;= q -&gt; val)&#123;</span><br><span class="line">                ListNode *x = <span class="keyword">new</span> <span class="built_in">ListNode</span>(p-&gt;val);</span><br><span class="line">                head-&gt;next = x;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ListNode *x = <span class="keyword">new</span> <span class="built_in">ListNode</span>(q-&gt;val);</span><br><span class="line">                head-&gt;next = x;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            ListNode *x = <span class="keyword">new</span> <span class="built_in">ListNode</span>(p-&gt;val);</span><br><span class="line">            head-&gt;next = x;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q)&#123;</span><br><span class="line">            ListNode *x = <span class="keyword">new</span> <span class="built_in">ListNode</span>(q-&gt;val);</span><br><span class="line">            head-&gt;next = x;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n + m)</em>，其中 <em>n</em> 为<code>list1</code> 的长度，<em>m</em> 是 <code>list2</code> 的长度</li>
<li>空间复杂度：<em>O(n + m)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：12 ms, 在所有 C++ 提交中击败了9.40%的用户</p>
<p>内存消耗：14.5 MB, 在所有 C++ 提交中击败了15.85%的用户</p>
<p>通过测试用例：208 / 208</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2-3"><a class="markdownIt-Anchor" href="#题目2-3"></a> 题目2</h2>
<p><a href="https://leetcode.cn/problems/reverse-linked-list/">反转链表</a></p>
<h3 id="标签-6"><a class="markdownIt-Anchor" href="#标签-6"></a> 标签</h3>
<p><code>递归</code>、<code>链表</code></p>
<h3 id="题解-6"><a class="markdownIt-Anchor" href="#题解-6"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span> || head-&gt;next == <span class="literal">nullptr</span>) <span class="keyword">return</span> head; </span><br><span class="line">        ListNode* l = head;  <span class="comment">// 指向头节点</span></span><br><span class="line">        ListNode* r = head;  <span class="comment">// 指向尾节点</span></span><br><span class="line">        <span class="keyword">while</span>(r-&gt;next)&#123;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        ListNode* q= head-&gt;next;</span><br><span class="line">        ListNode* k = head-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(k)&#123;  <span class="comment">// 节点指针反转</span></span><br><span class="line">            q-&gt;next = p;</span><br><span class="line">            p = q;</span><br><span class="line">            q = k;</span><br><span class="line">            k = k-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        q-&gt;next = p; <span class="comment">// 最后两个节点进行交换</span></span><br><span class="line"></span><br><span class="line">        head = r;</span><br><span class="line">        l -&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为<code>head</code> 的长度</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：8 ms, 在所有 C++ 提交中击败了49.83%的用户</p>
<p>内存消耗：8 MB, 在所有 C++ 提交中击败了71.06%的用户</p>
<p>通过测试用例：28 / 28</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="day04链表-双指针"><a class="markdownIt-Anchor" href="#day04链表-双指针"></a> day04：链表、双指针</h1>
<h2 id="题目1-4"><a class="markdownIt-Anchor" href="#题目1-4"></a> 题目1</h2>
<p><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">链表的中间结点</a></p>
<h3 id="标签-7"><a class="markdownIt-Anchor" href="#标签-7"></a> 标签</h3>
<p><code>链表</code>、<code>双指针</code></p>
<h3 id="题解-7"><a class="markdownIt-Anchor" href="#题解-7"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">middleNode</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nums = <span class="number">0</span>;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            nums++;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> a = nums / <span class="number">2</span>;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">while</span>(a --)&#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为<code>head</code> 的长度</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：6.8 MB, 在所有 C++ 提交中击败了81.83%的用户</p>
<p>通过测试用例：36 / 36</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2-4"><a class="markdownIt-Anchor" href="#题目2-4"></a> 题目2</h2>
<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">环形链表 II</a></p>
<h3 id="标签-8"><a class="markdownIt-Anchor" href="#标签-8"></a> 标签</h3>
<p><code>链表</code>、<code>哈希表</code>、<code>双指针</code></p>
<h3 id="题解-8"><a class="markdownIt-Anchor" href="#题解-8"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">哈希表</button></li><li class="tab"><button type="button" data-href="#题解-2">快慢指针</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;ListNode *&gt; visited;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(visited.<span class="built_in">count</span>(head))&#123;</span><br><span class="line">                <span class="keyword">return</span> head;</span><br><span class="line">            &#125;</span><br><span class="line">            visited.<span class="built_in">insert</span>(head);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为<code>head</code> 的长度</li>
<li>空间复杂度：<em>O(n)</em>，使用哈希表</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：16 ms, 在所有 C++ 提交中击败了8.32%的用户</p>
<p>内存消耗：9.4 MB, 在所有 C++ 提交中击败了6.32%的用户</p>
<p>通过测试用例：16 / 16</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = head, *fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (fast-&gt;next == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">                ListNode *ptr = head;</span><br><span class="line">                <span class="keyword">while</span> (ptr != slow) &#123;</span><br><span class="line">                    ptr = ptr-&gt;next;</span><br><span class="line">                    slow = slow-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ptr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为<code>head</code> 的长度</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：8 ms, 在所有 C++ 提交中击败了73.20%的用户</p>
<p>内存消耗：7.3 MB, 在所有 C++ 提交中击败了97.45%的用户</p>
<p>通过测试用例：16 / 16</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="day05"><a class="markdownIt-Anchor" href="#day05"></a> day05：</h1>
<h2 id="题目1-5"><a class="markdownIt-Anchor" href="#题目1-5"></a> 题目1</h2>
<p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/"> 买卖股票的最佳时机 </a></p>
<h3 id="标签-9"><a class="markdownIt-Anchor" href="#标签-9"></a> 标签</h3>
<p><code>数组</code>、<code>动态规划</code></p>
<h3 id="题解-9"><a class="markdownIt-Anchor" href="#题解-9"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">一次遍历</button></li><li class="tab"><button type="button" data-href="#题解-2">暴力解法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line">        <span class="type">int</span> minprice = inf, maxprofit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> price: prices) &#123;</span><br><span class="line">            maxprofit = <span class="built_in">max</span>(maxprofit, price - minprice);</span><br><span class="line">            minprice = <span class="built_in">min</span>(price, minprice);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxprofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为 <em>prices</em> 数组的大小</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：104 ms, 在所有 C++ 提交中击败了61.28%的用户</p>
<p>内存消耗：91 MB, 在所有 C++ 提交中击败了85.19%的用户</p>
<p>通过测试用例：211 / 211</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; prices.<span class="built_in">size</span>() - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; prices.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                res = <span class="built_in">max</span>(res, prices[j] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n ^ 2)</em>，其中 <em>n</em> 为 <em>prices</em> 数组的大小</li>
<li>空间复杂度：<em>O(1)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：104 ms, 在所有 C++ 提交中击败了61.28%的用户</p>
<p>内存消耗：91 MB, 在所有 C++ 提交中击败了85.19%的用户</p>
<p>通过测试用例：211 / 211</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2-5"><a class="markdownIt-Anchor" href="#题目2-5"></a> 题目2</h2>
<p><a href="https://leetcode.cn/problems/longest-palindrome/"> 最长回文串 </a></p>
<h3 id="标签-10"><a class="markdownIt-Anchor" href="#标签-10"></a> 标签</h3>
<p><code>贪心</code>、<code>哈希表</code>、<code>字符串</code></p>
<h3 id="题解-10"><a class="markdownIt-Anchor" href="#题解-10"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; hsp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            hsp[s[i]] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt;::iterator it = hsp.<span class="built_in">begin</span>(); it != hsp.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(it-&gt;second %  <span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                res += (it-&gt;second - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res += it-&gt;second;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) res += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为 <em>s</em> 的大小</li>
<li>空间复杂度：<em>O(n)</em>，用哈希表</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：6.6 MB, 在所有 C++ 提交中击败了14.52%的用户</p>
<p>通过测试用例：95 / 95</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="day06树"><a class="markdownIt-Anchor" href="#day06树"></a> day06：树</h1>
<h2 id="题目1-6"><a class="markdownIt-Anchor" href="#题目1-6"></a> 题目1</h2>
<p><a href="https://leetcode.cn/problems/n-ary-tree-preorder-traversal/"> N 叉树的前序遍历 </a></p>
<h3 id="标签-11"><a class="markdownIt-Anchor" href="#标签-11"></a> 标签</h3>
<p><code>栈</code>、<code>树</code>、<code>深度优先搜索</code></p>
<h3 id="题解-11"><a class="markdownIt-Anchor" href="#题解-11"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(Node* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">        res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; root-&gt;children.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(root-&gt;children[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preorder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为<em>N</em> 叉树的节点，每个节点恰好被遍历一次。</li>
<li>空间复杂度：<em>O(n)</em></li>
</ul>
</div>
<div class="note success simple"><p>执行用时：16 ms, 在所有 C++ 提交中击败了67.73%的用户</p>
<p>内存消耗：11.1 MB, 在所有 C++ 提交中击败了82.02%的用户</p>
<p>通过测试用例：38 / 38</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2-6"><a class="markdownIt-Anchor" href="#题目2-6"></a> 题目2</h2>
<p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/"> 二叉树的层序遍历 </a></p>
<h3 id="标签-12"><a class="markdownIt-Anchor" href="#标签-12"></a> 标签</h3>
<p><code>树</code>、<code>广度优先搜索</code>、<code>二叉树</code></p>
<h3 id="题解-12"><a class="markdownIt-Anchor" href="#题解-12"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;TreeNode*&gt; que;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(que.<span class="built_in">empty</span>()) <span class="keyword">return</span> ; </span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        <span class="type">int</span> npc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>() &amp;&amp; num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode* top = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            num--;</span><br><span class="line">            arr.<span class="built_in">push_back</span>(top-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(top-&gt;left)&#123;</span><br><span class="line">                que.<span class="built_in">push</span>(top-&gt;left);</span><br><span class="line">                npc ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(top-&gt;right)&#123;</span><br><span class="line">                que.<span class="built_in">push</span>(top-&gt;right);</span><br><span class="line">                npc ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(arr);</span><br><span class="line">        num = npc;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> res;</span><br><span class="line">        que.<span class="built_in">push</span>(root);</span><br><span class="line">        num ++;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为 <em>2</em> 叉树的节点，每个节点恰好被遍历一次。</li>
<li>空间复杂度：<em>O(n)</em>，需要使用队列。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：8 ms, 在所有 C++ 提交中击败了22.90%的用户</p>
<p>内存消耗：12.9 MB, 在所有 C++ 提交中击败了8.27%的用户</p>
<p>通过测试用例：34 / 34</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="day07二分查找"><a class="markdownIt-Anchor" href="#day07二分查找"></a> day07：二分查找</h1>
<h2 id="题目1-7"><a class="markdownIt-Anchor" href="#题目1-7"></a> 题目1</h2>
<p><a href="https://leetcode.cn/problems/binary-search/"> 二分查找 </a></p>
<h3 id="标签-13"><a class="markdownIt-Anchor" href="#标签-13"></a> 标签</h3>
<p><code>数组</code>、<code>二分查找</code></p>
<h3 id="题解-13"><a class="markdownIt-Anchor" href="#题解-13"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">二分查找模板1</button></li><li class="tab"><button type="button" data-href="#题解-2">二分查找模板2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt;= target) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[l] != target) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(logn)</em>，其中 <em>n</em> 为数组的长度</li>
<li>空间复杂度：<em>O(1)</em>。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：20 ms, 在所有 C++ 提交中击败了98.15%的用户</p>
<p>内存消耗：26.9 MB, 在所有 C++ 提交中击败了54.09%的用户</p>
<p>通过测试用例：47 / 47</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt;= target)</span><br><span class="line">                r = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[l] != target) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(logn)</em>，其中 <em>n</em> 为数组长度</li>
<li>空间复杂度：<em>O(1)</em>。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：48 ms, 在所有 C++ 提交中击败了7.34%的用户</p>
<p>内存消耗：27 MB, 在所有 C++ 提交中击败了5.73%的用户</p>
<p>通过测试用例：47 / 47</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2-7"><a class="markdownIt-Anchor" href="#题目2-7"></a> 题目2</h2>
<p><a href="https://leetcode.cn/problems/first-bad-version/">第一个错误的版本</a></p>
<h3 id="标签-14"><a class="markdownIt-Anchor" href="#标签-14"></a> 标签</h3>
<p><code>二分查找</code>、<code>交互</code></p>
<h3 id="题解-14"><a class="markdownIt-Anchor" href="#题解-14"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The API isBadVersion is defined for you.</span></span><br><span class="line"><span class="comment">// bool isBadVersion(int version);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (l &gt;&gt; <span class="number">1</span>) + (r &gt;&gt; <span class="number">1</span>);  <span class="comment">//  防止计算时溢出，两个过大的数相加溢出</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isBadVersion</span>(mid)) r = mid; </span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(logn)</em>，其中 <em>n</em> 为给定版本的数量。</li>
<li>空间复杂度：<em>O(1)</em>。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户</p>
<p>内存消耗：5.8 MB, 在所有 C++ 提交中击败了47.59%的用户</p>
<p>通过测试用例：23 / 23</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="day08二叉搜索树"><a class="markdownIt-Anchor" href="#day08二叉搜索树"></a> day08：二叉搜索树⭐</h1>
<h2 id="题目1-8"><a class="markdownIt-Anchor" href="#题目1-8"></a> 题目1</h2>
<h4 id="验证二叉搜索树"><a class="markdownIt-Anchor" href="#验证二叉搜索树"></a> <a href="https://leetcode.cn/problems/validate-binary-search-tree/">验证二叉搜索树</a></h4>
<h3 id="标签-15"><a class="markdownIt-Anchor" href="#标签-15"></a> 标签</h3>
<p><code>树</code>、<code>深度优先搜索</code>、<code>二叉搜索树</code>、<code>二叉树</code></p>
<h3 id="题解-15"><a class="markdownIt-Anchor" href="#题解-15"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">题解1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        stack&lt;TreeNode*&gt; stack;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> inorder = (<span class="type">long</span> <span class="type">long</span>)INT_MIN - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack.<span class="built_in">empty</span>() || root != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (root != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                stack.<span class="built_in">push</span>(root);</span><br><span class="line">                root = root -&gt; left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.<span class="built_in">top</span>();</span><br><span class="line">            stack.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="comment">// 如果中序遍历得到的节点的值小于等于前一个 inorder，说明不是二叉搜索树</span></span><br><span class="line">            <span class="keyword">if</span> (root -&gt; val &lt;= inorder) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            inorder = root -&gt; val;</span><br><span class="line">            root = root -&gt; right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为二叉树的节点个数。二叉树的每个节点最多被访问一次，因此时间复杂度为<em>O(n)</em></li>
<li>空间复杂度：<em>O(n)</em>，其中 <em>n</em> 为二叉树的节点个数。栈最多存储 <em>n</em> 个节点，因此需要额外的 <em>O</em>(<em>n</em>) 的空间。。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4 ms, 在所有 C++ 提交中击败了97.63%的用户</p>
<p>内存消耗：21.1 MB, 在所有 C++ 提交中击败了59.44%的用户</p>
<p>通过测试用例：80 / 80</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2-8"><a class="markdownIt-Anchor" href="#题目2-8"></a> 题目2</h2>
<p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">二叉搜索树的最近公共祖先</a></p>
<h3 id="标签-16"><a class="markdownIt-Anchor" href="#标签-16"></a> 标签</h3>
<p><code>树</code>、<code>深度优先搜索</code>、<code>二叉搜索树</code>、<code>二叉树</code></p>
<h3 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h3>
<p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/solution/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-26/">题解思路</a></p>
<ul>
<li>二次遍历</li>
</ul>
<p>每次遍历都记录从根节点到节点<code>p</code>或者节点<code>q</code>的路径。然后挨个比对，最后一个两个位置的节点相同的节点，则该节点是两个节点的公共祖先节点。</p>
<ul>
<li>一次遍历</li>
</ul>
<h3 id="题解-16"><a class="markdownIt-Anchor" href="#题解-16"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">两次遍历</button></li><li class="tab"><button type="button" data-href="#题解-2">一次遍历</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;TreeNode *&gt; <span class="title">findPath</span><span class="params">(TreeNode* root, TreeNode* target)</span></span>&#123;</span><br><span class="line">        vector&lt;TreeNode* &gt; path;</span><br><span class="line">        TreeNode *node = root;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(node != target)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(node);</span><br><span class="line">            <span class="keyword">if</span>(node-&gt;val &lt; target-&gt;val)</span><br><span class="line">                node = node-&gt;right;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                node = node-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        path.<span class="built_in">push_back</span>(node);</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        vector&lt;TreeNode *&gt; path_p = <span class="built_in">findPath</span>(root, p);</span><br><span class="line">        vector&lt;TreeNode *&gt; path_q = <span class="built_in">findPath</span>(root, q);</span><br><span class="line">        TreeNode* res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; path_p.<span class="built_in">size</span>() &amp;&amp; i &lt; path_q.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(path_p[i] == path_q[i])</span><br><span class="line">                res = path_p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为二叉搜索树中的节点个数。</li>
<li>空间复杂度：<em>O(n)</em>，需要存储储根节点到 <em>p</em> 和 <em>q</em> 的路径。和上面的分析方法相同，在最坏的情况下，路径的长度为 Θ(n)，因此需要 Θ(n) 的空间。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：44 ms, 在所有 C++ 提交中击败了5.53%的用户</p>
<p>内存消耗：22.7 MB, 在所有 C++ 提交中击败了75.57%的用户</p>
<p>通过测试用例：27 / 27</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        TreeNode* ancestor = root;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;val &lt; ancestor-&gt;val &amp;&amp; q-&gt;val &lt; ancestor-&gt;val) &#123;</span><br><span class="line">                ancestor = ancestor-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;val &gt; ancestor-&gt;val &amp;&amp; q-&gt;val &gt; ancestor-&gt;val) &#123;</span><br><span class="line">                ancestor = ancestor-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ancestor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n)</em>，其中 <em>n</em> 为二叉搜索树中的节点个数。</li>
<li>空间复杂度：<em>O(1)</em>。</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：28 ms, 在所有 C++ 提交中击败了66.76%的用户</p>
<p>内存消耗：22.6 MB, 在所有 C++ 提交中击败了98.27%的用户</p>
<p>通过测试用例：27 / 27</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="day09dfsbfs"><a class="markdownIt-Anchor" href="#day09dfsbfs"></a> day09：Dfs/Bfs⭐</h1>
<h2 id="题目1-9"><a class="markdownIt-Anchor" href="#题目1-9"></a> 题目1</h2>
<p><a href="https://leetcode.cn/problems/flood-fill/">图像渲染</a></p>
<h3 id="标签-17"><a class="markdownIt-Anchor" href="#标签-17"></a> 标签</h3>
<p><code>深度优先搜索</code>、<code>广度优先搜索</code>、<code>数组</code>、<code>矩阵</code></p>
<h3 id="题解-17"><a class="markdownIt-Anchor" href="#题解-17"></a> 题解</h3>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">深度优先搜素</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// pass:初始[sr,sc]位置的值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; image, <span class="type">int</span> sr, <span class="type">int</span> sc, <span class="type">int</span> color, <span class="type">int</span> pass)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> r = image.<span class="built_in">size</span>(), c = image[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(sr &lt; <span class="number">0</span> || sr &gt;= r || sc &lt; <span class="number">0</span> || sc &gt;= c || image[sr][sc] != pass)&#123;  <span class="comment">//出口</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        image[sr][sc] = color;</span><br><span class="line">        <span class="built_in">dfs</span>(image, sr + <span class="number">1</span>, sc, color, pass);</span><br><span class="line">        <span class="built_in">dfs</span>(image, sr - <span class="number">1</span>, sc, color, pass);</span><br><span class="line">        <span class="built_in">dfs</span>(image, sr, sc + <span class="number">1</span>, color, pass);</span><br><span class="line">        <span class="built_in">dfs</span>(image, sr, sc - <span class="number">1</span>, color, pass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">floodFill</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; image, <span class="type">int</span> sr, <span class="type">int</span> sc, <span class="type">int</span> color) &#123;</span><br><span class="line">        <span class="keyword">if</span>(image[sr][sc] == color) <span class="keyword">return</span> image;</span><br><span class="line">        <span class="built_in">dfs</span>(image, sr, sc, color, image[sr][sc]);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><ul>
<li>时间复杂度：<em>O(n * m)</em>，其中 <em>n</em> 和 <em>m</em> 分别是二维数组的行数和列数。最坏情况下需要遍历所有的方格一次。</li>
<li>空间复杂度：<em>O(1)</em>，</li>
</ul>
</div>
<div class="note success simple"><p>执行用时：4 ms, 在所有 C++ 提交中击败了97.02%的用户</p>
<p>内存消耗：13.4 MB, 在所有 C++ 提交中击败了97.95%的用户</p>
<p>通过测试用例：277 / 277</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="题目2-9"><a class="markdownIt-Anchor" href="#题目2-9"></a> 题目2</h2>
<p><a href="https://leetcode.cn/problems/number-of-islands/">岛屿数量</a></p>
<h3 id="标签-18"><a class="markdownIt-Anchor" href="#标签-18"></a> 标签</h3>
<p><code>深度优先搜索</code>、<code>广度优先搜索</code>、<code>并查集</code>、<code>数组</code>、<code>矩阵</code></p>
<h3 id="题解-18"><a class="markdownIt-Anchor" href="#题解-18"></a> 题解</h3>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 多线程与高并发练习</title>
    <url>/2022/09/24/JAVA/00Thread/</url>
    <content><![CDATA[<h1 id="题目1"><a class="markdownIt-Anchor" href="#题目1"></a> 题目1</h1>
<p>实现一个容器，提供两个方法：<code>add</code>、<code>size</code>。写两个线程，线程1添加10个元素到容器中，线程2实现监控元素个数，当个数到5个的时候，线程2给出提示并结束。</p>
<h2 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h2>
<h3 id="使用volatile"><a class="markdownIt-Anchor" href="#使用volatile"></a> 使用<code>volatile</code></h3>
<p><strong>总结</strong>：下面三种方法都存在问题：【当把线程1的睡眠时间去掉，则直接出错】因此，在平时写多线程程序时，尽可能的不要使用<code>volatile</code>关键字，如果必须要使用，也只能用来修饰简单变量，不要修饰引用值。</p>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">错误解法</button></li><li class="tab"><button type="button" data-href="#题解-2">volatile</button></li><li class="tab"><button type="button" data-href="#题解-3">同步容器</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T01_WithoutVolatile</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">lists</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        lists.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T01_WithoutVolatile</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T01_WithoutVolatile</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                t.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(t.size() == <span class="number">5</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 结束&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>错误解法，运行结果为线程1添加10个元素后即结束，但是线程2 不会检测到个数所以也不会结束。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T02_WithVolatile</span> &#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">List</span> <span class="variable">lists</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        lists.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T02_WithVolatile</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T02_WithVolatile</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                t.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(t.size() == <span class="number">5</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 结束&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>使用<code>volatile</code>关键字，但是程序还是存在bug，当已经加入5个元素，但是线程2还没来得及读的时候，线程1有加入元素，则还是会出错。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T02_WithVolatile</span> &#123;</span><br><span class="line"><span class="comment">//    volatile List lists = new ArrayList();</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">List</span> <span class="variable">lists</span> <span class="operator">=</span> Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        lists.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T02_WithVolatile</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T02_WithVolatile</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                t.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(t.size() == <span class="number">5</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 结束&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>使用关键字<code>volatile</code>和同步容器共同使用。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h3 id="使用waitnotify"><a class="markdownIt-Anchor" href="#使用waitnotify"></a> 使用<code>wait/notify</code></h3>
<p><strong>总结</strong>：<code>wait</code>将线程陷入睡眠，先执行没有进入睡眠的线程。<code>notify</code>将陷入睡眠的线程唤醒，但是不会释放锁，若自己不睡眠，则需要等待自己执行结束后才会继续执行唤醒的线程。</p>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">wait/notify</button></li><li class="tab"><button type="button" data-href="#题解-2">wait/notify&FreeLock</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T03_WaitNotifyLock</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">lists</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        lists.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T03_WaitNotifyLock</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T03_WaitNotifyLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 启动&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span>(t.size() != <span class="number">5</span>)&#123;  <span class="comment">// 先启动线程2，当size!=5的时候，线程2等待，先执行线程1</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保证先启动的是第二个线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 启动&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    t.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                    System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (t.size() == <span class="number">5</span>) &#123;  <span class="comment">// 当等于5的时候，唤醒线程2</span></span><br><span class="line">                        lock.notify();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>仍然错误，原因是<code>notify</code>是只唤醒不释放锁。所以线程2还是等待线程1结束后才能获得锁，才能继续执行。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T04_NotifyFreeLock</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">lists</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        lists.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T04_NotifyFreeLock</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T04_NotifyFreeLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 启动&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span>(t.size() != <span class="number">5</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 结束&quot;</span>);</span><br><span class="line">                lock.notify();  <span class="comment">// t2线程结束，唤醒t1线程，否则t1线程永久睡眠</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保证先启动的是第二个线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 启动&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    t.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                    System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (t.size() == <span class="number">5</span>) &#123;</span><br><span class="line">                        lock.notify();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;  <span class="comment">// 唤醒线程2后，将自己进入睡眠(释放锁)，等待线程2结束后继续执行。</span></span><br><span class="line">                            lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>正确结果。当线程1唤醒线程2后，讲自己<code>wait</code>释放锁，然后线程2继续执行，执行结束后，<strong>必须再次唤醒线程1</strong>，否则线程1永远睡眠</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h3 id="使用countdownlatch"><a class="markdownIt-Anchor" href="#使用countdownlatch"></a> 使用<code>CountDownLatch</code></h3>
<p><strong>总结</strong>：先启动线程2，当size不等于5时，插上门闩<code>await</code>，等待门闩变为0时继续往后继续运行，启动线程2，当size等于5时，门闩值减1。</p>
<p>但是严格来讲，存在问题，当把线程1等待1s才输出一个的等待时间去掉后，t2线程结束则会推迟，不是在size等于5的时候就结束了。因此如果需要严格实现等于5时线程2结束，然后才继续运行线程1时，则可以使用两个门闩。</p>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">await/countdown</button></li><li class="tab"><button type="button" data-href="#题解-2">两个门闩</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T05_CountDownLatch</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">List</span> <span class="variable">lists</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        lists.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T04_NotifyFreeLock</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T04_NotifyFreeLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 启动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (t.size() != <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    latch.await();  <span class="comment">// 插上门闩，等待门闩值减为1</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 结束&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保证先启动的是第二个线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 启动&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                t.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (t.size() == <span class="number">5</span>) &#123;</span><br><span class="line">                    latch.countDown();  <span class="comment">// 门闩值减一</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>正确运行，但是严格来讲，存在问题，当把线程1等待1s才输出一个的等待时间去掉后，t2线程结束则会推迟，不是在size等于5的时候就结束了。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T05_CountDownLatch</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">List</span> <span class="variable">lists</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        lists.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T04_NotifyFreeLock</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T04_NotifyFreeLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 启动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (t.size() != <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    latch.await();  <span class="comment">// 等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 结束&quot;</span>);</span><br><span class="line">            latch1.countDown();</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保证先启动的是第二个线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 启动&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                t.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (t.size() == <span class="number">5</span>) &#123;</span><br><span class="line">                    latch.countDown();  <span class="comment">// 门闩值减一</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        latch1.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    Thread.sleep(1000);</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>完美解决。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h3 id="使用locksupport"><a class="markdownIt-Anchor" href="#使用locksupport"></a> 使用<code>LockSupport</code></h3>
<p><strong>总结</strong>：和门闩存在的问题是相同的。</p>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">park/unpark</button></li><li class="tab"><button type="button" data-href="#题解-2">两个LockSupport</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T06_LockSupport</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">lists</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        lists.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T06_LockSupport</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T06_LockSupport</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 启动&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (t.size() != <span class="number">5</span>) &#123;</span><br><span class="line">                LockSupport.park();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 结束&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保证先启动的是第二个线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 启动&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                t.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (t.size() == <span class="number">5</span>) &#123;</span><br><span class="line">                    LockSupport.unpark(t2);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>正确运行，但是严格来讲，存在问题，当把线程1等待1s才输出一个的等待时间去掉后，t2线程结束则会推迟，不是在size等于5的时候就结束了。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T07_LockSupport_WithoutSleep</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">lists</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        lists.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="literal">null</span>, t2 = <span class="literal">null</span>; <span class="comment">// 必须先声明</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T07_LockSupport_WithoutSleep</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T07_LockSupport_WithoutSleep</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2 启动&quot;</span>);</span><br><span class="line"></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;t2 结束&quot;</span>);</span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1 启动&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                t.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (t.size() == <span class="number">5</span>) &#123;</span><br><span class="line">                    LockSupport.unpark(t2);</span><br><span class="line">                    LockSupport.park();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="comment">// 保证先启动的是第二个线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>完美解决。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h3 id="使用semaphore"><a class="markdownIt-Anchor" href="#使用semaphore"></a> 使用<code>Semaphore</code></h3>
<p>使用了<code>Semaphore</code>和<code>join</code></p>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">acquire/release</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T08_Semaphore</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">lists</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        lists.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="literal">null</span>, t2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T08_Semaphore</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T08_Semaphore</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);  <span class="comment">// 保证只有1个线程可以同时运行</span></span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.acquire();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    t.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                    System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">                s.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t2.start();  <span class="comment">// t1 线程输出5个后启动t2线程，</span></span><br><span class="line">                t2.join();  <span class="comment">// 让t2线程执行结束</span></span><br><span class="line">                s.acquire();  <span class="comment">// t1线程继续获得信号量。</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    t.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                    System.out.println(<span class="string">&quot;add &quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">                s.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s.acquire();</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 结束&quot;</span>);</span><br><span class="line">                s.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>正确运行。在t1线程里面启动t2线程</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="题目2"><a class="markdownIt-Anchor" href="#题目2"></a> 题目2</h1>
<p>有两个字符串：<code>&quot;ABCDEFG....&quot;;&quot;1234567....&quot;;</code>，要求使用多线程顺序打印出<code>A1B2C3D4....</code></p>
<h2 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h2>
<h3 id="使用synchronized"><a class="markdownIt-Anchor" href="#使用synchronized"></a> 使用<code>Synchronized</code></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion02;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T01_Synchronized</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] aC = <span class="string">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] aI = <span class="string">&quot;1234567&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T01_Synchronized</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T01_Synchronized</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> c : t.aC) &#123;</span><br><span class="line">                    System.out.print(c);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.notify();  <span class="comment">// 先叫醒对方，再睡</span></span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> c : t.aI) &#123;</span><br><span class="line"></span><br><span class="line">                    System.out.print(c);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.notify();</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="题目3"><a class="markdownIt-Anchor" href="#题目3"></a> 题目3</h1>
<p>写一个固定容量同步容器，拥有<code>put</code>和<code>get</code>方法， 以及<code>getCount</code>方法。能够支持2个生产者线程以及10个消费之线程的阻塞调用。</p>
<h2 id="题解-3"><a class="markdownIt-Anchor" href="#题解-3"></a> 题解</h2>
<div class="tabs" id="题解"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#题解-1">wait/notifyAll</button></li><li class="tab"><button type="button" data-href="#题解-2">ReentrantLock/Condition</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="题解-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyContainer1</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> LinkedList&lt;T&gt; lists = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="type">int</span> <span class="variable">MAX</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (lists.size() == MAX) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lists.add(t);</span><br><span class="line">        count ++;</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();  <span class="comment">// 通知消费者进行消费</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (lists.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        t = lists.removeFirst();</span><br><span class="line">        count --;</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();  <span class="comment">// 通知生产者进行生产</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyContainer1&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">MyContainer1</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                    System.out.println(c.get());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;c&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">25</span>; j++) &#123;</span><br><span class="line">                    c.put(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;p&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>正确运行，</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="题解-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interviewquestion02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyContainer2</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> LinkedList&lt;T&gt; lists = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="type">int</span> <span class="variable">MAX</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">producer</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">consumer</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (lists.size() == MAX) &#123;</span><br><span class="line">                producer.wait();  <span class="comment">// 生产者线程等待</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lists.add(t);</span><br><span class="line">            count++;</span><br><span class="line">            consumer.signalAll();  <span class="comment">// 通知消费者进行消费</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (lists.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                consumer.wait();</span><br><span class="line">            &#125;</span><br><span class="line">            t = lists.removeFirst();</span><br><span class="line">            count--;</span><br><span class="line">            producer.signalAll();  <span class="comment">// 通知生产者进行生产</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyContainer2&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">MyContainer2</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">                    System.out.println(c.get());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;c&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">25</span>; j++) &#123;</span><br><span class="line">                    c.put(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;p&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info simple"><p>正确运行，使用<code>wait</code>和<code>signalAll</code>来精确控制唤醒生产者还是消费者。</p>
</div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h1 id="源码阅读原则"><a class="markdownIt-Anchor" href="#源码阅读原则"></a> 源码阅读原则</h1>
<ul>
<li>跑不起来不读</li>
<li>解决问题就好 - 目的性</li>
<li>一条线索到底</li>
<li>无关细节略过</li>
<li>一般不读静态</li>
<li>一般动态读法</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段1</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础入门 阶段1 &amp; 阶段2</title>
    <url>/2022/04/18/JAVA/01JavaBasic/</url>
    <content><![CDATA[<h1 id="java程序执行过程"><a class="markdownIt-Anchor" href="#java程序执行过程"></a> JAVA程序执行过程</h1>
<ul>
<li>编写<code>Hello.java</code>类，</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;  <span class="comment">// 定义类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  <span class="comment">// 主函数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world&quot;</span>);  <span class="comment">// 输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>通过编译生成<code>Hello.class</code>文件，(字节码文件)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac Hello.java</span><br></pre></td></tr></table></figure>
<ul>
<li>调用<code>JVM(java 虚拟机)</code>运行生成结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java Hello  <span class="comment"># 实际在运行Hello.class，但是不写后缀</span></span><br></pre></td></tr></table></figure>
<h2 id="java类编写注意事项"><a class="markdownIt-Anchor" href="#java类编写注意事项"></a> JAVA类编写注意事项</h2>
<ul>
<li>一个源文件中最多只能有一个<code>public 类</code>，其他类的个数不限。</li>
<li>如果一个文件中包含<code>public 类</code>，则文件名必须和该类同名。</li>
</ul>
<h1 id="java转义字符"><a class="markdownIt-Anchor" href="#java转义字符"></a> JAVA转义字符</h1>
<ul>
<li>JAVA中常用的转义字符：</li>
</ul>
<table>
<thead>
<tr>
<th>换行符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\n</code></td>
<td>换行符</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>制表符，实现对齐</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>一个回车</td>
</tr>
</tbody>
</table>
<h1 id="java注释"><a class="markdownIt-Anchor" href="#java注释"></a> JAVA注释</h1>
<ul>
<li>单行注释</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释</span></span><br></pre></td></tr></table></figure>
<ul>
<li>多行注释</li>
</ul>
<p>多行注释不允许嵌套多行注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	这是多行注释</span></span><br><span class="line"><span class="comment">	多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>文档注释</li>
</ul>
<p>里面是java doc标签</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 177411</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h1 id="java变量"><a class="markdownIt-Anchor" href="#java变量"></a> JAVA变量</h1>
<p>变量是程序的基本组成单位，有三要素（类型 + 名称 + 值），变量表示内存中的一个存储区域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Variable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a;  <span class="comment">// 声明变量</span></span><br><span class="line">        a = <span class="number">1</span>;  <span class="comment">// 变量赋值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">// 声明赋值合并</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="变量类型"><a class="markdownIt-Anchor" href="#变量类型"></a> 变量类型</h2>
<ul>
<li><code>int</code> 整型，占4字节</li>
<li><code>double</code> 双精度浮点类型，占8字节</li>
<li><code>char</code> 字符型，占2字节</li>
<li><code>String</code> 字符串类型，</li>
</ul>
<h1 id="java数据类型"><a class="markdownIt-Anchor" href="#java数据类型"></a> JAVA数据类型 ⭐</h1>
<p>java 中定义数据必须指定明确的数据类型，可以看出java 是<strong>强类型语言</strong></p>
<h2 id="基本数据类型"><a class="markdownIt-Anchor" href="#基本数据类型"></a> 基本数据类型</h2>
<ul>
<li>数值型
<ul>
<li>整数类型，存放整数<code>byte[1], short[2], int[4], long[8]</code></li>
<li>浮点(小数)类型<code>float[4], double[8]</code></li>
</ul>
</li>
<li>字符型<code>char[2]</code>，存放单个字符</li>
<li>布尔型<code>boolean[1]</code></li>
</ul>
<h2 id="整数类型"><a class="markdownIt-Anchor" href="#整数类型"></a> 整数类型</h2>
<p>类型不同带来的是占用存储空间不同，进而带来的是数值范围不同。1个字节等于8位。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 4字节</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">1L</span>; <span class="comment">// 8字节</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">1F</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="浮点数类型"><a class="markdownIt-Anchor" href="#浮点数类型"></a> 浮点数类型</h3>
<ul>
<li>浮点数 = 符号位 + 指数位 + 尾数位</li>
<li>尾数部分可能丢失，造成精度损失（小数都是近似值）</li>
</ul>
<p>陷阱：</p>
<p><code>2.7</code> 和 <code>8.1 / 3</code> 不相等，<code>8.1 / 3</code> 是接近<code>2.7</code>的小数，而不是<code>2.7</code>。所以需要判断时，应该是以两个数的差值的绝对值，在某个精度范围内进行判断。</p>
<h3 id="字符类型"><a class="markdownIt-Anchor" href="#字符类型"></a> 字符类型</h3>
<ul>
<li>必须用单引号<code>''</code></li>
<li>允许使用转义字符<code>\</code></li>
<li>允许进行运算  <code>'a' - 'a'</code></li>
<li>字符型存储到计算机中，需要将对应的码值(整数)找出来进行存储。</li>
<li>字符和整数的对应关系是通过字符编码表决定的，是规定好的。</li>
</ul>
<h3 id="基本数据类型的转换"><a class="markdownIt-Anchor" href="#基本数据类型的转换"></a> 基本数据类型的转换</h3>
<p><strong>自动类型转换</strong></p>
<ul>
<li><strong>精度小的类型自动转换为精度大的数据类型。</strong></li>
<li><code>char &lt; int &lt; long &lt; float &lt; double</code></li>
<li><code>byte &lt; short &lt; int &lt; long &lt; float &lt; double</code></li>
</ul>
<p>注意：</p>
<ol>
<li>有多种类型的数据类型进行混合运算时，系统首先将所有类型转为容量大的类型，然后再进行计算。</li>
<li>把容量大的数据类型赋值给容量小的数据类型时，会报错，反之则会进行自动类型转换。</li>
<li><code>（byte, short）</code>和 <code>char</code> 之间不会自动转换。</li>
</ol>
<p><strong>强制类型转换</strong></p>
<p>将容量大的类型转换为容量小的数据类型。使用时需要加上强制转换符<code>()</code>，但可能造成精度降低或溢出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForceConvert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1.9</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基本数据类型和string类型的转换"><a class="markdownIt-Anchor" href="#基本数据类型和string类型的转换"></a> 基本数据类型和String类型的转换</h3>
<ul>
<li>基本类型转String类型：<code>基本类型值 + &quot;&quot;</code></li>
<li>String类型转基本类型：通过基本数据类型的包装类调用<code>parseXXX</code>进行转换。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToBasic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Integer.parseInt(str);</span><br><span class="line"></span><br><span class="line">        str = <span class="string">&quot;89.0&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> Double.parseDouble(str);</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">c</span> <span class="operator">=</span> Float.parseFloat(str);</span><br><span class="line"></span><br><span class="line">        <span class="type">short</span> <span class="variable">d</span> <span class="operator">=</span> Short.parseShort(str);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">e</span> <span class="operator">=</span> Long.parseLong(str);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">fl</span> <span class="operator">=</span> Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项：</strong></p>
<ul>
<li>在将String类型转换为基本数据类型时，需要确保String类型能够转换为有效的数据。如果格式不正确，则会抛出异常，程序就会终止。</li>
</ul>
<h2 id="引用数据类型"><a class="markdownIt-Anchor" href="#引用数据类型"></a> 引用数据类型</h2>
<ul>
<li>类<code>class</code>，例如<code>String</code></li>
<li>接口<code>interface</code></li>
<li>数组<code>[]</code></li>
</ul>
<h1 id="java-api文档"><a class="markdownIt-Anchor" href="#java-api文档"></a> JAVA API文档</h1>
<p><a href="https://www.matools.com/api/java8">中文在线文档</a></p>
<p><code>JDK &gt; Packages &gt; Interfaces + class + Exceptions &gt; function</code></p>
<h1 id="java-算数运算符"><a class="markdownIt-Anchor" href="#java-算数运算符"></a> JAVA 算数运算符</h1>
<p>运算符是一种特殊的符号，用于表示数据的运算，赋值和比较。</p>
<h2 id="算数运算符"><a class="markdownIt-Anchor" href="#算数运算符"></a> 算数运算符</h2>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">运算</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">正号</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">负号</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">加</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">减</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">乘</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">除</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">取模（取余）</td>
</tr>
<tr>
<td style="text-align:center">++</td>
<td style="text-align:center">自增</td>
</tr>
<tr>
<td style="text-align:center">–</td>
<td style="text-align:center">自减</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">字符串相加</td>
</tr>
</tbody>
</table>
<h2 id="加号"><a class="markdownIt-Anchor" href="#加号"></a> 加号</h2>
<ul>
<li>当左右两边都是数值类型，则做加法。</li>
<li>当左右两边有一方是字符串类型，则做拼接。</li>
<li>运算顺序，从左到右，右括号除外。</li>
</ul>
<h2 id="赋值运算符"><a class="markdownIt-Anchor" href="#赋值运算符"></a> 赋值运算符</h2>
<p>基本赋值运算符：<code>=</code></p>
<p>复合运算符：<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>%=</code>。</p>
<h2 id="关系运算符"><a class="markdownIt-Anchor" href="#关系运算符"></a> 关系运算符</h2>
<p>关系运算符的结果都是<code>boolean</code> 类型</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">运算</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">==</td>
<td style="text-align:center">相等于</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td style="text-align:center">instanceof</td>
<td style="text-align:center">检查是否是类的对象</td>
</tr>
</tbody>
</table>
<h2 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符"></a> 逻辑运算符</h2>
<p>用于连接多个条件（多个关系表达式），最终的结果也是一个<code>boolean</code>值</p>
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">a&amp;b</th>
<th style="text-align:center">a&amp;&amp;b</th>
<th style="text-align:center">a|b</th>
<th style="text-align:center">a||b</th>
<th style="text-align:center">!a</th>
<th style="text-align:center">a^b(异或)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
</tr>
</tbody>
</table>
<p><strong>&amp;&amp;和&amp;的区别</strong></p>
<ul>
<li><code>&amp;&amp;</code>当第一个条件为<code>false</code>时，不再判断第二个条件。效率高。</li>
<li><code>&amp;</code>当第一个条件为<code>false</code>时，仍需判断第二个条件。效率低。</li>
<li>同理 <code>||</code> 和<code>|</code> 的区别也是如此</li>
</ul>
<h2 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符"></a> 位运算符</h2>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">运算</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">按位与</td>
</tr>
<tr>
<td style="text-align:center">|</td>
<td style="text-align:center">按位或</td>
</tr>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:center">按位取反</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">按位异或</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;</td>
<td style="text-align:center">算数右移，地位溢出，符号位不变，并用符号位补溢出的高位</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;</td>
<td style="text-align:center">算数左移，符号位不变，低位补</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;&gt;</td>
<td style="text-align:center">逻辑右移</td>
</tr>
</tbody>
</table>
<h2 id="三元运算符"><a class="markdownIt-Anchor" href="#三元运算符"></a> 三元运算符</h2>
<p>基本语法：<code>条件表达式 ? 表达式1 : 表达式2</code></p>
<ul>
<li>如果条件表达式结果为<code>true</code>，运算后的结果是表达式1；</li>
<li>如果条件表达式结果为<code>false</code>，运算后的结果是表达式2；</li>
</ul>
<h1 id="标识符"><a class="markdownIt-Anchor" href="#标识符"></a> 标识符</h1>
<p><strong>命名规则：（必须遵守）</strong></p>
<ul>
<li>由26个英文字母大小写，0-9，_或$组成</li>
<li>数字不可以开头，</li>
<li>不可以使用关键字或保留字，但能包含关键字或保留字</li>
<li>严格区分大小写，长度无限制。</li>
<li>不能含有空格。</li>
</ul>
<p><strong>命名规范</strong></p>
<ul>
<li>包名：多个单词组成时所有字母都是小写。</li>
<li>类名、接口名：多单词组成时，所有单词的首字母大写。</li>
<li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始后的所有单词首字母大写。</li>
<li>常量名：所有字母都大写。多单词时，每个单词用下划线连接。</li>
</ul>
<h1 id="键盘输入语句"><a class="markdownIt-Anchor" href="#键盘输入语句"></a> 键盘输入语句</h1>
<p>导入<code>java.util.Scanner</code>包，创建<code>Scanner</code>对象，调用方法进行输入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in); <span class="comment">// 创建Scanner 对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next(); <span class="comment">// 接收用户的输入</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="进制"><a class="markdownIt-Anchor" href="#进制"></a> 进制</h1>
<ul>
<li>二进制：以<code>0b</code>或<code>0B</code>开头</li>
<li>十进制：</li>
<li>八进制：以数字<code>0</code>开头</li>
<li>十六进制：以<code>0x</code>或<code>0X</code>开头表示。</li>
</ul>
<h2 id="进制的转换"><a class="markdownIt-Anchor" href="#进制的转换"></a> 进制的转换</h2>
<h3 id="其他进制转十进制"><a class="markdownIt-Anchor" href="#其他进制转十进制"></a> 其他进制转十进制</h3>
<ul>
<li>二进制转十进制</li>
</ul>
<p>从最低位(右边)开始，将每个位上的数提取出来，乘以2的（位数-1）次方，然后求和。</p>
<ul>
<li>八进制转十进制</li>
</ul>
<p>从最低位(右边)开始，将每个位上的数提取出来，乘以8的（位数-1）次方，然后求和。</p>
<ul>
<li>十六进制转十进制</li>
</ul>
<p>从最低位(右边)开始，将每个位上的数提取出来，乘以16的（位数-1）次方，然后求和。</p>
<h3 id="十进制转其他进制"><a class="markdownIt-Anchor" href="#十进制转其他进制"></a> 十进制转其他进制</h3>
<ul>
<li>十进制转二进制</li>
</ul>
<p>将该数不断除以2，指导商为0为止，然后将每步得到的余数倒过来。就是对应的二进制。</p>
<ul>
<li>十进制转八进制</li>
</ul>
<p>将该数不断除以8，指导商为0为止，然后将每步得到的余数倒过来。就是对应的八进制。</p>
<ul>
<li>十进制转十六进制</li>
</ul>
<p>将该数不断除以16，指导商为0为止，然后将每步得到的余数倒过来。就是对应的十六进制。</p>
<h3 id="其他进制相互转换"><a class="markdownIt-Anchor" href="#其他进制相互转换"></a> 其他进制相互转换</h3>
<ul>
<li>二进制转八进制</li>
</ul>
<p>从低位开始，将二进制数每三位一组，转成对应的八进制数即可。</p>
<ul>
<li>二进制转十六进制</li>
</ul>
<p>从低位开始，将二进制数每四位一组，转成对应的十六进制数即可。</p>
<ul>
<li>八进制转二进制</li>
</ul>
<p>将八进制数的每一位转成对应的一个3位的二进制数即可。</p>
<ul>
<li>十六进制转二进制</li>
</ul>
<p>将十六进制数的每一位转成对应的一个4位的二进制数即可。</p>
<h1 id="控制结构"><a class="markdownIt-Anchor" href="#控制结构"></a> 控制结构</h1>
<h2 id="顺序控制"><a class="markdownIt-Anchor" href="#顺序控制"></a> 顺序控制</h2>
<p>程序从上到下逐行执行，中间没有任何判断和跳转。</p>
<h2 id="分支控制"><a class="markdownIt-Anchor" href="#分支控制"></a> 分支控制</h2>
<ul>
<li><code>if...else if...if...</code></li>
<li><code>switch...case...default...</code></li>
</ul>
<h2 id="循环控制"><a class="markdownIt-Anchor" href="#循环控制"></a> 循环控制</h2>
<ul>
<li><code>for(循环变量初始化; 循环条件; 循环变量迭代) &#123; 循环体 &#125;</code></li>
<li><code>while(循环条件) &#123; 循环体; 循环变量迭代&#125;</code></li>
<li><code>do&#123; 循环体; 循环变量迭代&#125; while(循环条件)</code></li>
</ul>
<h2 id="跳转控制"><a class="markdownIt-Anchor" href="#跳转控制"></a> 跳转控制</h2>
<ul>
<li><code>break</code>：结束最近的一层循环，推出该层循环</li>
<li><code>continue</code>：结束本次循环，继续下一层循环</li>
<li><code>return</code>：表示跳出所在方法</li>
</ul>
<h1 id="数组-排序-查找"><a class="markdownIt-Anchor" href="#数组-排序-查找"></a> 数组、排序、查找</h1>
<h2 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h2>
<p>数组可以存放<code>多个</code> <code>同一类型</code> 数据，数组也是一种数据类型，是引用类型。</p>
<p>数组下标是从0开始编号的。</p>
<h3 id="数组的定义"><a class="markdownIt-Anchor" href="#数组的定义"></a> 数组的定义</h3>
<ul>
<li>
<p>动态初始化：<code>数组类型 数组名[] = new 数据类型[大小]</code></p>
</li>
<li>
<p>动态初始化，先声明，在创建。</p>
</li>
<li>
<p>静态初始化，<code>数据类型 数组名[] = &#123;元素值, 元素值, ...&#125;</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDef</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]; <span class="comment">// 动态初始化数组</span></span><br><span class="line">        <span class="type">int</span> num[];</span><br><span class="line">        num = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]; <span class="comment">// 先声明，再分配</span></span><br><span class="line">        <span class="type">int</span> q[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">// 静态初始化数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组的注意事项"><a class="markdownIt-Anchor" href="#数组的注意事项"></a> 数组的注意事项</h3>
<ul>
<li>数组内的元素必须是相同类型，</li>
<li>数组中的元素类型可以是任何数据类型，包括基本数据类型或引用数据类型，但不能混。</li>
<li>数组创建后，没有赋值，有默认值。</li>
<li>数组下标是从0开始的。</li>
<li>数组下标必须在指定范围内使用。</li>
<li>数组属于引用类型，数组型数据是对象(object)。</li>
</ul>
<h3 id="数组的赋值机制"><a class="markdownIt-Anchor" href="#数组的赋值机制"></a> 数组的赋值机制</h3>
<ul>
<li>基本数据类型赋值，这个值就是具体的数据，而且相互不影响。</li>
<li><strong>数组在默认情况下，是阴影传递，赋的值是地址。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDef</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="type">int</span> num[] = arr; <span class="comment">// 引用赋值，此时num发生变化，则arr会发生变化。</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组拷贝"><a class="markdownIt-Anchor" href="#数组拷贝"></a> 数组拷贝</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDef</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">       	<span class="type">int</span> <span class="variable">arr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];  <span class="comment">// 数组拷贝</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i ++)&#123;</span><br><span class="line">            arr2[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h2>
<h3 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h3>
<p>每次冒泡都将最大的数找出，并移动到后面。</p>
<ul>
<li>需要进行<code>arr.length - 1</code> 轮排序。</li>
<li>第<code>i</code>轮排序需要确定第<code>i</code>大数的位置。</li>
<li>每轮比较依次减少<code>i</code>次比较。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">26</span>, <span class="number">90</span>, <span class="number">86</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">72</span>, <span class="number">16</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = i; i &lt; arr.length; i ++) &#123;  <span class="comment">// 需要进行 arr.length - 1 次</span></span><br><span class="line">            <span class="comment">// 每次需要比较 arr.length - i - 1次</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; arr.length - i; j++) &#123; </span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;  <span class="comment">// 如果当前数比后一个数大，则进行交换</span></span><br><span class="line">                    <span class="type">int</span> a = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = a;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h2>
<ul>
<li>顺序查找：用目标值依次和数组中的元素进行比较，若相等，则查找到，若遍历结束仍没有找到，则不存在。</li>
<li>二分查找，需要保证原数组是有序的。</li>
</ul>
<h2 id="二维数组"><a class="markdownIt-Anchor" href="#二维数组"></a> 二维数组</h2>
<ul>
<li>动态初始化：<code>类型 数组名[][] = new 类型[大小][大小]</code></li>
<li>动态初始化：先声明，在分配空间</li>
<li>动态初始化：列数不确定</li>
<li>静态初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDef</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>]; <span class="comment">// 动态初始化数组</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> num[][];</span><br><span class="line">        num = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>]; <span class="comment">// 先声明，再分配</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> arr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][]; <span class="comment">// 列数不确定</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i ++)&#123; <span class="comment">// 给列分配空间。</span></span><br><span class="line">            arr[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> q[][] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>&#125;&#125;; <span class="comment">// 静态初始化数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="类与对象"><a class="markdownIt-Anchor" href="#类与对象"></a> 类与对象</h1>
<ul>
<li>类：就是数据类型，例如Cat</li>
<li>对象：就是一个具体的实例，<code>对象[属性, 行为]</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Object01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cat</span>();  <span class="comment">// 对象</span></span><br><span class="line">        cat1.name = <span class="string">&quot;hhh&quot;</span>;</span><br><span class="line">        cat1.age = <span class="number">20</span>;</span><br><span class="line">        cat1.color = <span class="string">&quot;红色&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> cat1.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cat</span>&#123; <span class="comment">// 类</span></span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="属性"><a class="markdownIt-Anchor" href="#属性"></a> 属性</h2>
<p><code>属性</code>也叫<code>成员变量</code>，也叫<code>field(字段)</code></p>
<ul>
<li>属性是类的一个组成部分，一般是数据类型，也可以是引用类型。</li>
</ul>
<p><strong>属性的定义方法：</strong></p>
<p><code>访问修饰符 属性类型 属性名</code></p>
<p>访问修饰符包括：<code>public</code>，<code>private</code>， <code>protected</code>，默认为<code>public</code></p>
<h2 id="成员方法"><a class="markdownIt-Anchor" href="#成员方法"></a> 成员方法</h2>
<p>某个类中的函数就是该类的成员方法或者叫成员函数。</p>
<p><strong>成员方法的定义：</strong></p>
<p><code>访问修饰符 返回类型 方法名(形参列表) &#123; 函数体 ; return 返回值;&#125;</code></p>
<ul>
<li>形参列表：代表成员方法的输入。</li>
<li>返回类型：表示成员方法的输出，若为<code>void</code>，则没有返回值</li>
<li><code>return</code>不是必须的</li>
</ul>
<p><strong>传参机制</strong></p>
<ul>
<li>值传递；方法运行后不会影响实参的值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>引用数据传递：接收数组，传递的是地址。</li>
</ul>
<p><strong>方法的递归调用</strong></p>
<ul>
<li>直接递归：方法自己本身直接调用自己。</li>
<li>简介递归</li>
</ul>
<h2 id="方法重载"><a class="markdownIt-Anchor" href="#方法重载"></a> 方法重载</h2>
<p>JAVA允许在同一个类中的成员方法中，有多个重名函数存在，但是要求形参列表不一样！</p>
<p><strong>重载的优点</strong></p>
<ul>
<li>减轻了起名的麻烦</li>
<li>减轻了记名的麻烦</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverLoad01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyCaculate</span> <span class="variable">myCaculate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCaculate</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">caculate</span> <span class="operator">=</span> myCaculate.Caculate(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">caculate1</span> <span class="operator">=</span> myCaculate.Caculate(<span class="number">1</span>, <span class="number">2.2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">caculate2</span> <span class="operator">=</span> myCaculate.Caculate(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCaculate</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Caculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">Caculate</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Caculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>方法名必须一样</li>
<li>形参列表必须不同，形参类型不同 或者 个数不同 或者 顺序不同。</li>
<li>参数名没有要求</li>
<li>返回类型无要求，返回类型不是构成方法重载的条件。</li>
</ul>
<h2 id="可变参数"><a class="markdownIt-Anchor" href="#可变参数"></a> 可变参数</h2>
<p>JAVA允许将同一个类中多个同名同功能但参数个数不同的方法，封装成同一个方法。</p>
<p><code>for(参数类型... 参数名)</code>，此时参数名可以当做数组使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarParameter01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HspMethod hspMethod=<span class="keyword">new</span> <span class="title class_">HspMethod</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> hspMethod.sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> hspMethod.sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HspMethod</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span>&#123;  <span class="comment">// 可以接受int类型的多个参数，可以将nums当作数组使用</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cun</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i ++)&#123;</span><br><span class="line">            cun += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cun;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>可变参数的实参可以直接是数组</li>
<li>可变参数的实参可以是0个或多个</li>
<li><strong>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</strong></li>
<li><strong>一个形参列表只能出现一个可变参数</strong></li>
</ul>
<h2 id="作用域"><a class="markdownIt-Anchor" href="#作用域"></a> 作用域</h2>
<p>包括<strong>局部变量</strong>或者<strong>全局变量</strong></p>
<ul>
<li>局部变量：定义在某一个成员方法中的变量 或定义在某一个代码块中 。作用域仅在该成员方法中 或 该代码块中。</li>
<li>全局变量：直接定义在类中的变量，属性就是全局变量，在该类中的任何成员方法中都可以直接使用。作用域在整个类中。</li>
<li>全局变量可以不用赋值，有默认值，局部变量必须赋值后才可以使用，不会有默认值。</li>
</ul>
<p><strong>注意事项</strong></p>
<ul>
<li>属性和局部变量可以重名，使用时遵守<code>就近原则</code></li>
<li>在同一个作用域内，两个局部变量不能重名</li>
<li>属性声明周期比较长，局部变量声明周期相对比较短</li>
</ul>
<p><strong>作用域范围</strong></p>
<ul>
<li>属性：可以被本类所有成员方法使用，也可以通过对象调用被其他类使用。</li>
<li>局部变量：只能在本成员方法中使用。</li>
</ul>
<p><strong>修饰符</strong></p>
<ul>
<li>属性：可以添加修饰符</li>
<li>局部变量：不可以添加修饰符</li>
</ul>
<h2 id="构造方法构造器"><a class="markdownIt-Anchor" href="#构造方法构造器"></a> 构造方法/构造器</h2>
<p><strong>基本语法：</strong><code>[修饰符] 方法名(形参列表) &#123; 方法体; &#125;</code></p>
<p>**作用：**在创建对象时，实现对对象的初始化。</p>
<ul>
<li>构造器的修饰符可以是默认的也可以是其他的。</li>
<li>构造器没有返回值</li>
<li>方法名和类名必须保持一致</li>
<li>构造器的调用是由系统完成的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constructor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xzt&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        System.out.println(person.name + <span class="string">&quot;的年龄为&quot;</span> + person.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    Person() &#123;  <span class="comment">// 默认构造函数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="type">int</span> age) &#123;  <span class="comment">// 重写构造函数</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3>
<ul>
<li>一个类可以构造多个构造器，即构造器的重载</li>
<li>若没有自定义构造器，则系统会自动给类生成一个默认无参构造器，但是若定义了一个新的构造器，则不会再自动生成一个默认无参构造器。</li>
</ul>
<h2 id="对象创建流程"><a class="markdownIt-Anchor" href="#对象创建流程"></a> 对象创建流程</h2>
<ul>
<li>加载类信息，只会加载一次</li>
<li>在堆中分配空间（地址）</li>
<li>完成对象初始化，
<ul>
<li>默认初始化</li>
<li>显式初始化</li>
<li>构造器初始化</li>
</ul>
</li>
<li>在对象堆中的地址，返回给创建的对象</li>
</ul>
<h2 id="this关键字"><a class="markdownIt-Anchor" href="#this关键字"></a> this关键字</h2>
<p><code>java</code>虚拟机给每个对象分配<code>this</code>，代表当前对象。</p>
<p>**作用：**在成员方法中，<code>this</code>主要用在当形参和属性名同名时，使用<code>this.属性名</code>代替属性名，来区分同名问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constructor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xzt&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        System.out.println(person.name + <span class="string">&quot;的年龄为&quot;</span> + person.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    Person() &#123;  <span class="comment">// 默认构造函数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="type">int</span> age) &#123;  <span class="comment">// 重写构造函数</span></span><br><span class="line">        <span class="built_in">this</span>.age = age; <span class="comment">// 此时使用this.age 代替属性age</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>本质</strong>：哪个对象调用，<code>this</code>就代表哪个对象</p>
<p><strong>注意事项</strong></p>
<ul>
<li><code>this</code>可以访问本类的属性、方法、构造器</li>
<li><code>this</code>用于区分当前类的属性和局部变量</li>
<li>访问成员方法时语法：<code>this.方法名(参数列表)</code></li>
<li>访问构造器语法：<code>this(参数列表)</code>；注意只能在构造器中使用</li>
<li><code>this</code>不能再类定义的外部使用，只能再类定义的方法中使用</li>
</ul>
<h1 id="intellij-idea"><a class="markdownIt-Anchor" href="#intellij-idea"></a> Intellij IDEA</h1>
<h2 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键</h2>
<table>
<thead>
<tr>
<th style="text-align:center">功能描述</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">删除当前行</td>
<td style="text-align:center"><code>ctrl + y</code></td>
</tr>
<tr>
<td style="text-align:center">复制当前行</td>
<td style="text-align:center"><code>ctrl + d</code></td>
</tr>
<tr>
<td style="text-align:center">代码格式化</td>
<td style="text-align:center"><code>ctrl + alt + L</code></td>
</tr>
<tr>
<td style="text-align:center">补全代码</td>
<td style="text-align:center">补全代码：<code>alt + /</code></td>
</tr>
<tr>
<td style="text-align:center">单行注释</td>
<td style="text-align:center"><code>ctrl + /</code></td>
</tr>
<tr>
<td style="text-align:center">多行注释</td>
<td style="text-align:center"><code>ctrl + shift + /</code></td>
</tr>
<tr>
<td style="text-align:center">显示错误</td>
<td style="text-align:center"><code>alt + Enter</code></td>
</tr>
<tr>
<td style="text-align:center">快速运行代码</td>
<td style="text-align:center"><code>ctrl + shift + F10</code></td>
</tr>
<tr>
<td style="text-align:center">生成构造器、get函数、set函数</td>
<td style="text-align:center"><code>alt + insert</code></td>
</tr>
<tr>
<td style="text-align:center">查看类的继承关系</td>
<td style="text-align:center"><code>ctrl + h</code></td>
</tr>
<tr>
<td style="text-align:center">定位到定义的方法</td>
<td style="text-align:center"><code>ctrl + b</code></td>
</tr>
<tr>
<td style="text-align:center">自动分配变量名</td>
<td style="text-align:center">在后面加<code>.var</code></td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
</tbody>
</table>
<h2 id="模板"><a class="markdownIt-Anchor" href="#模板"></a> 模板</h2>
<p>查看模板：<code>file -&gt; settings -&gt; editor -&gt; Live templates -&gt; Java</code>，可以自定义自己的模板</p>
<table>
<thead>
<tr>
<th style="text-align:center">功能描述</th>
<th style="text-align:center">快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">主函数</td>
<td style="text-align:center"><code>main + enter</code></td>
</tr>
<tr>
<td style="text-align:center">输出语句</td>
<td style="text-align:center"><code>sout + enter</code></td>
</tr>
<tr>
<td style="text-align:center">for循环语句</td>
<td style="text-align:center"><code>fori + enter</code></td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
</tbody>
</table>
<h1 id="面向对象编程中"><a class="markdownIt-Anchor" href="#面向对象编程中"></a> 面向对象编程（中）</h1>
<h2 id="包"><a class="markdownIt-Anchor" href="#包"></a> 包</h2>
<p><strong>作用</strong></p>
<ul>
<li>可以区分相同名字的类</li>
<li>当类很多时，可以很好的管理类</li>
<li>控制访问范围</li>
</ul>
<p><strong>基本语法</strong>：<code>package.com.constructor</code></p>
<ul>
<li><code>package</code> 关键字，表示打包</li>
<li><code>com.constructor</code> 表示包名</li>
</ul>
<p><strong>原理：</strong> 创建不同的文件夹来保存类文件。</p>
<p><strong>命名规则</strong></p>
<ul>
<li>只能包含数字、字母、下划线、小圆点，但不能以数字开头，不能是数字或保留字</li>
</ul>
<p><strong>命名规范</strong></p>
<ul>
<li>一般是小写字母 + 小圆点，一般是<code>com.公司名.项目名.业务模块名</code></li>
</ul>
<h3 id="常用的包"><a class="markdownIt-Anchor" href="#常用的包"></a> 常用的包</h3>
<ul>
<li><code>java.lang.*</code> 默认引入，不需要再引入。例如<code>Mathl类</code></li>
<li><code>java.util.*</code> 系统提供的工具包，工具类，使用<code>Scanner</code></li>
<li><code>java.net.*</code> 网路包，网络开发</li>
<li><code>java.awt.*</code> Java界面开发，GUI</li>
</ul>
<h3 id="导入包"><a class="markdownIt-Anchor" href="#导入包"></a> 导入包</h3>
<p>基本语法：<code>import 包</code>，引入一个包的目的是使用该包下面的类。</p>
<ul>
<li><code>package</code>的作用是声明当前类所在的包，需要放在类的最上面，一个类中最多只有一个<code>package</code></li>
<li><code>import</code> 放在<code>package</code>和类之间，可以有多条且顺序没有要求</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pkg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">// 只会导入java.util下面的Scanner类</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;  <span class="comment">// 导入java.util包下面的所有类， 不建议使用</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Import01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;-<span class="number">1</span>, <span class="number">20</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(arr); <span class="comment">// 排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i ++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
<h2 id="访问修饰符"><a class="markdownIt-Anchor" href="#访问修饰符"></a> 访问修饰符</h2>
<p>java提供四种访问修饰控制符，用于控制方法和属性（成员变量）的访问权限。</p>
<ul>
<li>公开级别：<code>public</code> 修饰，对外公开</li>
<li>受保护级别：<code>protected</code> 修饰，对子类和同一个包中的类公开</li>
<li>默认级别：没有修饰符，向同一个包的类公开，对子类不能访问</li>
<li>私有级别：<code>private</code> 修饰，只有类本身可以访问，不对外公开</li>
</ul>
<p><strong>注意事项</strong></p>
<ul>
<li>修饰符可以用来修饰类中的属性，成员方法以及类</li>
<li>只有默认的和<code>public</code>才可以修饰类</li>
</ul>
<h2 id="三大特征"><a class="markdownIt-Anchor" href="#三大特征"></a> 三大特征 ⭐</h2>
<h3 id="封装"><a class="markdownIt-Anchor" href="#封装"></a> 封装</h3>
<p><strong>定义：</strong> 把抽象出来数据[属性]和对数据的操作[方法]封装在一起，数据被保护在内部，程序的其他部分只有通过被授权的操作[方法]，才能对数据进行操作。</p>
<p><strong>优点</strong></p>
<ul>
<li>隐藏实现细节，直接调用即可</li>
<li>可以对数据进行验证，保证安全合理</li>
</ul>
<p><strong>步骤</strong></p>
<ol>
<li>将属性私有化</li>
<li>提供一个<code>public 的 set</code>方法，对属性判断并赋值</li>
<li>提供一个<code>public 的 get</code>方法，用于获得属性值</li>
</ol>
<p>当使用构造器对属性赋值时，构造器函数体的编写方法需要进行改变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.encapsulation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encapsulation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;xzt&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">200</span>);</span><br><span class="line">        person.setSalary(<span class="number">30000</span>);</span><br><span class="line">        System.out.println(person.info());</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">smith</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">30</span>, <span class="number">15000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有三个属性的构造器 并进行重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        setName(name);</span><br><span class="line">        setAge(age);</span><br><span class="line">        setSalary(salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 快捷键 alt + insert</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(age &gt;= <span class="number">1</span> &amp;&amp; age &lt;= <span class="number">120</span>)</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄需要在1~120之间&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;信息为：名字是 &quot;</span> + getName() + <span class="string">&quot;, 年龄是：&quot;</span> + getAge() + <span class="string">&quot;，工资是：&quot;</span> + getSalary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h3>
<p><strong>定义：</strong> 当两个类中有很多属性和方法是相同的，则可以使用继承来减少代码复用。</p>
<p><strong>基本语法：</strong></p>
<p><code>class 子类名 extends 父类名 &#123;&#125;</code></p>
<ul>
<li>子类会自动拥有父类定义的属性和方法</li>
<li>父类又叫超类或者基类</li>
<li>子类又叫派生类</li>
</ul>
<p><strong>优点：</strong> 代码的复用性、扩展性、维护性都得到很大提升</p>
<p><strong>注意事项：</strong></p>
<ul>
<li>子类继承了所有的属性和方法，但是私有属性不能在子类中直接访问，要通过公共的方法去访问。</li>
<li><strong>子类必须调用父类的构造器，完成父类的初始化。</strong> 在子类的构造函数中会默认调用<code>super()</code>函数</li>
<li>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会调用父类的无参构造器，如果父类中没有提供无参构造器，则必须在子类的构造器中用<code>super()</code>去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过。</li>
<li>如果希望指定去调用父类的某个构造器，则显示的调用一下，<code>super(参数列表)</code></li>
<li><code>super()</code> 在使用时，需要放在构造器的第一行（<code>super()</code>只能在构造器中使用）</li>
<li><code>super()</code> 和 <code>this()</code> 都只能放在构造器的第一行，因此这两个方法不能共存在一个构造器</li>
<li>java所有类时<code>Object类</code>的子类，<code>Object类</code>是所有类的基类</li>
<li>父类构造器的调用不限于直接父类。将一直往上追溯直到<code>Object类</code>（顶级父类）</li>
<li>子类最多只能继承一个父类（指直接继承），即<strong>java中是单继承机制</strong></li>
<li>不能滥用继承，子类和父类之间必须满足<code>is-a</code>的逻辑关系（子类是父类中的一类）</li>
</ul>
<p><strong>super关键字：</strong> <code>super()</code> 代表父类的引用，用于访问父类的属性，方法，构造器。</p>
<ul>
<li>访问父类的属性/方法，但不能访问<code>private</code>私有属性/方法，<code>super.属性名</code></li>
<li>访问父类的构造器，<code>super(参数列表)</code>只能放在构造器的第一行</li>
</ul>
<p><strong>优点</strong></p>
<ul>
<li>调用父类构造器，分工明确，父类属性由父类初始化，子类的属性由子类初始化</li>
<li>当子类中有和父类中成员（属性和方法）重名时，为了访问父类的成员，必须通过<code>super</code>关键字。</li>
<li>若多个上级类都有同名，则<code>super</code>访问遵循就近原则</li>
</ul>
<p><code>super</code>和<code>this</code><strong>的比较</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">No.</th>
<th style="text-align:center">区别点</th>
<th style="text-align:center">this</th>
<th style="text-align:center">super</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">访问属性</td>
<td style="text-align:center">访问本类中的属性，若本类中没有此属性，则从父类中继续查找</td>
<td style="text-align:center">访问父类中的属性</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">调查方法</td>
<td style="text-align:center">访问本类中的方法，若本类中没有此方法，则从父类中继续查找</td>
<td style="text-align:center">访问父类中的方法</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">调用构造器</td>
<td style="text-align:center">调用本类的构造器，必须放在构造器首行</td>
<td style="text-align:center">调用父类的构造器，必须放在子类构造器的首行</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">特殊</td>
<td style="text-align:center">表示当前对象</td>
<td style="text-align:center">子类中访问父类对象</td>
</tr>
</tbody>
</table>
<h4 id="方法重写覆盖"><a class="markdownIt-Anchor" href="#方法重写覆盖"></a> 方法重写/覆盖</h4>
<p>方法重写就是子类有一个方法，和父类的某个方法的名称、返回类型、参数一样，那么就说子类的这个方法覆盖了父类的方法。</p>
<p><strong>注意事项</strong></p>
<ul>
<li>子类的方法的参数、方法名称要和父类方法的参数、名称完全一样</li>
<li>子类的方法的返回类型要和父类方法的返回类型一样，或者是父类返回类型的子类。例如：父类返回类型为<code>Object</code>,子类方法的返回类型可以是<code>String</code>。</li>
<li>子类方法不能缩小父类方法的访问权限：<code>public &gt; protected &gt; 默认 &gt; private</code></li>
</ul>
<h3 id="多态"><a class="markdownIt-Anchor" href="#多态"></a> 多态</h3>
<p>方法或对象具有多种形态。是面向对象的第三大特征，多态是建立在封装和继承的基础之上的。</p>
<p><strong>作用：</strong> 提高代码的复用性</p>
<ul>
<li>方法的多态：方法的<code>重载 和 重写</code>就体现多态</li>
<li><strong>对象的多态：【核心】</strong>
<ul>
<li>**一个对象的编译类型和运行类型可以不一致。**例如：<code>Animal animal = new Dog()</code>；可以让一个父类的引用指向子类的对象。<code>animal</code>的编译类型是<code>Animal</code>，运行类型是<code>Dog</code></li>
<li>编译类型在定义对象时，就确定了，不能改变</li>
<li>运行类型是可以变化的。</li>
<li>编译类型看定义时 <code>=</code> 左边，运行类型看 <code>=</code> 右边。</li>
</ul>
</li>
</ul>
<p><strong>注意事项</strong></p>
<ul>
<li>两个类存在继承关系</li>
<li>多态是向上转型
<ul>
<li>本质：父类的引用指向子类对象</li>
<li>语法：<code>父类类型 引用名 = new 子类类型()</code></li>
<li>特点：编译类型看左边，运行类型看右边</li>
</ul>
</li>
<li>多态的向下转型
<ul>
<li>语法：<code>子类类型 引用名 = (子类类型) 父类引用</code>；</li>
<li>只能强转父类的引用，不能强转父类的对象</li>
<li>要求父类的引用必须指向的是当前目标类型的对象</li>
<li>可以调用子类类型中所有的成员日</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// 向上转型</span></span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal; <span class="comment">// 向下转型</span></span><br><span class="line"></span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animal; <span class="comment">// 错误，animal原来是Dog类型，不能转为cat</span></span><br></pre></td></tr></table></figure>
<p><strong>属性重写：</strong></p>
<ul>
<li>属性没有重写之说，属性的值看编译类型。</li>
<li><code>instanceof</code> 比较操作符，用于判断对象的运行类型是否为XX类型或XX类型的子类型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        System.out.println(base.count); <span class="comment">// 10，看编译类型</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(base <span class="keyword">instanceof</span> Sub); <span class="comment">// True</span></span><br><span class="line">        System.out.println(base <span class="keyword">instanceof</span> Base); <span class="comment">// True</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Sub</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        System.out.println(sub <span class="keyword">instanceof</span> Sub); <span class="comment">// True</span></span><br><span class="line">        System.out.println(sub <span class="keyword">instanceof</span> Base); <span class="comment">// True</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="java动态绑定机制"><a class="markdownIt-Anchor" href="#java动态绑定机制"></a> java动态绑定机制 ⭐</h4>
<ul>
<li>Java重要特性：<code>动态绑定机制</code></li>
<li>当调用对象方法的时候，该方法会和该对象的内存地址/运行类型绑定</li>
<li>当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.poly._dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBinding</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(a.sum()); <span class="comment">// 30  动态绑定机制，所以调用父类的sum，所以 getI()是B的为20  20 + 10</span></span><br><span class="line">        System.out.println(a.sum1()); <span class="comment">// 20  属性没有动态绑定机制，所以调用父类的sum1，所以 i为10  10 + 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public int sum()&#123;</span></span><br><span class="line">    <span class="comment">//        return getI() + 20;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public int sum1()&#123;</span></span><br><span class="line"><span class="comment">//        return i + 20;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="多态的应用"><a class="markdownIt-Anchor" href="#多态的应用"></a> 多态的应用</h4>
<ul>
<li>多态数组：数组的定义类型为父类型，里面保存的实际元素类型为子类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tes</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Person[] person =  <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Person[<span class="number">0</span>] = student;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        Person[<span class="number">1</span>] = teacher;</span><br><span class="line">        <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; person.length; i++)&#123;</span><br><span class="line">            <span class="comment">//person[i] 编译类型是Person，运行类型是根据实际情况由JVN来判断</span></span><br><span class="line">            System.out.println(person[i].say());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 因为teach() 和study() 不存在于Person类中，所以需要判断后进行向下强转</span></span><br><span class="line">            <span class="keyword">if</span>(person[i] <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">                <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) person[i];</span><br><span class="line">                s.study();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(person[i] <span class="keyword">instanceof</span> Teacher)&#123;</span><br><span class="line">                ((Teacher) person[i]).teach();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 老师类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>多态参数：方法定义的参数类型为父类，实参类型允许是子类类型。</li>
</ul>
<h2 id="object-类详解"><a class="markdownIt-Anchor" href="#object-类详解"></a> Object 类详解</h2>
<h3 id="equal方法"><a class="markdownIt-Anchor" href="#equal方法"></a> <code>equal</code>方法</h3>
<ul>
<li><code>==</code> 既可以判断基本类型，又可以判断引用类型</li>
<li><code>==</code> 如果判断基本类型，判断的是值是否相等，</li>
<li><code>==</code> 如果判断引用类型，判断的是地址是否相等，<strong>即判断的是否是同一个对象</strong></li>
<li><code>equal</code> 是<code>Object</code>类中的方法，只能判断引用类型</li>
<li>默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// String类中重写的equals方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hashcode方法"><a class="markdownIt-Anchor" href="#hashcode方法"></a> <code>hashCode</code>方法</h3>
<ul>
<li>提高具有哈希表结构的容器的效率</li>
<li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样</li>
<li>两个引用，如果指向的是不同对象，则哈希值不一样</li>
<li>哈希值主要是根据地址号来的，不能完全将哈希值等价于地址</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa2</span> <span class="operator">=</span> aa;</span><br><span class="line">        System.out.println(aa.hashCode);</span><br><span class="line">        System.out.println(aa1.hashCode);  <span class="comment">//aa1 和 aa的hashcode相同</span></span><br><span class="line">        System.out.println(aa2.hashCode);  <span class="comment">// aa2 和 aa的hashcode相同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="tostring方法"><a class="markdownIt-Anchor" href="#tostring方法"></a> <code>toString</code>方法</h3>
<p>默认返回：<code>全类名 + @ + 哈希值的十六进制</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object 类中的toString方法</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Integer.toHexString(hashCode()); 将对象以hashcode值转成十六进制返回</span></span><br></pre></td></tr></table></figure>
<ul>
<li>重写<code>toString</code>方法，在类中使用快捷键<code>alt + insert</code> 然后选中<code>toString</code>即可</li>
<li>当直接输出一个对象时，<code>toString</code>方法会被默认调用</li>
</ul>
<h3 id="finalize方法"><a class="markdownIt-Anchor" href="#finalize方法"></a> <code>finalize</code>方法</h3>
<ul>
<li>当对象被回收时，系统会自动调用该对象的<code>finalize</code>方法。子类可以重写该方法，做一些释放资源的操作</li>
<li>什么时候被回收：当某个对象没有任何引用时，则<code>jvm</code>就认为该对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用<code>finalize</code>方法</li>
<li>垃圾回收机制的调用，是由系统来决定（即有自己的<code>GC算法</code>），也可以通过<code>System.gc()</code>主动触发垃圾回收机制。</li>
</ul>
<h2 id="断点调试"><a class="markdownIt-Anchor" href="#断点调试"></a> 断点调试</h2>
<p>在断点调试过程中，试运行状态，是以对象的运行类型来执行的。</p>
<ul>
<li>断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。进行分析从而会找到这个Bug</li>
</ul>
<h3 id="快捷键-2"><a class="markdownIt-Anchor" href="#快捷键-2"></a> 快捷键</h3>
<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>F7</code></td>
<td style="text-align:center">跳入方法内</td>
</tr>
<tr>
<td style="text-align:center"><code>F8</code></td>
<td style="text-align:center">跳过，逐行执行代码</td>
</tr>
<tr>
<td style="text-align:center"><code>shift + F8</code></td>
<td style="text-align:center">跳出方法</td>
</tr>
<tr>
<td style="text-align:center"><code>F9</code></td>
<td style="text-align:center">resume，执行到下一个断点</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段1</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础入门 Java8</title>
    <url>/2022/05/01/JAVA/03JavaBasic/</url>
    <content><![CDATA[<div class="note info simple"><p>Java 8是Java语言开发的一个主要版本</p>
</div>
<h1 id="java-8新特性"><a class="markdownIt-Anchor" href="#java-8新特性"></a> Java 8新特性</h1>
<ul>
<li>速度更快</li>
<li>代码更少，增加了新的语法，<strong>Lambda表达式</strong></li>
<li>强大的<code>Stream API</code></li>
<li>便于并行</li>
<li>最大化减少空指针异常：<code>Optional</code>类</li>
<li><code>Nashorn</code>引擎，允许在JVM上运行JS应用</li>
</ul>
<h1 id="lambda表达式"><a class="markdownIt-Anchor" href="#lambda表达式"></a> Lambda表达式</h1>
<blockquote>
<p>Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p>
</blockquote>
<h2 id="本质"><a class="markdownIt-Anchor" href="#本质"></a> 本质</h2>
<p>作为接口的实例</p>
<h2 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h2>
<ul>
<li><code>-&gt;</code>lambda操作符，或箭头操作符</li>
<li><code>-&gt;</code>左边：lambda形参列表，其实就是接口中的抽象方法的形参列表</li>
<li><code>-&gt;</code>右边：lambda体，其实就是重写的抽象方法的方法体</li>
</ul>
<h2 id="语法格式"><a class="markdownIt-Anchor" href="#语法格式"></a> 语法格式</h2>
<ul>
<li>语法格式一：无参，无返回值</li>
</ul>
<p><code>Runnable r2 = () -&gt; &#123; System.out.println(&quot;Hello world&quot;); &#125;</code></p>
<ul>
<li>语法格式二：lambda需要一个参数，但是没有返回值</li>
</ul>
<p><code>Consumer&lt;String&gt; con1 = (String s) -&gt; &#123; System.out.println(s); &#125;</code></p>
<ul>
<li>语法格式三：数据类型可以省略，因为可由编译器推断得出，称为<strong>类型推断</strong></li>
</ul>
<p><code>Consumer&lt;String&gt; con1 = (s) -&gt; &#123; System.out.println(s); &#125;</code></p>
<ul>
<li>语法格式四：lambda若只需要一个参数时，参数的小括号可以省略</li>
</ul>
<p><code>Consumer&lt;String&gt; con1 = s -&gt; &#123; System.out.println(s); &#125;</code></p>
<ul>
<li>语法格式五：lambda需要两个或以上的参数，多条执行语句，并且可以有返回值</li>
</ul>
<p><code>Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; &#123; return Integer.compare(o1, o2); &#125;;</code></p>
<ul>
<li>语法格六：当lambda体只有一条语句时， return 与大括号若有，都可以省略</li>
</ul>
<p><code>Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; Integer.compare(o1, o2);</code></p>
<p><code>Consumer&lt;String&gt; con1 = s -&gt; System.out.println(s);</code></p>
<p><strong>总结</strong></p>
<ul>
<li><code>-&gt;</code> 左边：lambda形参列表的参数类型可以省略（类型推断）；如果lambda形参列表只有一个参数，其一对<code>()</code>也可以省略</li>
<li><code>-&gt;</code> 右边：lambda体应该使用一对<code>&#123;&#125;</code>包裹；如果lambda体只有一条执行语句（可能是 <code>return</code> 语句），则可以省略 <code>&#123;&#125;</code> 和 <code>return</code> 关键字</li>
</ul>
<h2 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h2>
<p>以前使用匿名实现类表示的现在都可以用 Lambda 表达式来写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.lambda_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * Lambda表达式的使用举例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;  <span class="comment">// 接口中只有一个方法，则可以写为lambda表达式</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        r1.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Lambda表达式进行优化</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        r2.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 语法格式三</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1, o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> com1.compare(<span class="number">12</span>, <span class="number">21</span>);</span><br><span class="line">        System.out.println(compare);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Lambda进行优化</span></span><br><span class="line">        Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; Integer.compare(o1, o2);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">compare1</span> <span class="operator">=</span> com2.compare(<span class="number">12</span>, <span class="number">21</span>);</span><br><span class="line">        System.out.println(compare1);</span><br><span class="line">        <span class="comment">// 方法引用</span></span><br><span class="line">        Comparator&lt;Integer&gt; com3 = Integer::compare;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">compare2</span> <span class="operator">=</span> com2.compare(<span class="number">12</span>, <span class="number">21</span>);</span><br><span class="line">        System.out.println(compare2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语法格式二</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        Consumer&lt;String&gt; con = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        con.accept(<span class="string">&quot;abcdefd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用lambda表达式进行优化</span></span><br><span class="line">        Consumer&lt;String&gt; con1 = (String s) -&gt; System.out.println(s);</span><br><span class="line">        con1.accept(<span class="string">&quot;abcdefd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="函数式function接口"><a class="markdownIt-Anchor" href="#函数式function接口"></a> 函数式(Function)接口</h1>
<blockquote>
<p>如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口</p>
</blockquote>
<p>可以使用<code>@FunctionalInterface</code>注解，不加也是函数式接口，加上可以帮助校验。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.functioninterface_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.functioninterface_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionalInterface_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;Hell world&quot;</span>);</span><br><span class="line">        myInterface.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h2>
<ul>
<li>只包含一个抽象方法的接口，称为<strong>函数式接口</strong></li>
<li>你可以通过Lambda表达式来创建该接口的对象。（若Lambda表达式抛出一个受检异常（即：非运行时异常），那么该异常需要在目标接口的抽象方法上进行声明）</li>
<li>我们可以在一个接口上使用<code>@FunctionalInterface</code>注解，这样做可以检查它是否在一个函数是接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口</li>
<li>在<code>java.util.function</code>包下定义了 Java 8 的丰富的函数式接口</li>
</ul>
<h2 id="内置核心函数式接口"><a class="markdownIt-Anchor" href="#内置核心函数式接口"></a> 内置核心函数式接口、</h2>
<p><strong>四大核心内置核心函数式接口</strong></p>
<table>
<thead>
<tr>
<th>函数式接口</th>
<th>参数类型</th>
<th>返回类型</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Consumer&lt;T&gt;</code> 消费型接口</td>
<td>T</td>
<td>void</td>
<td>对类型为T的对象应用操作，包含方法：<code>void accept(T t)</code></td>
</tr>
<tr>
<td><code>supplier&lt;T&gt;</code> 供给型接口</td>
<td>T</td>
<td>T</td>
<td>返回类型为T的对象，包含方法：<code>T get()</code></td>
</tr>
<tr>
<td><code>Function&lt;T, R&gt;</code> 函数型接口</td>
<td>T</td>
<td>R</td>
<td>对类型为T的对象应用此操作，并返回结果。结果是R类型的对象。包含方法<code>R apply(T t)</code></td>
</tr>
<tr>
<td><code>Predicate&lt;T&gt;</code> 断定型接口</td>
<td>T</td>
<td>Boolean</td>
<td>确定类型为T的对象是否满足某约束，并返回Boolean值，包含方法：<code>boolean test(T t)</code></td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.functioninterface_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainFunctionalInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Consumer&lt;Integer&gt; consumer = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数 = &quot;</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Consumer&lt;Integer&gt; consumer1 = (integer) -&gt; System.out.println(<span class="string">&quot;数 = &quot;</span> + integer);  <span class="comment">// 转为Lambda表达式</span></span><br><span class="line"></span><br><span class="line">        Supplier&lt;Integer&gt; supplier = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Supplier&lt;Integer&gt; supplier1 = () -&gt; <span class="number">20</span>;  <span class="comment">// &#123;&#125; 和 return 都省略</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;南京&quot;</span>, <span class="string">&quot;普京&quot;</span>, <span class="string">&quot;天津&quot;</span>, <span class="string">&quot;东京&quot;</span>);</span><br><span class="line">        List&lt;String&gt; filterStrs = filterString(list, <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s.contains(<span class="string">&quot;京&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(filterStrs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为 Lambda 表达式</span></span><br><span class="line">        List&lt;String&gt; filterStrs1 = filterString(list, s -&gt; s.contains(<span class="string">&quot;京&quot;</span>));</span><br><span class="line">        System.out.println(filterStrs1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">filterString</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre.test(s)) &#123;</span><br><span class="line">                strings.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strings;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="方法引用和构造器引用"><a class="markdownIt-Anchor" href="#方法引用和构造器引用"></a> 方法引用和构造器引用</h1>
<h2 id="方法引用"><a class="markdownIt-Anchor" href="#方法引用"></a> 方法引用</h2>
<blockquote>
<p>当要传递给Lambda 体的操作，已经有实现的方法了，可以使用方法引用</p>
</blockquote>
<ul>
<li>方法引用可以看作是Lambda表达式深层次的表达，换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法堂。</li>
<li><strong>要求</strong>：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致。</li>
<li><strong>格式</strong>：使用操作符 <code>::</code> 将类或对象与方法名分割开来</li>
</ul>
<h3 id="使用情况"><a class="markdownIt-Anchor" href="#使用情况"></a> 使用情况</h3>
<ul>
<li><code>对象::实例化方法名</code></li>
<li><code>类::静态方法名</code></li>
<li><code>类::实例化方法名</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.methodreference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReference</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer = str -&gt; System.out.println(str);</span><br><span class="line">        consumer.accept(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 方法引用 类::静态方法名</span></span><br><span class="line">        Consumer&lt;String&gt; consumer1 = System.out::println;</span><br><span class="line"></span><br><span class="line">        consumer1.accept(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        Supplier&lt;String&gt; supplier = () -&gt; name;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用方法引用 对象名::实例化方法名</span></span><br><span class="line">        Supplier&lt;String&gt; supplier1 = name::toString;</span><br><span class="line">        System.out.println(supplier1.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造器引用"><a class="markdownIt-Anchor" href="#构造器引用"></a> 构造器引用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.methodreference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReference01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Supplier&lt;Employee&gt; sup = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Employee&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Lambda 表达式</span></span><br><span class="line">        Supplier&lt;Employee&gt; sup1 = () -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造器引用</span></span><br><span class="line">        Supplier&lt;Employee&gt; sup2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="强大的stream-api"><a class="markdownIt-Anchor" href="#强大的stream-api"></a> 强大的Stream API</h1>
<blockquote>
<p>把真正的函数式编程风格引入到Java中，这是目前为止对Java类库最好的补充，因为 Stream API可以极大的提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p>
</blockquote>
<ul>
<li>Stream API 对集合数据进行操作，就类似于使用SQL执行的数据库查询，也可以使用Stream API来并行执行操作。</li>
<li>Stream API 提供了一种高效且易于使用的处理数据的方式。</li>
</ul>
<h2 id="stream-和-collection集合的区别"><a class="markdownIt-Anchor" href="#stream-和-collection集合的区别"></a> Stream 和 Collection集合的区别</h2>
<ul>
<li>Collection 是一种面向静态的内存数据结构，而 Stream 是有关计算的。前者主要是面向内存的，存储在内存中，后者主要是面向CPU，通过CPU实现计算。</li>
</ul>
<h2 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h2>
<ul>
<li>Stream 自己不会存储元素</li>
<li>Stream 不会改变源对象，相反，他们会返回一个持有结果的新Stream</li>
<li>Stream 操作是延迟执行的，这意味者他们会等到需要结果的时候才执行</li>
</ul>
<h2 id="操作步骤"><a class="markdownIt-Anchor" href="#操作步骤"></a> 操作步骤</h2>
<ol>
<li><strong>创建 Stream</strong></li>
</ol>
<p>一个数据源（如：集合、数组），获取一个流</p>
<ol start="2">
<li>中间操作</li>
</ol>
<p>一个中间操作链，对数据员的数据进行处理</p>
<ol start="3">
<li><strong>终止操作</strong>（终端操作）</li>
</ol>
<p>一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再使用</p>
<h2 id="创建对象的方式"><a class="markdownIt-Anchor" href="#创建对象的方式"></a> 创建对象的方式</h2>
<h3 id="通过集合"><a class="markdownIt-Anchor" href="#通过集合"></a> 通过集合</h3>
<p>Java 8中的 <code>Collection</code> 接口被扩展，提供两个获取流的方法：</p>
<ul>
<li><code>default Stream&lt;E&gt; stream()</code> 返回一个顺序流</li>
<li><code>default Stream&lt;E&gt; parallelStream()</code> 返回一个并行流</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个顺序流</span></span><br><span class="line">    Stream&lt;String&gt; stream = strings.stream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个并行流</span></span><br><span class="line">    Stream&lt;String&gt; stringStream = strings.parallelStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通过数组"><a class="markdownIt-Anchor" href="#通过数组"></a> 通过数组</h3>
<p>Java 8中的 <code>Arrays</code>的静态方法 <code>stream()</code> 可以获取数组流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    Arrays.stream(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通过-stream-的-of"><a class="markdownIt-Anchor" href="#通过-stream-的-of"></a> 通过 Stream 的 of</h3>
<p>可以调用Stream 类的静态方法 <code>of()</code> ，通过显示值创建一个流。它可以接受任意数量的参数。</p>
<ul>
<li><code>public static&lt;T&gt; Stream&lt;T&gt; of(T...values)</code> 返回一个流</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建无限流"><a class="markdownIt-Anchor" href="#创建无限流"></a> 创建无限流</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历前 10 个偶数</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机生成10 个随机数</span></span><br><span class="line">    Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="stream-的中间操作"><a class="markdownIt-Anchor" href="#stream-的中间操作"></a> Stream 的中间操作</h2>
<p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理，而在终止操作时一次性全部处理，称为”惰性求值“</p>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段1</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础入门 阶段3</title>
    <url>/2022/04/18/JAVA/02JavaBasic/</url>
    <content><![CDATA[<h1 id="类变量和类方法"><a class="markdownIt-Anchor" href="#类变量和类方法"></a> 类变量和类方法</h1>
<h2 id="类变量"><a class="markdownIt-Anchor" href="#类变量"></a> 类变量</h2>
<p>也叫静态变量/静态属性，用<code>static</code> 修饰，可以被本类的所有对象实例共享。任何对象去访问它时访问的都是同一个变量</p>
<ul>
<li>语法：<code>访问修饰符 static 变量类型 变量名</code></li>
<li>访问方法：<code>类名.类变量名</code>、<code>对象名.类变量名</code>，推荐使用：<code>类名.类变量名</code></li>
<li>类变量是随着类的加载而创建，所以即使没有创建对象实例也可以访问。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt._static;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisitStatic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> A.name; <span class="comment">// 通过类名访问</span></span><br><span class="line">        System.out.println(name);  <span class="comment">//xzt</span></span><br><span class="line"></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(a.name); <span class="comment">//xzt</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;xzt&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>当需要让某个类变量都共享一个变量时，可以使用类变量(静态变量)</li>
<li>类变量时所有对象共享的，而实例变量时每个对象独享的</li>
<li>加上<code>static</code>成为类变量或静态变量，否则成为实例变量/普通变量</li>
</ul>
<h2 id="类方法"><a class="markdownIt-Anchor" href="#类方法"></a> 类方法</h2>
<p>也叫静态方法，用<code>static</code>修饰</p>
<ul>
<li>语法：<code>访问修饰符 static 返回类型 方法名(参数列表) &#123;&#125;</code></li>
<li>访问方法：<code>类名.类方法名</code>、<code>对象名.类方法名</code>，推荐使用：<code>类名.类方法名</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt._static;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        tom.payFee(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Stu</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        jack.payFee(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        Stu.showFee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stu</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">fee</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 学费</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stu</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法可以使用静态变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">payFee</span><span class="params">(<span class="type">double</span> fee)</span>&#123;</span><br><span class="line">        Stu.fee += fee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showFee</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;总学费有&quot;</span> + Stu.fee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>**使用场景：**当方法中不涉及任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率，例如工具类：<code>Math 类</code></p>
<p><strong>注意事项</strong></p>
<ul>
<li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区
<ul>
<li>类方法中不能使用<code>this</code>关键字</li>
</ul>
</li>
<li>类方法可以通过类名调用，普通方法不能通过类名调用。</li>
</ul>
<h3 id="main-方法"><a class="markdownIt-Anchor" href="#main-方法"></a> <code>main</code> 方法</h3>
<p>语法：<code>public static void main(String[] args) &#123;&#125;</code></p>
<ul>
<li><code>main</code>是java虚拟机调用，所以类方法需要是<code>public</code></li>
<li>java虚拟机在执行<code>main</code>方法时不需要创建对象，所以需要是<code>static</code></li>
<li>该方法接收<code>String</code>类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数</li>
<li><code>java 执行的程序 参数1 参数2 参数3</code>，参数组成<code>String[] args</code></li>
</ul>
<p><strong>注意事项</strong></p>
<ul>
<li>在<code>main</code> 方法中可以直接调用<code>main</code>方法所在类的静态方法或静态属性。</li>
<li>但是不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的静态成员</li>
</ul>
<h1 id="代码块"><a class="markdownIt-Anchor" href="#代码块"></a> 代码块</h1>
<p>代码块又称初始化块，属于类中的成员，类似于方法，将逻辑语句封装在方法体中，通过<code>&#123;&#125;</code>包围起来。但和方法不同，没有方法名，没有参数，只有方法体，而且不用通过对象或类显式调用，二十加载类时，或创建对象时隐士调用。</p>
<ul>
<li>基本语法：<code>[修饰符] &#123; 代码 &#125;;</code></li>
<li>修饰符可选，要写的话，也只能写<code>static</code></li>
<li>代码块分为两类，使用<code>static</code>修饰的叫静态代码块，没有<code>static</code>修饰的叫普通代码块</li>
<li>逻辑语句可以为任何逻辑语句，（输入、输出、方法调用、循环、判断等）</li>
<li><code>;</code>可以写上，也可以省略</li>
</ul>
<p><strong>优点</strong></p>
<ul>
<li>相当于另一种形式的构造器，可以做初始化的操作</li>
<li>场景：如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的重用性</li>
<li><strong>代码块的调用优先于构造器的调用</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.codeblock_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeBlock01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Movie</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String director;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;屏幕开启&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;广告开始&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;电影开始&quot;</span>);</span><br><span class="line">    &#125;;  <span class="comment">// 代码块，当任何一个构造器被调用时都会优先调用构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(String name, <span class="type">double</span> price, String director)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.director = director;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Movie</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>用<code>static</code>修饰的代码块也叫静态代码块，作用就是对类进行初始化，而且它<strong>随着类的加载而执行</strong>，并且<strong>只会执行一次</strong>，如果是普通代码块，每创建一个对象，就执行。</li>
<li><strong>类什么时候被加载</strong> ⭐
<ul>
<li>创建对象实例时<code>(new)</code></li>
<li>创建子类对象实例时，父类也会被加载</li>
<li>使用类的静态成员时（静态属性、静态方法）</li>
</ul>
</li>
<li>普通代码块，会在创建对象实例时被隐士调用，创建一次则执行一次，如果使用类的静态成员时，普通代码块并不会执行。</li>
<li>**创建一个对象时，在一个类调用顺序是：**⭐⭐
<ol>
<li><strong>调用静态代码块和静态属性初始化</strong>（注意：静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量初始化，则按他们定义的先后顺序调用）</li>
<li><strong>调用普通代码块和普通属性的初始化</strong>（注意：普通代码块和普通属性初始化调用的优先级一样，如果有多个普通代码块和多个普通变量初始化，则按他们定义的先后顺序调用）</li>
<li><strong>调用构造方法</strong></li>
</ol>
</li>
<li>构造器最前面其实隐含了<code>super()</code>和 调用普通代码块，</li>
<li>**创建一个子类时（继承关系），他们的静态代码块，静态属性初始化，普通代码块，普通属性初始化，构造方法的调用顺序如下：**⭐⭐
<ol>
<li>父类的静态代码块和静态属性初始化（优先级一样，按定义顺序执行）</li>
<li>子类的静态代码块和静态属性初始化（优先级一样，按定义顺序执行）</li>
<li>父类的普通代码块和普通属性初始化（优先级一样，按定义顺序执行）</li>
<li>父类的构造方法</li>
<li>子类的普通代码块和普通属性初始化（优先级一样，按定义顺序执行）</li>
<li>子类的构造方法</li>
</ol>
</li>
<li>静态代码块只能直接调用静态成员（静态属性和静态方法），普通代码块可以调用任意成员</li>
</ul>
<h1 id="单例设计模式"><a class="markdownIt-Anchor" href="#单例设计模式"></a> 单例设计模式</h1>
<p><strong>设计模式</strong>：设计模式是在大量的实践中总结和理论化之后的优选的代码结构、编程风格、以及解决问题的思考方式。</p>
<h2 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> 单例模式</h2>
<p>就是采取一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得对象实例的方法。</p>
<h3 id="饿汉式"><a class="markdownIt-Anchor" href="#饿汉式"></a> 饿汉式</h3>
<p>没有使用对象，但是加载类的时候就会创建对象。可能造成创建了对象，但没有使用，造成资源的浪费。</p>
<ol>
<li>构造器私有化</li>
<li>类内部创建对象（该对象时<code>static</code>）</li>
<li>向外暴露一个静态的公共方法，<code>getInstance()</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.single_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleTone01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> GirlFriend.getInstance();  <span class="comment">// 创建对象</span></span><br><span class="line">        System.out.println(gf);</span><br><span class="line">        </span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">gf2</span> <span class="operator">=</span> GirlFriend.getInstance();  <span class="comment">// 创建对象 和 上面的gf其实是同一个对象</span></span><br><span class="line">        System.out.println(gf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;qqy&quot;</span>);  <span class="comment">// 2.对象在类内部创建</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span> &#123;   <span class="comment">//1.构造方法私有化</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">getInstance</span><span class="params">()</span>&#123;  <span class="comment">//3.向外暴露一个公共的静态方法</span></span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GirlFriend&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="懒汉式"><a class="markdownIt-Anchor" href="#懒汉式"></a> 懒汉式</h3>
<p>在使用时创建对象，只有在用户使用<code>getInstance()</code>方法时才返回对象，后面再次调用时会返回上次创建的对象，从而保证了单例。</p>
<ol>
<li>构造器私有化</li>
<li>定义一个<code>static</code>静态属性对象</li>
<li>定义一个<code>public</code>的<code>static</code>方法可以返回Cat对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式的单例模式</span></span><br><span class="line"><span class="keyword">package</span> com.xzt.single_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* *</span></span><br><span class="line"><span class="comment"> * 演示懒汉式的单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleTon02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> Cat.getInstance();</span><br><span class="line">        System.out.println(cat.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 希望在程序运行过程中只能创建一个Cat对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Cat cat; <span class="comment">// 2.定义一个static静态属性对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123; <span class="comment">// 1.构造器私有化</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title function_">getInstance</span><span class="params">()</span>&#123;  <span class="comment">//3.定义一个public的static方法可以返回Cat对象</span></span><br><span class="line">        <span class="keyword">if</span>(cat == <span class="literal">null</span>)&#123; <span class="comment">// 如果还没有创建Cat对象</span></span><br><span class="line">            cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;xzt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Cat&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="饿汉式和懒汉式的区别"><a class="markdownIt-Anchor" href="#饿汉式和懒汉式的区别"></a> 饿汉式和懒汉式的区别</h3>
<ul>
<li>最主要的区别是创建对象的<strong>时机不同</strong>，饿汉式是在类加载就创建了对象实例，而懒汉式是在使用时才创建</li>
<li>饿汉式不存在线程安全问题，<strong>懒汉式存在线程安全问题</strong></li>
<li><strong>饿汉式存在浪费资源的问题</strong>，懒汉式则不存在这个问题。和对象的创建时机有很大的关系</li>
<li>在<code>javaSE</code>标准类中，<code>java.lang.Runtime</code>就是经典的单例模式</li>
</ul>
<h1 id="final关键字"><a class="markdownIt-Anchor" href="#final关键字"></a> <code>final</code>关键字</h1>
<p><code>final</code>可以修饰类、属性、方法和局部变量</p>
<h2 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h2>
<ul>
<li>当不希望类被继承时，可以使用<code>final</code>修饰</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.final_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Final01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;  <span class="comment">// 报错，不能被继承</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>当不希望父类的某个方法被子类重写/覆盖(<code>override</code>)时，可以使用<code>final</code>关键字修饰</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">C</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;  <span class="comment">// 报错 不能被重写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;重写了hi方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>当不希望类的某个属性的值被修改，可以使用<code>final</code>修饰</li>
<li>当不希望某个局部变量被修改。可以使用<code>final</code>修饰</li>
</ul>
<h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h2>
<ul>
<li><code>final</code>修饰的属性又叫常量，一般用<code>XX_XX_XX</code>来命名</li>
<li><code>final</code>修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以再如下位置之一：
<ul>
<li>定义时，例如：<code>public final double PI = 3.1415926;</code></li>
<li>在构造器中</li>
<li>在代码块中</li>
</ul>
</li>
<li>如果<code>final</code>修饰的属性是静态的，则初始化的位置只能是：
<ul>
<li>定义时</li>
<li>在静态代码块中，不能在构造器中赋值</li>
</ul>
</li>
<li><code>final</code>类不能被继承，但可以实例化对象。</li>
<li>如果类不是<code>final</code>类，但是含有<code>final</code>方法，则该方法虽然不能被重写，但是可以被继承。</li>
<li>一般来说，如果一个类是<code>final</code>类了，就没必要再将方法修饰成<code>final</code>方法</li>
<li><code>final</code>不能修饰构造器（构造方法）</li>
<li><code>final</code>和<code>static</code>往往搭配使用，效率更高，底层编译器做了优化处理。调用类中的该属性时，不会加载类。</li>
<li>包装类（<code>Integer</code>，<code>Double</code>，<code>Float</code>，<code>Boolean</code>等都是<code>final</code>类），<code>String</code>也是<code>final</code>类</li>
</ul>
<h1 id="抽象类"><a class="markdownIt-Anchor" href="#抽象类"></a> 抽象类</h1>
<p>**定义：**当父类的某些方法需要声明，但是又不能确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类</p>
<ul>
<li>用<code>abstract</code>修饰的方法</li>
<li>所谓抽象方法就是没有实现的方法，没有实现就是指没有函数体</li>
<li>当一个类中存在抽象方法时，需要将该类声明为<code>abstract</code>类</li>
<li>一般来说抽象类会被继承，由其子类实现抽象方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.abstract_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Abstract01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里实现了，但没什么意义，即父类方法不确定性问题</span></span><br><span class="line"><span class="comment">//    public void eat()&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;这是一个动物，不知道吃什么&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">// 所谓抽象类就是没有函数体的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  <span class="comment">// 当一个类中存在抽象方法时,需要将该类声明为抽象类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>抽象类不能被实例化</li>
<li>抽象类不一定要包含<code>abstract</code>方法，</li>
<li>一旦类中包含了<code>abstract</code>方法，则这个类必须声明为<code>abstract</code></li>
<li><code>abstract</code>只能修饰类和方法，不能修饰属性和其它的。</li>
<li>抽象类可以有任意成员【抽象类的本质还是类】</li>
<li>抽象方法不能有主体，即不能实现。</li>
<li>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为<code>abstract</code>类</li>
<li>⭐<code>final</code>不能被继承，<code>static</code>不能被重写，所以<code>abstract</code>不能和<code>final</code>或者<code>static</code>组合使用</li>
<li>⭐<code>private</code>不能被重写，所以<code>abstract</code>也不能时<code>private</code>的</li>
</ul>
<h2 id="抽象类的最佳实践-模板设计模式"><a class="markdownIt-Anchor" href="#抽象类的最佳实践-模板设计模式"></a> 抽象类的最佳实践-模板设计模式</h2>
<p>编写模板类，例子如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.abstract_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Template</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calculateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        job();  <span class="comment">// 实际调用了子类中重写的job()方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.abstract_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">800000</span>; i++) &#123;</span><br><span class="line">            num += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.abstract_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">            num += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.abstract_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.calculateTime();</span><br><span class="line"></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.calculateTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h1>
<p>接口就是给出一些没有实现的方法，封装到一起，到某个类要使用的时候，再根据具体情况把这些方法写出来。</p>
<ul>
<li><strong>基本语法：</strong><code>interface 接口名&#123; //属性 // 方法&#125;</code></li>
<li><strong>实现方法：</strong><code>class 类名 implements 接口名 &#123; // 自己的属性 // 自己的方法 //必须实现的接口的抽象方法&#125;</code></li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li>在<code>Jdk7.0</code>前，接口里的所有方法都没有方法体，即都是抽象方法</li>
<li><code>Jdk8.0</code>后接口可以有静态方法，默认方法，也就是说接口中可以有方法的具体实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interface_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在接口中抽象方法可以省略abstract</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interface_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Interface01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">AInterface</span>&#123;  <span class="comment">// 实现接口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现接口后，需要将该接口中所有的抽象方法全部实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>接口不能被实例化</li>
<li>接口中所有方法时<code>public</code>方法，接口中抽象方法，可以不用<code>abstract</code>修饰</li>
<li>一个普通类实现接口，就必须将该接口的所有方法都是实现</li>
<li>抽象了实现接口，可以不用实现接口的方法</li>
<li><strong>一个类可以同时实现多个接口</strong></li>
<li>接口中的属性只能时<code>final</code>，而且时<code>public static final</code>修饰符；例如：<code>int a = 1</code>实际上是<code>public static final int a = 1</code></li>
<li>接口中的属性的访问形式：<code>接口名.属性名</code></li>
<li>接口中不能继承其他的类，但是<strong>可以继承多个别的接口</strong>。<code>interface A extends B, C &#123;&#125;</code></li>
<li>接口的修饰符只能是<code>public</code>和默认，这点和类的修饰符是一样的</li>
</ul>
<h2 id="实现接口-vs-继承类"><a class="markdownIt-Anchor" href="#实现接口-vs-继承类"></a> 实现接口 VS 继承类</h2>
<ul>
<li><strong>实现接口是对单继承机制的补充</strong></li>
<li>继承：先天拥有，当子类继承了父类，则自动拥有了父类的能力，</li>
<li>实现：后天学习，如果子类需要扩展某些功能，则需要实现接口的方式进行获取。</li>
<li>接口和问题解决的问题不同：
<ul>
<li>继承的价值在于<strong>解决代码的复用性和可维护性</strong></li>
<li>接口的价值在于：设计，设计好各种规范（方法），让其他类去实现这些方法</li>
</ul>
</li>
<li>接口比继承更加灵活</li>
<li>接口在一定程度上可以实现代码解耦【即：接口规范 + 动态绑定机制】</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interface_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsVSInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LittleMonkey</span> <span class="variable">wukong</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LittleMonkey</span>(<span class="string">&quot;悟空&quot;</span>);</span><br><span class="line">        wukong.climbing();</span><br><span class="line"></span><br><span class="line">        wukong.swimming();</span><br><span class="line">        </span><br><span class="line">        wukong.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Monkey</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">climbing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;猴子会爬树&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fish</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bird</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LittleMonkey</span> <span class="keyword">extends</span> <span class="title class_">Monkey</span> <span class="keyword">implements</span> <span class="title class_">Fish</span>, Bird &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LittleMonkey</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; 通过学习会游泳了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot; 通过学习会飞翔了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接口的多态"><a class="markdownIt-Anchor" href="#接口的多态"></a> 接口的多态</h2>
<ul>
<li><strong>多态参数</strong>，可以接受实现了该接口的所有类的实例对象，接口类型的变量可以指向实现了该接口的对象。和继承体现的多态类似。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interface_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfacePolyParameter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IF</span> <span class="variable">if01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monster</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">IF</span> <span class="variable">if02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(); <span class="comment">// 体现了接口的多态</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IF</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> <span class="keyword">implements</span> <span class="title class_">IF</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">IF</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>多态数组</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interface_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfacePolyArr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Usb[] usbs = <span class="keyword">new</span> <span class="title class_">Usb</span>[<span class="number">2</span>]; <span class="comment">// 接口类型的数组</span></span><br><span class="line"></span><br><span class="line">        usbs[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Camera</span>();  <span class="comment">// 接口数组实现多态</span></span><br><span class="line">        usbs[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; usbs.length; i++) &#123;</span><br><span class="line">            usbs[i].work();  <span class="comment">// 动态绑定</span></span><br><span class="line">            <span class="keyword">if</span>(usbs[i] <span class="keyword">instanceof</span> Phone)&#123;  <span class="comment">// 判断其运行类型是否为 Phone</span></span><br><span class="line">                ((Phone) usbs[i]).call();  <span class="comment">// 进行类型向下转型并调用方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机工作中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera</span> <span class="keyword">implements</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;相机工作中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>多态传递</strong>：如果接口A继承了接口B，而类C仅仅实现了接口A，则相当于类C也实现了接口B。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.interface_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示多态传递</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfacePolyPass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 接口类型的变量可以指向实现了该接口的类的对象</span></span><br><span class="line">        <span class="type">IG</span> <span class="variable">ig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">IH</span> <span class="variable">ih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();  <span class="comment">// 因为IG继承了IH，所以Teacher对象实例也实现了IH</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IH</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IG</span> <span class="keyword">extends</span> <span class="title class_">IH</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">IG</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>**注意：**当类C继承了类A，实现了接口B，并且类A和接口B中有同名的属性，直接调用时则会造成模糊，所以调用父类的可以使用 <code>super.属性名</code>,调用接口的可以使用<code>接口名.属性名</code>。</p>
<p>**类的五大成员：**属性、方法、构造器、代码块、内部类。</p>
<h1 id="内部类"><a class="markdownIt-Anchor" href="#内部类"></a> 内部类</h1>
<p>一个类的内部又完整的嵌套了另一个类结构，被嵌套的类称为内部类（<code>inner class</code>），嵌套其他类的类称为外部类（<code>outer class</code>）。是我们类的第五大成员。<strong>内部类最大的特点就是可以访问私有属性，并且可以体现类与类之间的包含关系。</strong></p>
<ul>
<li><strong>基本语法：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;  <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123; <span class="comment">// 内部类</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span>&#123; <span class="comment">// 外部其他类</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.innerclass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass01</span> &#123;  <span class="comment">// 外部其他类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;  <span class="comment">// 外部其他类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;   <span class="comment">// 属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Outer</span><span class="params">(<span class="type">int</span> n1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n1 = n1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;  <span class="comment">// 方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;  <span class="comment">// 代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">inner</span> &#123;  <span class="comment">//内部类</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="内部类的分类"><a class="markdownIt-Anchor" href="#内部类的分类"></a> 内部类的分类</h2>
<ul>
<li>定义在外部类局部位置上（比如方法内）：
<ul>
<li>局部内部类（有类名）</li>
<li>匿名内部类（没有类名，重点！！！）⭐⭐</li>
</ul>
</li>
<li>定义在外部类的成员位置上
<ul>
<li>成员内部类（没用<code>static</code>修饰）</li>
<li>静态内部类（用<code>static</code>修饰）</li>
</ul>
</li>
</ul>
<h2 id="局部内部类"><a class="markdownIt-Anchor" href="#局部内部类"></a> 局部内部类</h2>
<p>定义在外部类的局部位置，比如方法中，并且有类名。</p>
<ul>
<li>可以直接访问外部类的所有成员，包含私有的。</li>
<li>不能添加访问修饰符，局部变量不能添加访问修饰符，可以使用<code>final</code>修饰，局部变量可以使用<code>final</code>修饰</li>
<li>**作用域：**仅仅在定义它的方法或代码块中。</li>
<li>局部内部类 <strong>直接访问</strong> 外部类成员</li>
<li>外部类 访问 局部内部类的成员，访问方式：创建对象，再访问（注意：必须在作用域内）</li>
<li>外部其他类 <strong>不能访问</strong> 局部内部类（因为局部内部类是一个局部变量）</li>
<li>如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果像访问外部类的成员，则可以使用（<code>外部类.this.成员</code>）去访问</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.innerclass;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示局部内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer02</span> <span class="variable">outer02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer02</span>();</span><br><span class="line">        outer02.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer02</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner02</span> &#123;  <span class="comment">// 局部内部类的本质还是类</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span> ;</span><br><span class="line">            <span class="comment">//可以直接访问外部类的所有成员，包含私有的</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 直接访问外部类的成员</span></span><br><span class="line">                System.out.println(<span class="string">&quot;n1 = &quot;</span> + n1);  <span class="comment">// 100,内部类的n1</span></span><br><span class="line">                System.out.println(Outer02.<span class="built_in">this</span>.n1);  <span class="comment">// 10  ,外部类的n1,  Outer02.this 本质是调用了m1方法的对象</span></span><br><span class="line">                m2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 外部类访问内部类成员，通过创建对象来进行访问</span></span><br><span class="line">        <span class="type">Inner02</span> <span class="variable">inner02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner02</span>();</span><br><span class="line">        inner02.f1();</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;  <span class="comment">// 代码块</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner03</span>&#123;  <span class="comment">// 内部类</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="匿名内部类"><a class="markdownIt-Anchor" href="#匿名内部类"></a> 匿名内部类 ⭐⭐⭐</h2>
<p>匿名内部类是定义在外部类的局部位置，比如方法中，并且没有名字。</p>
<ul>
<li>本质：是一个<code>类</code>，且是一个<code>内部类</code>,该类没有名字，同时还是一个对象。</li>
<li>基本语法：<code>new 类或接口(参数列表) &#123;&#125;</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.innerclass;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示匿名内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer04</span> <span class="variable">outer04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer04</span>();</span><br><span class="line">        outer04.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer04</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 基于接口的匿名内部类,</span></span><br><span class="line">        <span class="comment">// Tiger 编译类型为 A，运行类型为匿名内部类</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">Tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;老虎&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Tiger.cry(); <span class="comment">// 调用方法1，通过对象名调用</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Tiger的运行类型 = &quot;</span> + Tiger.getClass()); <span class="comment">// Outer04$1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基于类的匿名内部类</span></span><br><span class="line">        <span class="comment">// father 的编译类型为Father，运行类型为 Outer04$2</span></span><br><span class="line">        <span class="comment">// class Outer04$2 extends Father &#123;&#125;</span></span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;jack&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写了Test()方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.Test();   <span class="comment">// 调用方法2，因为是对象所以可以直接调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;father的运行类型 = &quot;</span> + father.getClass()); <span class="comment">// Outer04$1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;  <span class="comment">// 接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;  <span class="comment">// 类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>匿名内部类既是一个类的定义，同时它本身也是一个对象，因此从语法上看，它既有定义的特征，也有创建对象的特征。所以调用方法有两种，看上面的示例。</li>
<li>可以直接访问外部类的所有成员，包括私有成员。</li>
<li>不能添加访问修饰符，因为它是一个局部变量</li>
<li>作用域：仅仅在定义它的方法或代码块中</li>
<li>匿名内部类 <strong>直接访问</strong> 外部类成员</li>
<li>外部其它类 <strong>不能访问</strong> 匿名内部类，因为匿名内部类是一个局部变量，</li>
<li>如果外部类的成员和匿名内部类的成员重名时，匿名内部类访问的话，默认遵循就近原则，如果像访问外部类的成员，则可以使用<code>外部类名.this.成员</code>去访问。</li>
</ul>
<h2 id="成员内部类"><a class="markdownIt-Anchor" href="#成员内部类"></a> 成员内部类</h2>
<p>定义在外部类的成员位置，并且没有<code>static</code>修饰，</p>
<ul>
<li>可以直接访问外部类的所有成员，包含私有的</li>
<li>可以添加访问修饰符（<code>public</code>、<code>private</code>、<code>默认</code>、<code>protected</code>），因为他的地位就是一个成员。</li>
<li>作用域：和外部类的其他成员一样，为整个类体。</li>
<li>成员内部类 <strong>直接访问</strong> 外部类（比如：属性）【访问方式：直接访问】</li>
<li>外部类 <strong>简介访问</strong> 内部类，访问方式：创建对象，再访问</li>
<li>外部其他类 访问 内部类，有两种访问方式：
<ul>
<li><code>Outer08.Inner08 inner08 = outer08.new Inner08();</code></li>
<li><code>Outer08.Inner08 inner081 = outer08.getInner08Instance();</code></li>
</ul>
</li>
<li>如果外部类和内部类中的成员重名时吗，内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用(<code>外部类.this.成员</code>)去访问。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.innerclass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenberInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer08</span> <span class="variable">outer08</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer08</span>();</span><br><span class="line">        outer08.t1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 外部其他类访问内部类 的方式1</span></span><br><span class="line">        Outer08.<span class="type">Inner08</span> <span class="variable">inner08</span> <span class="operator">=</span> outer08.<span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式2：在外部类中，编写一个方法，可以返回Inner08 对象</span></span><br><span class="line">        Outer08.<span class="type">Inner08</span> <span class="variable">inner081</span> <span class="operator">=</span> outer08.getInner08Instance();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer08</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner08</span> &#123;  <span class="comment">// 成员内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Outer08 的 n1 = &quot;</span> + n1 + <span class="string">&quot;Outer08 的 name = &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回Inner08对象实例</span></span><br><span class="line">    <span class="keyword">public</span> Inner08 <span class="title function_">getInner08Instance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span>&#123;  <span class="comment">// 调用内部类的方法。</span></span><br><span class="line">        <span class="type">Inner08</span> <span class="variable">inner08</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line">        inner08.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="静态内部类"><a class="markdownIt-Anchor" href="#静态内部类"></a> 静态内部类</h2>
<p>静态内部类是定义在外部类的成员位置，并且有<code>static</code>修饰</p>
<ul>
<li>可以直接访问外部类的所有静态成员，包括私有的，<strong>但不能直接访问非静态成员</strong></li>
<li>可以添加任意的访问修饰符，因为它是成员</li>
<li>作用域：同其他成员，为整个类体</li>
<li>静态内部类 <strong>直接访问</strong> 外部类的所有静态成员</li>
<li>外部类 <strong>访问</strong> 静态内部类 需要创建对象，再访问。</li>
<li>外部其他类 使用 静态内部类：三种方式
<ul>
<li><code>Outer10.Inner10 inner10 = new Outer10.Inner10();</code></li>
<li><code>Outer10.Inner10 inner10Instance = new Outer10().getInner10Instance();</code>创建对象，调用方法</li>
<li><code>Outer10.Inner10 inner10Instance1 = Outer10.getInner10Instance();</code>直接使用类名调用静态方法</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.innerclass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 方式一：</span></span><br><span class="line">        <span class="comment">// 因为静态内部类，是可以通过类名直接进行访问。</span></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer10</span>.Inner10();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二：</span></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner10Instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer10</span>().getInner10Instance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式三：</span></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner10Instance1</span> <span class="operator">=</span> Outer10.getInner10Instance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer10</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner10</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Inner10 <span class="title function_">getInner10Instance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner10</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="枚举和注解"><a class="markdownIt-Anchor" href="#枚举和注解"></a> 枚举和注解</h1>
<h2 id="枚举类"><a class="markdownIt-Anchor" href="#枚举类"></a> 枚举类</h2>
<ul>
<li>枚举是一组常量的集合</li>
<li>枚举属于一种特殊的类，里面只包含一组有限的特定的对象</li>
</ul>
<p>两种实现方式：</p>
<ul>
<li>自定义类实现枚举</li>
<li>使用<code>enum</code>关键字实现枚举</li>
</ul>
<h3 id="自定义类实现枚举"><a class="markdownIt-Anchor" href="#自定义类实现枚举"></a> 自定义类实现枚举</h3>
<ol>
<li>将构造器私有化，目的是防止直接new</li>
<li>去掉<code>setXXX</code>方法，防止属性被修改，因为枚举对象通常为只读</li>
<li>在类内部直接创建固定的对象</li>
<li>对枚举对象/属性使用<code>static + final</code>共同修饰，实现底层优化</li>
<li>枚举对象名通常使用全部大写，常量的命名规范</li>
<li>枚举对象根据需要，也可以有多个属性</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.enum_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enumeration01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season.SPRING);</span><br><span class="line">        System.out.println(Season.AUTUMN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示自定义枚举</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;  <span class="comment">// 季节类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc; <span class="comment">// 描述</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义了四个对象。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;酷热&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 将构造器私有化，目的是防止直接new</span></span><br><span class="line">    <span class="comment">// 2. 去掉setXXX方法，防止属性被修改</span></span><br><span class="line">    <span class="comment">// 3. 在Season内部直接创建固定的对象</span></span><br><span class="line">    <span class="comment">// 4. 加入final修饰符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public void setName(String name) &#123;</span></span><br><span class="line"><span class="comment">        this.name = name;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public void setDesc(String desc) &#123;</span></span><br><span class="line"><span class="comment">        this.desc = desc;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="enum关键字实现枚举"><a class="markdownIt-Anchor" href="#enum关键字实现枚举"></a> <code>enum</code>关键字实现枚举</h3>
<p><strong>实现步骤：</strong></p>
<ul>
<li>使用<code>enum</code>关键字替换<code>class</code>关键字</li>
<li><code>SPRING(&quot;春天&quot;, &quot;温暖&quot;);</code>代替 <code>public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;);</code>创建对象</li>
<li>如果有多个常量（对象），使用<code>,</code>间隔</li>
<li>如果使用<code>enum</code>来实现枚举，要求将定义常量对象，写在最前面。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.enum_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enumeration02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Season02.AUTUMN);</span><br><span class="line">        System.out.println(Season02.SPRING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示使用enum关键字实现枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season02</span> &#123;</span><br><span class="line">    <span class="comment">// 定义了四个对象。</span></span><br><span class="line"><span class="comment">//    public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;);</span></span><br><span class="line"><span class="comment">//    public static final Season WINTER = new Season(&quot;冬天&quot;, &quot;寒冷&quot;);</span></span><br><span class="line"><span class="comment">//    public static final Season SUMMER = new Season(&quot;夏天&quot;, &quot;酷热&quot;);</span></span><br><span class="line"><span class="comment">//    public static final Season AUTUMN = new Season(&quot;秋天&quot;, &quot;凉爽&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.使用enum 代替class</span></span><br><span class="line">    <span class="comment">// 2.SPRING(&quot;春天&quot;, &quot;温暖&quot;); 代替 public static final Season SPRING = new Season(&quot;春天&quot;, &quot;温暖&quot;);创建对象</span></span><br><span class="line">    <span class="comment">// 3.如果有多个常量（对象），使用, 间隔</span></span><br><span class="line">    <span class="comment">// 4.如果使用enum来实现枚举，要求将定义常量对象，写在最前面。</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;温暖&quot;</span>), WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;寒冷&quot;</span>), SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;酷热&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;凉爽&quot;</span>), WHAT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc; <span class="comment">// 描述</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season02</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season02</span><span class="params">()</span> &#123;&#125;  <span class="comment">//无参构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season02&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>当我我们<code>enum</code>关键字开发一个枚举类时，默认会继承<code>Enum</code>类，而且是一个<code>final</code>类，使用<code>javap</code>工具进行验证</li>
<li>定义对象时被简化</li>
<li>如果使用的是无参构造器 创建 枚举对象，则实参列表和小括号都可以省略。</li>
<li>当有多个枚举对象时，使用<code>,</code>间隔，最后一个分号结束</li>
<li><strong>枚举对象必须放在枚举类的行首</strong></li>
<li><strong>当使用<code>enum</code>关键字后，就不能继承其他类，因为<code>enum</code>会隐式继承<code>Enum</code>类</strong></li>
<li><strong><code>enum</code>实现的枚举类，仍然是一个类，所以还是可以实现接口的</strong></li>
</ul>
<h4 id="enum类中的方法"><a class="markdownIt-Anchor" href="#enum类中的方法"></a> <code>Enum</code>类中的方法</h4>
<ul>
<li><code>toString()</code> : <code>Enum</code>类已经重写过了，返回的时当前对象名</li>
<li><code>name()</code>：输出枚举对象的名称</li>
<li><code>ordinal()</code>：输出该枚举对象的次序，从0开始编号</li>
<li><code>values()</code>：将所有定义的所有枚举对象以数组形式返回</li>
<li><code>valueOf()</code>：将字符串转成枚举对象，但要求字符串必须为已有的常量名，否则报异常。</li>
<li><code>compareTo()</code>：比较两个枚举常量，比较就是编号 <code>retrun self.ordinal - other.ordinal;</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.enum_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 演示Enum类的各种方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Season02</span> <span class="variable">autumn</span> <span class="operator">=</span> Season02.AUTUMN;</span><br><span class="line">        <span class="comment">// name()：输出枚举对象的名称</span></span><br><span class="line">        System.out.println(autumn.name());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ordinal()：输出该枚举对象的次序，从0开始编号</span></span><br><span class="line">        System.out.println(autumn.ordinal());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// values():将所有定义的所有枚举对象以数组形式返回</span></span><br><span class="line">        Season02[] values = Season02.values();</span><br><span class="line">        <span class="keyword">for</span> (Season02 season: values) &#123;  <span class="comment">// 增强for循环， foreach</span></span><br><span class="line">            System.out.println(season);  <span class="comment">// 调用toString方法</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// valueOf(): 将字符串转成枚举对象，但要求字符串必须为已有的常量名，否则报异常。</span></span><br><span class="line">        <span class="type">Season02</span> <span class="variable">summer</span> <span class="operator">=</span> Season02.valueOf(<span class="string">&quot;SUMMER&quot;</span>);</span><br><span class="line">        System.out.println(summer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// compareTo(): 比较两个枚举常量，比较就是编号 retrun self.ordinal - other.ordinal;</span></span><br><span class="line">        <span class="comment">// 用AUTUMN的编号减去SUMMER的编号，所以当等于0时，则相等</span></span><br><span class="line">        System.out.println(Season02.AUTUMN.compareTo(Season02.SUMMER));  <span class="comment">// -1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注解"><a class="markdownIt-Anchor" href="#注解"></a> 注解</h2>
<p>注解（<code>Annotation</code>）也被称为元数据（<code>Metadata</code>），用于修饰解释 包、类、方法、属性、构造器、局部变量等数据信息。</p>
<p>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息。</p>
<p>在<code>JavaSE</code>中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在<code>JavaEE</code>中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替<code>Java EE</code>旧版中所遗留的繁冗代码和XML配置等。</p>
<p>使用<code>Annotation</code>时要在其前面增加<code>@</code>符号，并把该<code>Annotation</code>当成一个修饰符使用。用于修饰它支持的程序元素。</p>
<h3 id="三个基本的annotation"><a class="markdownIt-Anchor" href="#三个基本的annotation"></a> 三个基本的<code>Annotation</code></h3>
<ul>
<li>
<p><code>@Override</code>：限定某个方法，是重写父类方法，该注解只能用于方法。</p>
<ul>
<li>
<p><code>@Override</code>可写可不写</p>
</li>
<li>
<p>如果写了<code>@Override</code>注解，编译器就会检查该方法是否真的重写了父类的方法，如果的确重写了，则编译通过，否则，则编译错误。</p>
</li>
<li>
<pre class="highlight"><code class="java"><span class="hljs-meta">@Target</span>(ElementType.METHOD)
<span class="hljs-meta">@Retention</span>(RetentionPolicy.SOURCE)
<span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;  <span class="hljs-comment">// @interface 表示这个是一个注解</span>
&#125;
&lt;!--code￼<span class="hljs-number">27</span>--&gt;

</code></pre>
</li>
</ul>
</li>
<li>
<p><code>@SuppressWarnings</code>：抑制编译器警告</p>
</li>
</ul>
<h3 id="jdk的元注解了解"><a class="markdownIt-Anchor" href="#jdk的元注解了解"></a> JDK的元注解（了解）</h3>
<p>JDK的元Annotation用于修饰其它Annotation</p>
<h1 id="异常-exception"><a class="markdownIt-Anchor" href="#异常-exception"></a> 异常 Exception</h1>
<blockquote>
<p>Java语言中将程序执行中发生的不正常情况称为&quot;异常&quot;。（语法错误和逻辑错误不是异常）</p>
</blockquote>
<p>执行过程中异常可以分为两类：</p>
<ul>
<li><code>Error</code>（错误）：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等情况，</li>
<li><code>Exception</code>：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。
<ul>
<li>运行时异常：程序运行时发生的异常</li>
<li>编译时异常：程序编程时，由编译器检查出的异常。</li>
</ul>
</li>
</ul>
<p><img src="/img/Java/Error.png" alt="Error" /></p>
<h2 id="运行时异常"><a class="markdownIt-Anchor" href="#运行时异常"></a> 运行时异常</h2>
<p>编译器不要求强制处置的异常。一般是指编程时的逻辑错误没事成簇元应该避免其出现的异常。<code>java.lang.RuntimeException</code>类及它的子类都是运行时异常。</p>
<p>对于运行时异常，可以不作处理，因为这类异常很普遍，若全处理可能对程序的可读性和运行效率产生影响。</p>
<h3 id="五大运行时异常"><a class="markdownIt-Anchor" href="#五大运行时异常"></a> 五大运行时异常</h3>
<ul>
<li><code>NullPointerException</code>空指针异常，当应用程序试图在需要对象的地方使用null时，抛出该异常。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.exception_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NullPointerException_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println(name.length());  <span class="comment">// 存在空指针异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ArithmeticException</code>数学运算异常，当出现异常的运算条件时，抛出此异常。</li>
<li><code>ArryIndexOutOfBoundsException</code>数组越界异常，用非法索引访问数组时抛出异常。</li>
<li><code>ClassCastException</code>类型转换异常，当试图将对象强制转换成不是实例的子类时抛出异常。</li>
<li><code>NumberFormatException</code>数字格式不正确异常，当应用程序试图将字符串转换成一种数值类型，但该字符串必能准换为适当格式时，抛出异常。</li>
</ul>
<h2 id="编译时异常"><a class="markdownIt-Anchor" href="#编译时异常"></a> 编译时异常</h2>
<p>是编译器要求必须处置的异常。</p>
<h2 id="异常处理"><a class="markdownIt-Anchor" href="#异常处理"></a> 异常处理</h2>
<blockquote>
<p>当异常发生时，对异常处理的方式</p>
</blockquote>
<h3 id="try-catch-finally"><a class="markdownIt-Anchor" href="#try-catch-finally"></a> <code>try - catch - finally</code></h3>
<p>程序员在代码中捕获发生的异常，自行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//代码可能有异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">//捕获到异常</span></span><br><span class="line">    <span class="comment">//1.当异常发生时，系统将异常封装给Exception对象e，传递给catch</span></span><br><span class="line">    <span class="comment">//2.得到异常对象后，程序员自己处理。</span></span><br><span class="line">    <span class="comment">//注意：如果没有发生异常，catch代码块不会执行。</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//不管try代码块是否有异常发生，始终要执行finally</span></span><br><span class="line">    <span class="comment">//通常将关闭释放资源的代码放在finally里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ul>
<li>如果异常发生了，则异常后买你的代码不会执行，直接进入到<code>catch</code>块，</li>
<li>如果异常没有发生，则顺序执行<code>try</code>的代码块，不会进入到<code>catch</code></li>
<li>如果希望不管是否发生异常，都执行某段代码（比如关闭连接，释放资源等）则使用<code>finally</code></li>
</ul>
<h3 id="throws"><a class="markdownIt-Anchor" href="#throws"></a> <code>throws</code></h3>
<p>将发生的异常抛出，交给调用者（方法）来处理，最顶级的处理者就是JVM</p>
<p>当下层方法出现异常时，可以将异常抛出至上层调用自己的方法。直至抛出至JVM，JVM处理异常方法：输出异常信息，中断程序，退出程序。</p>
<p>如果程序员没有显示的处理异常，默认使用<code>throws</code>处理异常</p>
<p><strong>注意事项</strong></p>
<ul>
<li>对于编译异常，程序中必须处理，比如<code>try - catch</code>或者<code>throws</code></li>
<li>对于运行异常，程序中如果没有处理，默认就是<code>throws</code>方式处理</li>
<li>子类重写父类方法时，对抛出异常的规定：子类重写的方法，所抛出的异常类型要么和父类抛出的异常一致，要么为父类抛出的异常的类型的子类。</li>
<li>在<code>throws</code>过程中，如果有方法<code>try-catch</code>，就相当于处理异常，就可以不必<code>throws</code></li>
</ul>
<h2 id="自定义异常"><a class="markdownIt-Anchor" href="#自定义异常"></a> 自定义异常</h2>
<blockquote>
<p>当程序中出现了某些“错误”，但该错误信息并没有在Trowable子类中描述处理，这个时候可以自己设计异常类，用于描述该错误信息。</p>
</blockquote>
<p><strong>步骤</strong></p>
<ol>
<li>定义类：自定义异常类名（程序员自己写），继承<code>Exception</code>或<code>RuntimeException</code></li>
<li>如果继承<code>Exception</code>，属于编译异常。</li>
<li>如果继承<code>RuntimeException</code>，属于运行异常（一般来说，继承<code>RuntimeException</code>）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.customexception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">120</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;年龄需要在 18~120之间&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;你的年龄范围正确。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义运行时异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="throw-和-throws-的区别"><a class="markdownIt-Anchor" href="#throw-和-throws-的区别"></a> <code>throw</code> 和 <code>throws</code> 的区别</h3>
<table>
<thead>
<tr>
<th></th>
<th>意义</th>
<th>位置</th>
<th>后面跟的东西</th>
</tr>
</thead>
<tbody>
<tr>
<td>throws</td>
<td>异常处理的一种方式</td>
<td>方法声明处</td>
<td>异常类型</td>
</tr>
<tr>
<td>throw</td>
<td>手动生成异常对象的关键字</td>
<td>方法体中</td>
<td>异常对象</td>
</tr>
</tbody>
</table>
<h1 id="常用类"><a class="markdownIt-Anchor" href="#常用类"></a> 常用类</h1>
<h2 id="包装类"><a class="markdownIt-Anchor" href="#包装类"></a> 包装类</h2>
<blockquote>
<p>针对八种基本数据类型相应的引用类型——包装类</p>
<p>有了类的特点，就可以调用类中的方法</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">基本数据类型</th>
<th style="text-align:center">包装类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">boolean</td>
<td style="text-align:center">Boolean</td>
</tr>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">Character</td>
</tr>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">Byte</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">Short</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">Integer</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">Long</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">Float</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">Double</td>
</tr>
</tbody>
</table>
<h3 id="包装类和基本数据的转换"><a class="markdownIt-Anchor" href="#包装类和基本数据的转换"></a> 包装类和基本数据的转换</h3>
<ul>
<li><code>jdk5</code>前的手动装箱和拆箱方式，装箱：基本类型-&gt;包装类，反之为拆箱</li>
<li><code>jdk5</code>以后的自动装箱和拆箱方式</li>
<li>自动装箱底层调用的是<code>valueOf()</code>方法，自动拆箱底层调用的是<code>intValue()</code>方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.wrapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperType</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 演示int 和Integer的装箱和拆箱</span></span><br><span class="line">        <span class="comment">//手动装箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(n1);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> Integer.valueOf(n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动拆箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> integer.intValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// jdk5 后就可以自动装箱和自动拆箱</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="comment">// 自动装箱 int-&gt; Integer</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> n2; <span class="comment">// 底层使用的是 Interger.valueOf()</span></span><br><span class="line">        <span class="comment">// 自动拆箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> integer2; <span class="comment">// 底层仍然使用的是intValue()方法。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="包装类型和string类型的相互转换"><a class="markdownIt-Anchor" href="#包装类型和string类型的相互转换"></a> 包装类型和String类型的相互转换</h3>
<p>以<code>Integer</code>和<code>String</code>类型的相互转换为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.wrapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperVSString</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 包装类Integer - &gt; String</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="number">100</span>;  <span class="comment">// 自动装箱</span></span><br><span class="line">        <span class="comment">// 方式1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> integer + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 方式2</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> integer.toString();</span><br><span class="line">        <span class="comment">// 方式3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> String.valueOf(integer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String -&gt; 包装类</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="comment">// 方式1</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(str); <span class="comment">// 自动装箱</span></span><br><span class="line">        <span class="comment">// 方式2</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(str); <span class="comment">// 构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="包装类常用的方法"><a class="markdownIt-Anchor" href="#包装类常用的方法"></a> 包装类常用的方法</h3>
<p><code>Integer</code>类和<code>String</code>类为例</p>
<ul>
<li><code>Integer.MIN_VALUE</code>，返回最小值</li>
<li><code>Integer.MAX_VALUE</code>，返回最大值</li>
<li><code>Character.isDigit('a')</code>，判断是不是数字</li>
<li><code>Character.isLetter('a')</code>，判断是不是字母</li>
<li><code>Character.isUpperCase('a')</code>，判断是不是大写</li>
<li><code>Character.isLowerCase('a')</code>，判断是不是小写</li>
<li><code>Character.isLowerCase('a')</code>，判断是不是小写</li>
<li><code>Character.isWhitespace('a')</code>，判断是不是空格</li>
<li><code>Character.toLowerCase('a')</code>，转成小写</li>
<li><code>Character.toUpperCase('a')</code>，转成大写</li>
</ul>
<h2 id="string类"><a class="markdownIt-Anchor" href="#string类"></a> String类</h2>
<ul>
<li><code>String</code>对象适用于保存字符串，也就是一组字符序列</li>
<li>字符串常量对象是用双引号括起来的字符序列。如：“jack”</li>
<li>字符串的字符使用Unicode字符编码，一个字符（不区分字母还是汉字）占两个字节。</li>
<li><code>String</code>类有很多构造器，构造器的重载。</li>
<li><code>String</code> 类实现了接口<code>Serializable</code>，则String可以串行化（数据可以在网络传输），还实现了<code>Comparable</code>接口，对象可以比较大小。</li>
<li><code>String</code> 是<code>final</code>类，不能被继承</li>
<li><code>String</code> 有属性 <code>private final char value[]</code>用于存放字符串内容。因为是<code>final</code>类型，所以不可以修改（指代地址不能够修改）</li>
</ul>
<h3 id="创建string对象的两种方式"><a class="markdownIt-Anchor" href="#创建string对象的两种方式"></a> 创建String对象的两种方式</h3>
<ul>
<li>直接赋值<code>String str = &quot;xzt&quot;;</code></li>
<li>调用构造器<code>String str = new String(&quot;xzt&quot;);</code></li>
</ul>
<h3 id="字符串的特性"><a class="markdownIt-Anchor" href="#字符串的特性"></a> 字符串的特性</h3>
<ul>
<li><code>String</code>类是一个<code>final</code>类，代表不可变的字符序列</li>
<li>字符串不可变，一个字符串对象一旦被分配，其内容是不可变的。</li>
</ul>
<h3 id="string类的常见方法"><a class="markdownIt-Anchor" href="#string类的常见方法"></a> String类的常见方法</h3>
<p>String类是保存字符串常量的，每次更新都需要重新开辟空间，效率低，因此java设计者还提供了<code>StringBuilder</code>和<code>StringBuffer</code>来增强String的功能，并提高效率。</p>
<ul>
<li><code>equals()</code>区分大小写，判断内容是否相等</li>
<li><code>length()</code> 获取字符的个数，字符串的长度</li>
<li><code>indexOf()</code>获取第i个字符</li>
<li><code>substring(x)</code>，截取索引x后面的内容</li>
<li><code>substring(start, end)</code>，从索引start开始，一直到索引end-1的位置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.string_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">String01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">        System.out.println(str.equals(<span class="string">&quot;JACK&quot;</span>)); <span class="comment">//False 区分大小写</span></span><br><span class="line">        System.out.println(str.equalsIgnoreCase(<span class="string">&quot;JACK&quot;</span>)); <span class="comment">// True，不区分大小写</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            System.out.println(str.indexOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abcdfsadfrf&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> s1.indexOf(<span class="string">&#x27;a&#x27;</span>);<span class="comment">// 返回第一次出现&#x27;a&#x27;的位置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> s1.substring(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="stringbuffer类"><a class="markdownIt-Anchor" href="#stringbuffer类"></a> <code>StringBuffer</code>类</h2>
<p><code>java.lang.StringBuffer</code>代表可变的字符序列，可以对字符串内容进行增删。很多方法和String相同，但<code>StringBuffer</code><strong>是可变长度的</strong>。</p>
<ul>
<li><code>StringBuffer</code>是一个容器</li>
</ul>
<p><strong>类结构</strong></p>
<ul>
<li>直接父类是<code>AbstractStringBuilder</code>类</li>
<li>实现了<code>Serializable</code>，即<code>StringBuffer</code>的对象可以串行化</li>
<li>在父类中 有属性 <code>char[] value</code>，不是<code>final</code>，该value数组存放字符串的内容。存放在堆中。</li>
<li><code>StringBuffer</code>是一个<code>final</code>类，不能被继承。</li>
</ul>
<h3 id="stringbuffer-vs-string"><a class="markdownIt-Anchor" href="#stringbuffer-vs-string"></a> <code>StringBuffer</code> VS <code>String</code></h3>
<ol>
<li><code>String</code>保存的是字符串常量，里面的值不能更改，每次<code>String</code>类的更新实际上就是更改地址，效率低。</li>
<li><code>StringBuffer</code>保存的是字符串变量，里面的值可以更改，每次<code>StringBuffer</code>的更新实际上可以更新内容，不用更新地址，效率高。</li>
</ol>
<h3 id="构造器"><a class="markdownIt-Anchor" href="#构造器"></a> 构造器</h3>
<ul>
<li><code>StringBuffer stringBuffer = new StringBuffer();</code>创建一个大小为16的<code>char[]</code>，用于存放字符内容</li>
<li><code>StringBuffer stringBuffer = new StringBuffer(100);</code>，通过构造器指定<code>char[]</code> 大小</li>
<li><code>StringBuffer stringBuffer = new StringBuffer(&quot;Hello&quot;);</code> 通过构造器给一个<code>String</code>创建<code>StringBuffer</code>，<code>char[]</code>大小为String的长度 + 16</li>
</ul>
<h3 id="stringbuffer的转换"><a class="markdownIt-Anchor" href="#stringbuffer的转换"></a> <code>StringBuffer</code>的转换</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.StringBuffer_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringAndStringBuffer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello Xzt&quot;</span>;</span><br><span class="line">        <span class="comment">//String -&gt; StringBuffer</span></span><br><span class="line">        <span class="comment">// 1. 使用构造器，返回的才是StringBuffer对象，对String本身没有对象。</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 使用append方法</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        stringBuffer1.append(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//StringBuffer -&gt; String</span></span><br><span class="line">        <span class="comment">// 1. 使用StringBuffer提供的toString方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> stringBuffer.toString();</span><br><span class="line">        <span class="comment">// 2. 使用构造器转换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(stringBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="stringbuilder类"><a class="markdownIt-Anchor" href="#stringbuilder类"></a> <code>StringBuilder</code>类</h2>
<p>一个可变的字符序列，此类提供一个与<code>StringBuffer</code>兼容的API，但不保证同步。该类被设计用作<code>StringBuffer</code>的一个简易替换，<strong>用在字符串缓冲区被单个线程使用的时候</strong>。如果可能，建议优先采用该类，因为在大多数实现中，它比<code>StringBuffer</code>要快。</p>
<p>在<code>StringBuilder</code>上主要操作的是<code>append()</code>和<code>insert()</code>方法，可重载这些方法，以接受任意类型的数据。</p>
<h2 id="math类"><a class="markdownIt-Anchor" href="#math类"></a> Math类</h2>
<blockquote>
<p>Math类包含于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。</p>
<p>均是静态方法，因此可以直接使用<code>Math.</code>调用。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>abs(x)</code></td>
<td style="text-align:center">计算x的绝对值</td>
</tr>
<tr>
<td style="text-align:center"><code>pow(x, y)</code></td>
<td style="text-align:center">计算幂，x的y次方</td>
</tr>
<tr>
<td style="text-align:center"><code>ceil(x)</code></td>
<td style="text-align:center">返回大于等于x的最小整数，向上取整</td>
</tr>
<tr>
<td style="text-align:center"><code>floor(x)</code></td>
<td style="text-align:center">返回小于等于x的最小整数，向下取整</td>
</tr>
<tr>
<td style="text-align:center"><code>round(x)</code></td>
<td style="text-align:center">将x进行四舍五入并返回</td>
</tr>
<tr>
<td style="text-align:center"><code>sqrt(x)</code></td>
<td style="text-align:center">求x的开方</td>
</tr>
<tr>
<td style="text-align:center"><code>random()</code></td>
<td style="text-align:center">返回的是0&lt;= x &lt; 1之间的一个随机小数</td>
</tr>
<tr>
<td style="text-align:center"><code>max(x, y)</code></td>
<td style="text-align:center">求两个数的最大值</td>
</tr>
<tr>
<td style="text-align:center"><code>min(x, y)</code></td>
<td style="text-align:center">求两个数的最小值</td>
</tr>
</tbody>
</table>
<h2 id="arrays类"><a class="markdownIt-Anchor" href="#arrays类"></a> Arrays类</h2>
<p><code>Arrays</code>l里面包含了一系列静态方法，用于管理或操作数组（比如排序和搜索）</p>
<p><strong>常用的方法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Arrays.toString(arr)</code></td>
<td style="text-align:center">遍历（显示）数组</td>
</tr>
<tr>
<td style="text-align:center"><code>Arrays.sort(arr);</code></td>
<td style="text-align:center">默认从小到大将数组进行排序，可以通过<code>Conparator</code>接口实现定制排序，排序不会改变原本的数组</td>
</tr>
<tr>
<td style="text-align:center"><code>Arrays.binarySearch(arr, x)</code></td>
<td style="text-align:center">通过二分搜索进行查找，要求数组必须排好序</td>
</tr>
<tr>
<td style="text-align:center"><code>Arrays.copyOf(arr, x)</code></td>
<td style="text-align:center">将arr数组中的x个元素拷贝至一个新数组中</td>
</tr>
<tr>
<td style="text-align:center"><code>Arrays.fill(arr, x)</code></td>
<td style="text-align:center">使用x填充arr数组</td>
</tr>
<tr>
<td style="text-align:center"><code>Arrays.equals(arr, tem)</code></td>
<td style="text-align:center">比较两个数组，如果数组中的元素一样，返回<code>true</code></td>
</tr>
<tr>
<td style="text-align:center"><code>Arrays.asList(1,2,3,4)</code></td>
<td style="text-align:center">会将数据转成一个<code>List</code>集合并返回。</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.arrays_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arrays01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] integers = &#123;<span class="number">1</span>, <span class="number">20</span>, <span class="number">90</span>&#125;;</span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; integers.length; i++) &#123;</span><br><span class="line">            System.out.println(integers[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接受用toString方法</span></span><br><span class="line">        System.out.println(Arrays.toString(integers));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 演示sort方法的使用</span></span><br><span class="line">        Integer[] arrs = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">89</span>&#125;;</span><br><span class="line">        Arrays.sort(arrs);</span><br><span class="line">        System.out.println(Arrays.toString(arrs));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定制排序, 变为从大到小， 体现了接口编程的方法。</span></span><br><span class="line">        Arrays.sort(arrs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arrs));</span><br><span class="line">        System.out.println(Arrays.binarySearch(arrs, -<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>冒泡排序 + <code>Comparator</code>定制</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.arrays_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraysSortCustom</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line">        bubbleSort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> (Integer) o1;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> (Integer) o2;</span><br><span class="line">                <span class="keyword">return</span> i1 - i2; <span class="comment">// 从小到大</span></span><br><span class="line"><span class="comment">//                return i2 - i1; // 从大到小</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通冒泡排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 从小到大</span></span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    temp = arr[i];</span><br><span class="line">                    arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">                    arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 冒泡排序 + 定制，重载方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr, Comparator c)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c.compare(arr[i], arr[i + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    temp = arr[i];</span><br><span class="line">                    arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">                    arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="system类"><a class="markdownIt-Anchor" href="#system类"></a> System类</h2>
<p><strong>常用方法</strong></p>
<ul>
<li><code>System.exit(0)</code> 退出当前程序</li>
<li><code>arraycopy()</code>：赋值数组元素，比较适合底层调用，一般使用<code>Arrays.copyOf</code>完成复制数组</li>
<li><code>System.currentTimeMillens()</code>：返回当前时间距离1970-1-1的毫秒数</li>
<li><code>System.gc()</code>：运行垃圾回收机制。</li>
</ul>
<h2 id="biginteger-和-bigdecimal-类"><a class="markdownIt-Anchor" href="#biginteger-和-bigdecimal-类"></a> BigInteger 和 BigDecimal 类</h2>
<blockquote>
<p>BigInteger 适合保存比较大的整型</p>
<p>BigDecimal 适合保存精度更高的浮点型（小数）</p>
</blockquote>
<h3 id="biginteger-类"><a class="markdownIt-Anchor" href="#biginteger-类"></a> BigInteger 类</h3>
<ul>
<li>不能直接进行加减乘除，需要使用提供的相应方法进行操作。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.biginteger_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigInteger_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;123456789987654321&quot;</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigInteger1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        System.out.println(bigInteger);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">add</span> <span class="operator">=</span> bigInteger.add(bigInteger1);</span><br><span class="line">        System.out.println(add);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//减</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">subtract</span> <span class="operator">=</span> bigInteger.subtract(bigInteger1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 乘</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">multiply</span> <span class="operator">=</span> bigInteger.multiply(bigInteger1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 除</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">divide</span> <span class="operator">=</span> bigInteger.divide(bigInteger1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bigdecimal-类"><a class="markdownIt-Anchor" href="#bigdecimal-类"></a> BigDecimal 类</h3>
<ul>
<li>使用方法和<code>BigInteger</code>类似，</li>
<li>除法可能会产生异常，因为可能会产生无线循环小数，所以需要在后面指定精度。会保留分子精度。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.bigdecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimal_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bigDecimal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;12.15626498411494692196496265965269560000&quot;</span>);</span><br><span class="line">        System.out.println(bigDecimal);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bigDecimal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(bigDecimal.add(bigDecimal1));</span><br><span class="line">        System.out.println(bigDecimal.subtract(bigDecimal1));</span><br><span class="line">        System.out.println(bigDecimal.multiply(bigDecimal1));</span><br><span class="line">        <span class="comment">// 出发，保留分子精度</span></span><br><span class="line">        System.out.println(bigDecimal.divide(bigDecimal1, BigDecimal.ROUND_CEILING));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="日期类"><a class="markdownIt-Anchor" href="#日期类"></a> 日期类</h2>
<h3 id="第一代日期类"><a class="markdownIt-Anchor" href="#第一代日期类"></a> 第一代日期类</h3>
<blockquote>
<p>​	Date : 可以精确到毫秒，代表特定的瞬间</p>
</blockquote>
<ul>
<li><code>SimpleDateFormat</code>：格式和解析日期的类。它允许进行格式化（日期-&gt;文本）解析（文本-&gt;日期）</li>
<li><code>Date date = new Date()</code>，这里的<code>Date</code>类是在<code>java.util</code>包</li>
<li>默认输出的日期格式是国外的方式，因此需要对格式进行转换。</li>
<li><code>SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日 hh:mm:ss E&quot;);</code> 用于将日期格式化为自定义格式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.date_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Date_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 获取当前日期</span></span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将日期转为自定义格式</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 hh:mm:ss E&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将毫秒数转为具体日期</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">9234567</span>);</span><br><span class="line">        System.out.println(date1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字符串转换为Date，输出形式仍为国外格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;1997年01月01日 10:20:30 星期五&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;  <span class="comment">// 抛出异常</span></span><br><span class="line">            <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sdf.parse(s);</span><br><span class="line">            System.out.println(sdf.format(parse));  <span class="comment">// 将日期格式转为自定义格式</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二代日期类"><a class="markdownIt-Anchor" href="#第二代日期类"></a> 第二代日期类</h3>
<blockquote>
<p>主要就是Calendar类（日历） ，Calendar类是一个抽象类，为特定瞬间与一组诸如YEAR、MONTH、DAY_OF_MONTH、HOUR等日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法。</p>
</blockquote>
<ul>
<li><code>Calendar</code>是一个抽象类，并且构造器是<code>private</code>，可以通过<code>getInstance</code>方法来获取实例。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.date_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calendar_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance.get(Calendar.YEAR));</span><br><span class="line">        <span class="comment">// 月是按照从0开始编号的</span></span><br><span class="line">        System.out.println(instance.get(Calendar.MONTH) + <span class="number">1</span>);</span><br><span class="line">        System.out.println(instance.get(Calendar.DAY_OF_MONTH));</span><br><span class="line">        System.out.println(instance.get(Calendar.HOUR));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三代日期类"><a class="markdownIt-Anchor" href="#第三代日期类"></a> 第三代日期类</h3>
<p><code>Calendar</code>类存在的问题：</p>
<ul>
<li>可变性：像日期和时间这样的类应该是不可变的。</li>
<li>偏移性：<code>Date</code>中的年份是从1900年开始的，而月份都从0开始</li>
<li>格式化：格式化支队<code>Date</code>有用，<code>Calendar</code>则不行</li>
<li>此外，他们也不是线程安全的；不能处理闺秒等（每隔两天，多出一秒）</li>
</ul>
<p><strong>第三代日期类常见方法</strong></p>
<ul>
<li><code>LocalDate</code>(日期/年月日)、<code>LocalTime</code>（时间/时分秒）、<code>LocalDateTime</code>（日期时间，JDK8加入）</li>
<li><code>LocalDateTime now = LocalDateTime.now();</code>获得当前时间</li>
<li>使用<code>DateTimeFormatter</code>格式日期类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.date_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateTime_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获得当前时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">        System.out.println(now.getMonthValue());</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> dtf.format(now);</span><br><span class="line">        System.out.println(format);  <span class="comment">// 格式化时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="集合"><a class="markdownIt-Anchor" href="#集合"></a> 集合</h1>
<p><strong>优点</strong></p>
<ul>
<li>可以动态保存任意多个对象，使用比较方便</li>
<li>提供了一系列方便的操作对象的方法：add、remove、set、get等</li>
<li>使用集合添加，删除新元素的示意代码简洁</li>
</ul>
<p><strong>集合的框架体系⭐⭐</strong></p>
<blockquote>
<p>​	Java 的集合类很多，主要分为两大类：单列集合、双列集合(键值对类型)</p>
</blockquote>
<h2 id="单列集合-collection"><a class="markdownIt-Anchor" href="#单列集合-collection"></a> 单列集合 Collection</h2>
<p><img src="/img/Java/Collection.png" alt="Collection" /></p>
<h3 id="collection接口实现类的特点"><a class="markdownIt-Anchor" href="#collection接口实现类的特点"></a> <code>Collection</code>接口实现类的特点</h3>
<p><code>public interface Collection&lt;E&gt; extends iterable&lt;E&gt;</code></p>
<ul>
<li><code>Collection</code>实现子类可以存放多个元素，每个元素可以是<code>Object</code></li>
<li>有些<code>Collection</code>的实现类，可以存放重复的元素，有些不可以</li>
<li>有些<code>Collection</code>的实现类，有些是有序的（<code>List</code>），有些是无序的（<code>Set</code>）</li>
<li><code>Collection</code>接口没有直接的实现子类，是通过它的子接口<code>Set</code>和<code>List</code>来实现的</li>
</ul>
<h3 id="常用的方法"><a class="markdownIt-Anchor" href="#常用的方法"></a> 常用的方法</h3>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>add(x)</code></td>
<td style="text-align:center">添加元素</td>
</tr>
<tr>
<td style="text-align:center"><code>remove(x)</code></td>
<td style="text-align:center">删除元素</td>
</tr>
<tr>
<td style="text-align:center"><code>contains(x)</code></td>
<td style="text-align:center">查找某个元素是否存在</td>
</tr>
<tr>
<td style="text-align:center"><code>size()</code></td>
<td style="text-align:center">返回元素的个数</td>
</tr>
<tr>
<td style="text-align:center"><code>isEmpty()</code></td>
<td style="text-align:center">判断是否为空</td>
</tr>
<tr>
<td style="text-align:center"><code>clear()</code></td>
<td style="text-align:center">清空列表</td>
</tr>
<tr>
<td style="text-align:center"><code>addAll(结合)</code></td>
<td style="text-align:center">添加多个元素</td>
</tr>
<tr>
<td style="text-align:center"><code>containsAll(集合)</code></td>
<td style="text-align:center">查看多个元素是否都存在</td>
</tr>
<tr>
<td style="text-align:center"><code>removeAll(集合)</code></td>
<td style="text-align:center">删除多个元素</td>
</tr>
</tbody>
</table>
<h3 id="遍历元素的方式"><a class="markdownIt-Anchor" href="#遍历元素的方式"></a> 遍历元素的方式</h3>
<p><strong>使用<code>iterator</code>迭代器进行遍历</strong></p>
<ul>
<li><code>Iterator iterator = list.iterator();</code>生成一个迭代器</li>
<li><code>iterator.hashNext()</code>判断是否还存在下一个元素</li>
<li><code>Object next = iterator.next();</code>返回下一个元素，以<code>Object</code>类型返回</li>
<li>遍历一遍后，如果需要进行再次遍历，需要重置迭代器<code>iterator = list.iterator();</code></li>
</ul>
<p><strong>增强<code>for循环</code>进行遍历</strong></p>
<ul>
<li>底层仍然是迭代器，是简化版的迭代器。</li>
<li><code>for(Object obj : list) &#123;&#125;</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.collection_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">// add 添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;xzt&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;qqy&quot;</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历集合</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;  <span class="comment">// 判断是否还有数据</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();  <span class="comment">// 返回下一个元素，类型是Object</span></span><br><span class="line">            System.out.println(next);   <span class="comment">// 动态绑定，调用相应对象的toString方法</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        iterator = list.iterator();  <span class="comment">// 重置迭代器</span></span><br><span class="line">        <span class="comment">//快捷键实现： itit + Enter</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增强for循环进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Object obj: list) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="list"><a class="markdownIt-Anchor" href="#list"></a> List</h3>
<ul>
<li><code>List</code>集合类中元素有序（即添加顺序和取出顺序一致）、且可重复</li>
<li><code>List</code>集合中的每个元素都有其对应的顺序索引，即支持索引，索引是从0开始</li>
<li><code>List</code>的实现类有很多，例如：<code>ArrayList</code>、<code>Vector</code>、<code>Stack</code>、<code>LinkedList</code>等等</li>
</ul>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>add(int index, Object obj)</code></td>
<td style="text-align:center">在index位置插入obj</td>
</tr>
<tr>
<td style="text-align:center"><code>addAll(int index, Collection col)</code></td>
<td style="text-align:center">在index位置开始插入col中的所有元素</td>
</tr>
<tr>
<td style="text-align:center"><code>get(int index)</code></td>
<td style="text-align:center">获得index位置的元素</td>
</tr>
<tr>
<td style="text-align:center"><code>indexOf(Onject obj)</code></td>
<td style="text-align:center">返回obj在集合中首次出现的位置</td>
</tr>
<tr>
<td style="text-align:center"><code>lastIndexOf(Object obj)</code></td>
<td style="text-align:center">返回obj在当前集合中最后出现的位置</td>
</tr>
<tr>
<td style="text-align:center"><code>remove(int index)</code></td>
<td style="text-align:center">移除index位置的元素</td>
</tr>
<tr>
<td style="text-align:center"><code>set(int index, Object obj)</code></td>
<td style="text-align:center">设置指定位置的元素为obj，相当于是替换</td>
</tr>
</tbody>
</table>
<p><strong>三种遍历方式</strong></p>
<p>使用于所有的<code>List</code>子类，前两种和上面<code>Collection</code>类的遍历方法相同</p>
<ul>
<li>使用<code>iterator</code>迭代器遍历</li>
<li>使用<code>增强for循环</code>进行遍历</li>
<li>使用<code>for循环</code>进行遍历</li>
</ul>
<h4 id="arraylist"><a class="markdownIt-Anchor" href="#arraylist"></a> <code>ArrayList</code></h4>
<p><strong>注意事项</strong></p>
<ul>
<li>可以存放各种类型的元素，甚至包括空元素<code>null</code></li>
<li>是由数组来实现数据存储的</li>
<li>基本等同于<code>Vector</code>，但<code>ArrayList</code>是线程不安全的（执行效率高），在多线程情况下，不建议使用<code>ArrayList</code></li>
</ul>
<p><strong>底层操作机制</strong>⭐⭐</p>
<p>查看源码，进行分析</p>
<ul>
<li><code>ArrayList</code>中维护的是一个<code>Object</code>类型数组<code>elementData</code>，<code>transient Object[] elementData</code>，<strong>transient 表示该属性不会被序列化</strong></li>
<li>当创建<code>ArrayList</code>时，如果使用的是无参构造器，则初始<code>elementData</code>容量为0，第一次添加，则扩容至10，如需再次扩容，则扩容为之前的1.5倍。</li>
<li>如果使用的是指定大小的构造器，则初始化<code>elementData</code>的容量为指定大小，如果需要扩容，则直接扩容至1.5倍</li>
</ul>
<h4 id="vector"><a class="markdownIt-Anchor" href="#vector"></a> <code>Vector</code></h4>
<ul>
<li><code>Vector</code>底层也是一个对象数组，<code>protected Object[] elementData</code></li>
<li><code>Vector</code>是线程同步的，即线程安全的，<code>Vector</code>类的操作方法带有<code>synchronized</code>，若需要线程同步，则考虑使用<code>Vector</code></li>
</ul>
<h4 id="linkedlist"><a class="markdownIt-Anchor" href="#linkedlist"></a> <code>LinkedList</code></h4>
<ul>
<li>底层实现了<strong>双向链表</strong>和<strong>双端队列</strong>特点</li>
<li>可以添加任意元素（元素可以重复），包括null</li>
<li>线程不安全，没有实现同步</li>
</ul>
<p><strong>底层操作机制</strong>⭐⭐</p>
<ul>
<li>底层维护了一个双向链表</li>
<li>维护了两个属性<code>first</code>和<code>last</code>分别指向首节点和尾节点</li>
<li>每个节点（Node对象），里面又维护了<code>prev</code>、<code>next</code>、<code>item</code>三个属性，其中通过<code>prev</code>指向前一个节点，通过<code>next</code>指向后一个节点，最终实现了双向链表。</li>
<li>所以<code>LinkedList</code>的元素的添加和删除，不是通过数组完成的，相对来说效率较高</li>
</ul>
<h4 id="arraylist和linkedlist比较"><a class="markdownIt-Anchor" href="#arraylist和linkedlist比较"></a> <code>ArrayList</code>和<code>LinkedList</code>比较</h4>
<table>
<thead>
<tr>
<th></th>
<th>底层结构</th>
<th>增删的效率</th>
<th>改查的效率</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ArrayList</code></td>
<td>可变数组</td>
<td>较低，数组扩容</td>
<td>较高</td>
</tr>
<tr>
<td><code>LinkedList</code></td>
<td>双向链表</td>
<td>较高，通过链表追加</td>
<td>较低</td>
</tr>
</tbody>
</table>
<p><strong>如何选择<code>ArrayList</code>和<code>LinkedList</code></strong></p>
<ol>
<li>如果我们改查的操作多，选择<code>ArrayList</code></li>
<li>如果我们增删的操作多，选择<code>LinkedList</code></li>
<li>一般来说，在程序中，80%~90%都是查询，因此大部分情况选择<code>ArrayList</code></li>
<li>在一个项目中，根据业务灵活选择，也可能这样，一个模块使用<code>ArrayList</code>，另一个模块是<code>LinkedList</code></li>
</ol>
<h3 id="set"><a class="markdownIt-Anchor" href="#set"></a> Set</h3>
<ul>
<li>无序（添加和取出的顺序不一致），没有索引，取出的顺序虽然不是添加的顺序，但是是固定的。</li>
<li>不允许重复元素，所以最多包含一个<code>null</code></li>
<li>JDK API中<code>Set</code>接口的实现类有：<code>HashSet</code>、<code>TreeSet</code>等等</li>
</ul>
<p><code>set</code><strong>接口常用的方法</strong></p>
<p>和<code>List</code>接口一样，<code>Set</code>接口也是<code>Collection</code>的子接口，因此，常用方法和<code>Collection</code>接口一样。</p>
<p><code>Set</code><strong>接口的遍历方式</strong></p>
<ul>
<li>使用<code>iterator</code>迭代器遍历</li>
<li>使用<code>增强for循环</code>进行遍历</li>
<li><strong>不能使用</strong>索引的方式来获取</li>
</ul>
<h4 id="hashset"><a class="markdownIt-Anchor" href="#hashset"></a> <code>HashSet</code></h4>
<ul>
<li><code>HashSet</code>实现了<code>Set</code>接口</li>
<li><code>HashSet</code>底层实际上是<code>HashMap</code></li>
<li>可以存放<code>null</code>，但最多只能存放一个</li>
<li>不保证元素是有序的，取决于hash后，在确定索引的结果，即不保证存放元素的顺序和取出顺序一致</li>
<li>不能有重复元素，</li>
</ul>
<p><strong>扩容机制</strong>⭐⭐</p>
<ul>
<li>底层是<code>HashMap</code></li>
<li>添加一个元素时，先得到hash值，会转成索引值</li>
<li>找到存储数据表table，看这个索引位置是否已经存放的有元素,如果没有，直接加入，如果有，调用<code>equals</code>比较，如果相同，就放弃添加，反之，则添加到最后。</li>
<li>在Java 8中，如果一条链表的元素个数超过<code>TREEIFY_THRESHOLD</code>（默认是8），并且table的大小 &gt;= <code>MIN_TREEIFY_CAPACITY</code>(默认是64)，就会进行树化（红黑树）</li>
</ul>
<h4 id="linkedhashset"><a class="markdownIt-Anchor" href="#linkedhashset"></a> <code>LinkedHashSet</code></h4>
<ul>
<li>继承了<code>HashSet</code>,是<code>HashSet</code>的子类</li>
<li>底层是一个<code>LinkedHashMap</code>，底层维护的是一个 数组 + 双向链表</li>
<li><code>LinkedHashSet</code> 根据元素的<code>hashCode</code>值来决定元素的存储位置，同时使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的。</li>
<li><code>LinkedHashSet</code>不允许添加重复元素</li>
</ul>
<h4 id="treeset"><a class="markdownIt-Anchor" href="#treeset"></a> <code>TreeSet</code></h4>
<ul>
<li>当使用无参构造器创建<code>TreeSet</code>时，它默认按字典序进行排序。</li>
<li>使用<code>TreeSet</code>提供的一个构造器，可以传入一个比较器（匿名内部类），并指定排序规则。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.set_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">treeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="comment">// 调用字符串的compareTo方法进行字符串大小比较</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o1).compareTo((String) o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        treeSet.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;xzt&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;qqy&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;z&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双列集合-k-v"><a class="markdownIt-Anchor" href="#双列集合-k-v"></a> 双列集合 （K - V）</h2>
<blockquote>
<p>​	双列集合里面存放的是键值对类型（Key - Value）</p>
</blockquote>
<p><img src="/img/Java/Map.png" alt="Map" /></p>
<h3 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h3>
<p><strong>特点</strong></p>
<ul>
<li><code>Map</code>与<code>Collection</code>并列存在，用于保存具有映射关系的数据：Key - Value</li>
<li><code>Map</code>中的 key 和 value 可以是任何引用类型的数据， 会封装在<code>HashMap$Node</code> 对象中</li>
<li><code>Map</code>中的 key 不允许重复，当有相同的 key 时，就等价于替换value</li>
<li><code>Map</code>中的 value 可以重复</li>
<li><code>Map</code>中的 key 可以为null，value 也可以为 null ，注意 key 为 null 只能有一个。value为null 可以有多个</li>
<li>常用String类作为<code>Map</code> 的 key</li>
<li>key 和 value 是一对一的关系，所以根据指定 key 能找到对应的 value</li>
</ul>
<p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>put(K, V)</code></td>
<td style="text-align:center">添加元素，存入键值对</td>
</tr>
<tr>
<td style="text-align:center"><code>remove(K)</code>、<code>remove(K, V)</code></td>
<td style="text-align:center">根据键删除映射关系</td>
</tr>
<tr>
<td style="text-align:center"><code>get(K)</code></td>
<td style="text-align:center">根据键获取对应的值</td>
</tr>
<tr>
<td style="text-align:center"><code>size()</code></td>
<td style="text-align:center">获取元素个数</td>
</tr>
<tr>
<td style="text-align:center"><code>isEmpty()</code></td>
<td style="text-align:center">判断是否为空</td>
</tr>
<tr>
<td style="text-align:center"><code>clear()</code></td>
<td style="text-align:center">清楚</td>
</tr>
<tr>
<td style="text-align:center"><code>containsKey(K)</code></td>
<td style="text-align:center">查找键是否存在</td>
</tr>
</tbody>
</table>
<p><strong>遍历方式</strong></p>
<ul>
<li>先通过 <code>keySet</code> 取出所有的 Key 再根据 Key 取出相对应的 Value</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一组：先取出所有的 Key 再根据 Key 取出相对应的 Value</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.keySet();  <span class="comment">// 获取所有的Key</span></span><br><span class="line"><span class="comment">// 第一种，使用增强for循环进行遍历</span></span><br><span class="line"><span class="keyword">for</span> (Object obj : set) &#123;  <span class="comment">// 增强for循环</span></span><br><span class="line">    System.out.println(obj + <span class="string">&quot;-&quot;</span> + map.get(obj));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种，使用迭代器进行遍历</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;  <span class="comment">// 使用迭代器</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(next + <span class="string">&quot;-&quot;</span> + map.get(next));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>把所有的 Value 取出</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第二组：把所有的values取出</span></span><br><span class="line"><span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line"><span class="comment">// 第一种：使用迭代器进行遍历</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> values.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator1.hasNext())&#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator1.next();</span><br><span class="line">    System.out.println(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二中：使用增强for循环</span></span><br><span class="line"><span class="keyword">for</span> (Object obj : values) &#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>通过 <code>entrySet</code> 来获取 K - V</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第三组 ：通过 entrySet 来获取 k-v</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line"><span class="comment">// 第一种：使用增强for循环进行遍历</span></span><br><span class="line"><span class="keyword">for</span> (Object entry : entrySet) &#123;</span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;  <span class="comment">// 转换类型</span></span><br><span class="line">    System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种：使用iterator迭代器</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator2.hasNext())&#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator2.next();</span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) next;</span><br><span class="line">    System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="hashmap"><a class="markdownIt-Anchor" href="#hashmap"></a> <code>HashMap</code></h4>
<ul>
<li>与<code>HashSet</code>一样，不保证映射的顺序，因为底层是以hash表的方式来存储的，JDK 8的<code>hashMap</code>底层是数组 + 链表 + 红黑树</li>
<li><code>HashMap</code>没有实现同步，因此是线程不安全的。方法上没有做同步互斥的操作，没有<code>synchronized</code>关键字</li>
</ul>
<p><strong>底层机制</strong></p>
<ul>
<li><code>HashMap</code>的扩容机制和<code>HashSet</code>完全一样</li>
<li><code>HashMap</code>底层维护了Node类型的数组table，默认为<code>null</code></li>
<li>当创建对象时，将加载因子（load factor）初始化为0.75</li>
<li>当添加 key - value 时，通过key的哈希值的到再table表中的索引，然后判断该索引处是否有元素，如果没有元素直接添加，如果该索引处有元素，继续判断该元素的key是否和准备加入的key相等，如果相等，则直接替换value；如果不相等则需要判断是树结构还是链表结构，做出相应的处理。如果添加时发现容量不够，则需要扩容。</li>
<li>第一次添加，则需要扩容table容量为16，临界值（threshold）为12</li>
<li>以后再扩容，指责需要扩容table容量为原来的2倍，临界值为原来的2倍，即24，依此类推。</li>
<li>在Java 8中，如果一条链表的元素个数超过<code>TREEIFY_THRESHOLD</code>（默认是8），并且table的大小 &gt;= <code>MIN_TREEIFY_CAPACITY</code>(默认是64)，就会进行树化（红黑树）</li>
</ul>
<h4 id="hashtable"><a class="markdownIt-Anchor" href="#hashtable"></a> <code>HashTable</code></h4>
<ul>
<li>存放的元素是键值对：即 K - V</li>
<li><code>HashTable</code>的键和值都不能为<code>null</code>，否则会抛出<code>NullPointerException</code></li>
<li><code>HashTable</code>使用方法基本上和<code>HashMap</code>一样</li>
<li>是线程安全的。有<code>synchronized</code>修饰</li>
</ul>
<h4 id="properties"><a class="markdownIt-Anchor" href="#properties"></a> <code>Properties</code></h4>
<ol>
<li>继承自<code>HashTable</code>类，并且实现了Map接口，也是使用一种键值对的形式来保存数据</li>
<li>它的使用特点和<code>HashTable</code>类似</li>
<li>还可以用于从<code>XXX.properties</code>文件中，加载数据到<code>Properties</code>类对象，并进行读取和修改</li>
<li>说明：<code>XXX.properties</code>通常为配置文件</li>
</ol>
<h4 id="treemap"><a class="markdownIt-Anchor" href="#treemap"></a> <code>TreeMap</code></h4>
<ul>
<li>当使用无参构造器创建<code>TreeMap</code>时，它默认按 Key 的字典序进行排序。</li>
<li>使用<code>TreeMap</code>提供的一个构造器，可以传入一个比较器（匿名内部类），并指定排序规则。</li>
</ul>
<h2 id="集合选型规则"><a class="markdownIt-Anchor" href="#集合选型规则"></a> 集合选型规则⭐</h2>
<ol>
<li>先判断存储类型，（一组对象[单列]或一组键值对[多列]）</li>
<li>一组对象：<code>Collection</code>接口
<ul>
<li>允许重复：<code>List</code>
<ul>
<li>增删多：<code>LinkedList</code>【底层维护了一个双向链表】</li>
<li>改查多：<code>ArrayList</code>【底层维护了Object类型可变数组】</li>
</ul>
</li>
<li>不允许重复：<code>Set</code>
<ul>
<li>无序：<code>HashSet</code>【底层是<code>HashMap</code>，维护了一个哈希表，即 数组 + 链表 + 红黑树】</li>
<li>排序：<code>TreeSet</code></li>
<li>插入和取出顺序一致：<code>LinkedHashSet</code>【维护 数组 + 双向链表】</li>
</ul>
</li>
</ul>
</li>
<li>一组键值对：<code>Map</code>
<ul>
<li>键无序：<code>HashMap</code>【底层是：哈希表 JDK 7：数组 + 链表；JDK 8：数组 + 链表 + 红黑树】</li>
<li>键排序：<code>TreeMap</code></li>
<li>键插入顺序和取出顺序一致：<code>LinkedHashMap</code></li>
<li>读取文件：<code>Properties</code></li>
</ul>
</li>
</ol>
<h2 id="collections-工具类"><a class="markdownIt-Anchor" href="#collections-工具类"></a> <code>Collections</code> 工具类</h2>
<blockquote>
<p>Collections 工具类是一个操作 Set、List 和 Map 等集合的工具类</p>
<p>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作</p>
</blockquote>
<h3 id="排序操作"><a class="markdownIt-Anchor" href="#排序操作"></a> 排序操作</h3>
<p>均为 static 方法</p>
<ul>
<li><code>reverse(List)</code>：反转 List 中元素的顺序</li>
<li><code>shuffle(List)</code>：对 List 集合元素进行随机排序</li>
<li><code>sort(List)</code>：根据元素的自然顺序对指定 List 集合元素按升序排序</li>
<li><code>sort(List, Comparator)</code>：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li>
<li><code>swap(List, int, int)</code>：将指定 List 集合中的 i 处元素和 j 处元素进行交换</li>
</ul>
<h3 id="查找-替换"><a class="markdownIt-Anchor" href="#查找-替换"></a> 查找、替换</h3>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>max(Collection)</code></td>
<td style="text-align:center">根据元素的自然顺序，返回给定集合中的最大元素</td>
</tr>
<tr>
<td style="text-align:center"><code>max(Collection, Comparator)</code></td>
<td style="text-align:center">根据 Comparator 指定的顺序，返回给定集合中的最大元素</td>
</tr>
<tr>
<td style="text-align:center"><code>min(Collection)</code></td>
<td style="text-align:center">根据元素的自然顺序，返回给定集合中的最小元素</td>
</tr>
<tr>
<td style="text-align:center"><code>min(Collection, Comparator)</code></td>
<td style="text-align:center">根据 Comparator 指定的顺序，返回给定集合中的最小元素</td>
</tr>
<tr>
<td style="text-align:center"><code>frequency(Collection, Object)</code></td>
<td style="text-align:center">返回指定集合中指定元素出现的次数</td>
</tr>
<tr>
<td style="text-align:center"><code>copy(List dest, List src)</code></td>
<td style="text-align:center">将 src 集合中的内容赋值到 dest 中，需要保证 dest 和 src 的大小相等</td>
</tr>
<tr>
<td style="text-align:center"><code>replaceAll(List list, Object oldVal, Object new Val)</code></td>
<td style="text-align:center">将 list 集合中的所有 oldVal 全部替换为 newVal</td>
</tr>
</tbody>
</table>
<h1 id="泛型"><a class="markdownIt-Anchor" href="#泛型"></a> 泛型</h1>
<blockquote>
<p>泛型又称参数化类型，是 JDK 5.0出现的新特性，解决数据类型的安全性问题</p>
<p>在类声明或实例化时只要制定好需要的具体的类型即可</p>
</blockquote>
<ul>
<li>
<p>基本语法：<code>ArrayList&lt;类名&gt; list = new ArrayList&lt;类名&gt;();</code></p>
</li>
<li>
<p>Java 泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生类型转换异常，代码更加简洁，健壮</p>
</li>
<li>
<p>泛型的作用是：可以在类声明时通过一个标识表示类中某个属性的类型，或者是某个方法的返回值的类型，或者是参数类型。</p>
</li>
</ul>
<p><strong>优点</strong></p>
<ul>
<li>编译时，检查添加元素的类型，提高了安全性</li>
<li>减少了类型转换的次数，提高效率</li>
<li>在遍历的时候，可以直接取出对应类的类型，而不是 Object 类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.generic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Person&lt;String&gt; person = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;String&gt;(<span class="string">&quot;xzt&quot;</span>);  <span class="comment">// String 类型的Person类</span></span><br><span class="line"></span><br><span class="line">        Person&lt;Integer&gt; person1 = <span class="keyword">new</span> <span class="title class_">Person</span>&lt;Integer&gt;(<span class="number">122</span>);  <span class="comment">// Integer 类型的Person类</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类时添加泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&lt;E&gt; &#123;</span><br><span class="line">    E s;  <span class="comment">// E表示 s的数据类型，该数据类型在定义Person对象的时候指定，即在编译期间，就确定E是什么类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(E s)</span> &#123;  <span class="comment">// E也可以是参数类型</span></span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">f</span><span class="params">()</span> &#123;  <span class="comment">// 返回类型也可以使用E</span></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h2>
<p><strong>泛型的声明</strong></p>
<p><code>interface 接口名&lt;T&gt;&#123;&#125;</code> 和 <code>class 类名&lt;K, V&gt;&#123;&#125;</code></p>
<p>说明：</p>
<ul>
<li>其中，T，K，V 不代表值，而是表示类型</li>
<li>任意字母都可以，常用T表示，是 Type 的缩写</li>
</ul>
<p><strong>泛型的实例化</strong></p>
<p>要在类名后米娜指定类型参数的值（类型）。如：</p>
<ul>
<li><code>Person&lt;String&gt; person = new Person&lt;String&gt;(&quot;xzt&quot;);</code></li>
<li><code>Iterator&lt;Customer&gt; iterator = cunstomers.iterator();</code></li>
</ul>
<p><strong>注意事项</strong></p>
<ul>
<li>T，K，V只能是引用类型，不能是基本数据类型</li>
<li>在给泛型指定具体类型后，可以传入该类型或者其子类类型</li>
<li>泛型的使用形式
<ul>
<li><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></li>
<li><code>List&lt;String&gt; list = new ArrayList&lt;&gt;();</code> 推荐写法，编译器会进行类型推断。</li>
</ul>
</li>
<li><code>ArrayList list = new ArrayList();</code>默认泛型是 Object 类</li>
</ul>
<h2 id="自定义泛型"><a class="markdownIt-Anchor" href="#自定义泛型"></a> 自定义泛型</h2>
<h3 id="自定义泛型类"><a class="markdownIt-Anchor" href="#自定义泛型类"></a> 自定义泛型类</h3>
<p><strong>基本语法</strong>：<code>class 类名&lt;T, R ...&gt; &#123; 成员 &#125;</code>，也可以是接口</p>
<p><strong>注意细节</strong></p>
<ul>
<li>普通成员可以使用泛型（属性、方法）</li>
<li>使用泛型的数组，不能初始化。<strong>因为数组在new的时候，不能确定 T 的类型，就无法在内存中开空间</strong></li>
<li>静态方法中不能使用类的泛型。<strong>因为静态方法和类相关，在类加载时，对象还没创建，所以静态方法不能使用泛型</strong></li>
<li>泛型类的类型，是在创建对象时确定的，因为创建对象时，需要指定确定类型</li>
<li>如果在创建对象时，没有指定类型，默认为 Object</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>&lt;T, R, M&gt; &#123;</span><br><span class="line">    String name;</span><br><span class="line">    R r;</span><br><span class="line">    T t;</span><br><span class="line">    M m;</span><br><span class="line">    T[] ts;  <span class="comment">// 使用泛型的数组，不允许直接初始化，因为数组在new的时候，不能确定T的类型，就无法在内存中开空间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(String name, R r, T t, M m)</span> &#123;  <span class="comment">//构造器使用泛型</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.r = r;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法使用泛型，返回类型也可以使用泛型</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getR</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setR</span><span class="params">(R r)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setT</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> M <span class="title function_">getM</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setM</span><span class="params">(M m)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义泛型接口"><a class="markdownIt-Anchor" href="#自定义泛型接口"></a> 自定义泛型接口</h3>
<p><strong>基本语法</strong>：<code>interface 接口名&lt;T, R, ...&gt; &#123;&#125;</code></p>
<p><strong>注意事项</strong></p>
<ul>
<li>接口中，静态成员也不能使用泛型</li>
<li>泛型接口类型中，在继承接口或者实现接口时确定</li>
<li>没有指定类型，默认为 Object</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IUsb</span>&lt;U, R&gt; &#123;</span><br><span class="line">    <span class="comment">// 普通方法中，可以使用接口泛型</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 在接口中，所有成员都是静态成员</span></span><br><span class="line">    R <span class="title function_">get</span><span class="params">(U u)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(R r)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Run</span><span class="params">(R r1, R r2, U u1, U u2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在jdk 8中，可以在接口中，使用默认方法，也可以使用泛型</span></span><br><span class="line">    <span class="keyword">default</span> R <span class="title function_">method</span><span class="params">(U u)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承泛型接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> <span class="keyword">extends</span> <span class="title class_">IUsb</span>&lt;String, Double&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现泛型接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">implements</span> <span class="title class_">IA</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">get</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Double aDouble)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Run</span><span class="params">(Double r1, Double r2, String u1, String u2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义泛型方法"><a class="markdownIt-Anchor" href="#自定义泛型方法"></a> 自定义泛型方法</h3>
<p><strong>基本语法</strong>：<code>修饰符 &lt;T, R, ...&gt;返回类型 方法名(参数列表) &#123;&#125;</code></p>
<p><strong>注意事项</strong></p>
<ul>
<li>泛型方法，可以定义在普通类中，也可以定义在泛型类中。</li>
<li>当泛型方法被调用时，类型会确定</li>
<li>若修饰符后面没有泛型<code>&lt;T, R, ..&gt;</code>，则该方法不是泛型方法</li>
</ul>
<h2 id="泛型的继承和通配符"><a class="markdownIt-Anchor" href="#泛型的继承和通配符"></a> 泛型的继承和通配符</h2>
<ul>
<li>泛型不具备继承性。<code>List&lt;Object&gt; list = new ArrayList&lt;String&gt;()</code> 是不正确的</li>
<li><code>&lt;?&gt;</code>：支持任意泛型类型</li>
<li><code>&lt;? extends A&gt;</code>：支持A类及A类的子类，规定了泛型的上限</li>
<li><code>&lt;? super A&gt;</code>：支持A类以及A类的父类，不限于直接父类，规定了泛型的下限</li>
</ul>
<h1 id="junit单元测试类"><a class="markdownIt-Anchor" href="#junit单元测试类"></a> Junit单元测试类</h1>
<ul>
<li><code>Junit</code>是一个Java语言的单元测试框架</li>
<li>多数Java的开发环境否已经集成了<code>Junit</code>作为单元测试工具</li>
<li>在需要测试的方法上面加入<code>@Test</code>，则可以直接运行该方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.Junit_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Junit_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span>  <span class="comment">// 使用Junit类测试该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试m1方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试m2方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="程序进程线程基础"><a class="markdownIt-Anchor" href="#程序进程线程基础"></a> 程序进程线程（基础）</h1>
<h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2>
<ul>
<li>程序：为完成某个特定任务、用某种语言编写的一组指令的集合。</li>
<li>进程：运行中的程序。是程序的一次执行过程，或是正在运行的程序。</li>
<li>线程：线程是由进程创建的，是进程的一个实体。一个进程可以创建多个线程。</li>
<li>单线程：同一时刻只允许执行一个线程。</li>
<li>多线程：同一时刻可以执行多个线程。</li>
<li>并发：同一时刻，多个任务交替执行。单核cpu实现的多任务就是并发。</li>
<li>并行：同一时刻，多个任务同时执行。多核cpu可以实现并行。</li>
</ul>
<h2 id="线程使用"><a class="markdownIt-Anchor" href="#线程使用"></a> 线程使用</h2>
<p>两种方法：</p>
<ul>
<li>继承<code>Thread</code>类，重写<code>run()</code>方法</li>
<li>实现<code>Runnable</code>接口，重写<code>run()</code> 方法</li>
</ul>
<p><img src="/img/Java/02JavaBasic/image-20220920171554507.png" alt="image-20220920171554507" /></p>
<h3 id="继承thread类"><a class="markdownIt-Anchor" href="#继承thread类"></a> 继承<code>Thread</code>类</h3>
<ul>
<li>当一个类继承了<code>Thread</code>类，该类就可以当作线程使用</li>
<li>会重写<code>run</code>方法，写自己的业务代码</li>
<li><code>run</code> <code>Thread</code>类实现了<code>Runnable</code>接口中的<code>run</code>方法。</li>
</ul>
<p><strong>运行流程</strong>⭐</p>
<p>运行<code>main</code>函数 =&gt; 开启进程 =&gt; 创建<code>main</code>线程 =&gt; 创建子线程<code>Thread-0</code>。</p>
<p>当<code>main</code>线程启动一个子线程<code>Thread-0</code>时，主线程不会阻塞，会继续执行。</p>
<p><strong>注意</strong>：需要进程中的所有线程结束后进程才会结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Cat.java</span></span><br><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;  <span class="comment">// 每隔1s输出一次</span></span><br><span class="line">            System.out.println(<span class="string">&quot;mmm&quot;</span> + (times ++));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(times == <span class="number">5</span>) <span class="keyword">break</span>;  <span class="comment">// 输出5次，结束线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Thread01.java</span></span><br><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.start(); <span class="comment">// 启动线程-&gt; 执行cat的run方法，不能使用cat.run(),因为这样就是在使用main线程串行化执行。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程和子线程Thread-0交替执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程继续执行：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程：i = &quot;</span> + i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/02JavaBasic/image-20220921095214016.png" alt="image-20220921095214016" /></p>
<p><strong><code>start()</code>函数源码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">start();</span><br><span class="line">(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        start0();</span><br><span class="line">    &#125;</span><br><span class="line">(<span class="number">2</span>)</span><br><span class="line">	<span class="comment">// start0() 是本地方法，是JVM调用，底层是C/C++实现.</span></span><br><span class="line">	<span class="comment">// 真正实现多线程的效果是start0()方法。</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/02JavaBasic/image-20220921100108731.png" alt="image-20220921100108731" /></p>
<h3 id="实现runnable接口"><a class="markdownIt-Anchor" href="#实现runnable接口"></a> 实现<code>Runnable</code>接口💡</h3>
<ul>
<li>java是单继承的，在某些情况下一个类已经继承了某个父类，这时在用继承<code>Thread</code>类方法来创建线程则不能了。</li>
<li>则可以通过实现<code>Runnable</code>接口来创建线程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runnable01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">// dog.start(); 不能直接调用start方法</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dog);  <span class="comment">// 底层使用了设计模式(代理模式)</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小狗汪汪叫..&quot;</span> + (++ count) + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>模拟<code>Thread</code>类的静态代理模式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Tiger</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tiger</span>();</span><br><span class="line">        <span class="type">ThreadProxy</span> <span class="variable">threadProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadProxy</span>(tiger);</span><br><span class="line">        threadProxy.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Aniaml</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_">Aniaml</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老虎嗷嗷叫..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadProxy</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">// 模拟Thread类的代理模式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(target != <span class="literal">null</span>) &#123;</span><br><span class="line">            target.run();  <span class="comment">// 动态绑定，在本例中就是调用了tiger的run方法。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadProxy</span><span class="params">(Runnable target)</span> &#123;  <span class="comment">// 构造函数，用于接收实现了Runnable接口的类</span></span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;  </span><br><span class="line">        start0(); <span class="comment">// 启动线程最关键的就是start0函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span> &#123; <span class="comment">// 简单模拟start0函数</span></span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="thread和runnale的区别"><a class="markdownIt-Anchor" href="#thread和runnale的区别"></a> <code>Thread</code>和<code>Runnale</code>的区别</h3>
<ul>
<li>没有本质区别，从jdk文档可以看到<code>Thread</code>类本身就实现了<code>Runnale</code>接口<code>start() -&gt; start0()</code></li>
<li>实现<code>Runnable</code>接口更加适合多个线程<strong>共享</strong>一个资源的情况，并且避免了单继承的限制。建议使用</li>
</ul>
<h2 id="多线程"><a class="markdownIt-Anchor" href="#多线程"></a> 多线程</h2>
<p>创建两个线程，分别执行不同的功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T1</span>();</span><br><span class="line">        <span class="type">T2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T2</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t2);</span><br><span class="line">        thread1.start();  <span class="comment">// 启动第一个线程</span></span><br><span class="line">        thread2.start();  <span class="comment">// 启动第二个线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每隔1s输出一次</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World &quot;</span> + (++count));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hi.. &quot;</span> + (++count));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">5</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程终止"><a class="markdownIt-Anchor" href="#线程终止"></a> 线程终止</h2>
<ul>
<li>线程完成任务后，会自动退出</li>
<li>还可以通过使用变量来控制run方法退出的方式停止线程，即通知方式。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.exit_;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadExit_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以通过修改loop，让t1退出run方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        t1.setLoop(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T 运行中...&quot;</span> + (++ count));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoop</span><span class="params">(<span class="type">boolean</span> loop)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程的常用方法"><a class="markdownIt-Anchor" href="#线程的常用方法"></a> 线程的常用方法</h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>setName(name)</code></td>
<td style="text-align:center">设置线程名称，使之与参数name相同</td>
</tr>
<tr>
<td style="text-align:center"><code>getName(name)</code></td>
<td style="text-align:center">返回该线程的名称</td>
</tr>
<tr>
<td style="text-align:center"><code>start()</code></td>
<td style="text-align:center">启动线程，java虚拟机底层调用<code>start0</code>方法</td>
</tr>
<tr>
<td style="text-align:center"><code>run()</code></td>
<td style="text-align:center">调用线程对象<code>run</code>方法</td>
</tr>
<tr>
<td style="text-align:center"><code>setPriority(idx)</code></td>
<td style="text-align:center">更改线程的优先级</td>
</tr>
<tr>
<td style="text-align:center"><code>getPriority()</code></td>
<td style="text-align:center">获取线程的优先级</td>
</tr>
<tr>
<td style="text-align:center"><code>sleep(time)</code></td>
<td style="text-align:center">在指定的毫秒数内让当前正在执行的线程休眠</td>
</tr>
<tr>
<td style="text-align:center"><code>interrupt</code></td>
<td style="text-align:center">中断线程，注意不是终止</td>
</tr>
<tr>
<td style="text-align:center"><code>yield</code></td>
<td style="text-align:center">线程的礼让，让出一下cpu让其他线程执行。但礼让时间不确定。所以也不一定成功</td>
</tr>
<tr>
<td style="text-align:center"><code>join</code></td>
<td style="text-align:center">线程的插队，插队的线程一旦插队成功，则肯定先执行玩插入的线程所有任务</td>
</tr>
</tbody>
</table>
<ul>
<li>用户线程：也叫工作线程，当线程的任务执行完或通知方式结束</li>
<li>守护线程：一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束。</li>
<li>常见的守护线程：垃圾回收机制。</li>
</ul>
<p>设置守护线程的方法：<code>子线程.setDaemon(true)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">MyDaemonThread</span> <span class="variable">myDaemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDaemonThread</span>();</span><br><span class="line">        <span class="comment">//如果我们希望当main线程结束后，子线程自动结束</span></span><br><span class="line">        <span class="comment">//,只需将子线程设为守护线程即可</span></span><br><span class="line">        myDaemonThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        myDaemonThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;<span class="comment">//main线程</span></span><br><span class="line">            System.out.println(<span class="string">&quot;宝强在辛苦的工作...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDaemonThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;<span class="comment">//无限循环</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠1000毫秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;马蓉和宋喆快乐聊天，哈哈哈~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程的生命周期状态"><a class="markdownIt-Anchor" href="#线程的生命周期状态"></a> 线程的生命周期(状态)</h2>
<p><img src="/img/Java/02JavaBasic/image-20220921150038797.png" alt="image-20220921150038797" /></p>
<p><strong>状态转移图</strong></p>
<p><img src="/img/Java/02JavaBasic/image-20220923092250790.png" alt="image-20220923092250790" /></p>
<h2 id="锁"><a class="markdownIt-Anchor" href="#锁"></a> 锁</h2>
<h3 id="synchronized线程同步"><a class="markdownIt-Anchor" href="#synchronized线程同步"></a> <code>Synchronized</code>线程同步 ⭐</h3>
<p><code>synchronized</code>所得是对象不是代码，锁方法和非锁方法同时执行。</p>
<blockquote>
<p>在多线程编程，一些敏感词数据不允许被多个线程同时访问，此时就是用同步访问技术，保证数据在任何时刻，最多有一个线程访问，以保证数据的完整性。</p>
<p>线程同步，即当有一个线程在对内存进行操作时，其他线程都不能对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作。</p>
</blockquote>
<p><strong>属性</strong></p>
<ol>
<li>可重入 ，可以加很多道锁，但是锁的还是this</li>
<li>异常锁，若程序产生了异常，则会自动释放锁。</li>
</ol>
<p><code>synchronized</code><strong>底层实现</strong></p>
<p>当<code>synchronized(object)</code>后，会首先使用 markword 记录这个线程ID（偏向锁）；然后如果产生了线程争用，则升级为自旋锁；10次以后，升级为重量级锁 - OS</p>
<p>执行时间短（加锁代码），线程数少，用自旋</p>
<p>执行时间长，线程数多，用系统锁</p>
<ul>
<li>JDK早期</li>
</ul>
<p><strong>使用方法</strong></p>
<ul>
<li>同步代码块</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象) &#123;  <span class="comment">// 得到对象的锁，才能操作同步代码</span></span><br><span class="line">    <span class="comment">// 需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>synchronized</code> 还可以放在方法声明中，表示整个方法为同步方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span> <span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.syn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 使用多线程，模拟三个窗口同时售票100张</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//测试一把</span></span><br><span class="line">        <span class="type">SellTicket03</span> <span class="variable">sellTicket03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket03</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket03).start();<span class="comment">//第1个线程-窗口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket03).start();<span class="comment">//第2个线程-窗口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket03).start();<span class="comment">//第3个线程-窗口</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口方式, 使用synchronized实现线程同步</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket03</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//让多个线程共享 ticketNum</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//控制run方法变量</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//同步方法（静态的）的锁为当前类本身</span></span><br><span class="line">    <span class="comment">//老韩解读</span></span><br><span class="line">    <span class="comment">//1. public synchronized static void m1() &#123;&#125; 锁是加在 SellTicket03.class</span></span><br><span class="line">    <span class="comment">//2. 如果在静态方法中，实现一个同步代码块.</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        synchronized (SellTicket03.class) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;m2&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SellTicket03.class) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//老韩说明</span></span><br><span class="line">    <span class="comment">//1. public synchronized void sell() &#123;&#125; 就是一个同步方法</span></span><br><span class="line">    <span class="comment">//2. 这时锁在 this对象</span></span><br><span class="line">    <span class="comment">//3. 也可以在代码块上写 synchronize ,同步代码块, 互斥锁还是在this对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123; <span class="comment">//同步方法, 在同一时刻， 只能有一个线程来执行sell方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="comment">/*this*/</span> object) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束...&quot;</span>);</span><br><span class="line">                loop = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;窗口 &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span></span><br><span class="line">                    + <span class="string">&quot; 剩余票数=&quot;</span> + (--ticketNum));<span class="comment">//1 - 0 - -1  - -2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            <span class="comment">//休眠50毫秒, 模拟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            sell();<span class="comment">//sell方法是一个 同步方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="互斥锁"><a class="markdownIt-Anchor" href="#互斥锁"></a> 互斥锁</h3>
<blockquote>
<p>java语言中，引入了对象互斥锁的概念，来保证共享数据的完整性。</p>
<p>关键字<code>synchronized</code> 来与对象的互斥锁联系，当某对象用synchronized 修饰时，表明该对象在任意时刻只能由一个线程访问。</p>
<p>同步方法（非静态）的锁可以是this，也可以是其他对象（要求是同一对象）</p>
<p>同步方法（静态<code>static</code>）的锁可以是当前类本身。<code>类.class</code></p>
</blockquote>
<h3 id="死锁"><a class="markdownIt-Anchor" href="#死锁"></a> 死锁</h3>
<blockquote>
<p>多个线程都占用了对方的锁资源，但不肯相让，导致了死锁。在编程时一定要避免死锁的放生。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.syn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 模拟线程死锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟死锁现象</span></span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">true</span>);</span><br><span class="line">        A.setName(<span class="string">&quot;A线程&quot;</span>);</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">false</span>);</span><br><span class="line">        B.setName(<span class="string">&quot;B线程&quot;</span>);</span><br><span class="line">        A.start();</span><br><span class="line">        B.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">// 保证多线程，共享一个对象,这里使用static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeadLockDemo</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面业务逻辑的分析</span></span><br><span class="line">        <span class="comment">//1. 如果flag 为 T, 线程A 就会先得到/持有 o1 对象锁, 然后尝试去获取 o2 对象锁</span></span><br><span class="line">        <span class="comment">//2. 如果线程A 得不到 o2 对象锁，就会Blocked</span></span><br><span class="line">        <span class="comment">//3. 如果flag 为 F, 线程B 就会先得到/持有 o2 对象锁, 然后尝试去获取 o1 对象锁</span></span><br><span class="line">        <span class="comment">//4. 如果线程B 得不到 o1 对象锁，就会Blocked</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;<span class="comment">//对象互斥锁, 下面就是同步代码</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入3&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入4&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="释放锁"><a class="markdownIt-Anchor" href="#释放锁"></a> 释放锁</h3>
<ul>
<li>当前线程的同步方法、同步代码块执行结束</li>
<li>当前线程在同步代码块、同步方法中遇到<code>break</code>、<code>return</code></li>
<li>当前线程在同步代码块 、同步方法中出现了未处理的<code>Error</code>或<code>Exception</code>，导致异常结束</li>
<li>当前线程在同步代码块、同步方法中执行了线程对象的<code>wait()</code>方法，当前线程暂停，并释放锁</li>
</ul>
<h3 id="synchronized优化"><a class="markdownIt-Anchor" href="#synchronized优化"></a> <code>synchronized</code>优化</h3>
<ul>
<li>锁的细化</li>
<li>锁的粗化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FineCoarseLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当存在多段需要加锁的代码，则可以进行锁的粗话，即将锁加载该方法上。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        count ++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 锁的细化（细粒度）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只需要将所加载关键的业务代码上</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="volatile"><a class="markdownIt-Anchor" href="#volatile"></a> <code>volatile</code></h2>
<ul>
<li>保证线程可见性，每次改写都会被线程读取。</li>
<li>禁止指令重排序</li>
<li>不能保证原子性，并不能保证多个线程共同修改running变量时所带来的不一致问题。</li>
</ul>
<p>实例1：保证线程可见性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.awt.windows.ThemeReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m start&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(flag) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;m end!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t::m, <span class="string">&quot;t1&quot;</span>).start();  <span class="comment">// lambda 表达式和下面的写法含义相同</span></span><br><span class="line"><span class="comment">//        new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void run() &#123;</span></span><br><span class="line"><span class="comment">//                t.m();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;, &quot;t1&quot;);</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        t.flag = <span class="literal">false</span>;  <span class="comment">// 改写后，线程会直接获取到。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例2：禁止指令重排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 懒汉式单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mgr06</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Mgr06 INSTANCE; <span class="comment">// 定义一个私有对象，并且一定需要是volatile</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Mgr06</span><span class="params">()</span> &#123;  <span class="comment">// 构造函数私有化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Mgr06 <span class="title function_">getINSTANCE</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 双重检查。保证线程安全。</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Mgr06.class) &#123;  <span class="comment">// 因为此时是静态方法，所以不能使用this，需要使用 类名.class</span></span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">Mgr06</span>();  <span class="comment">// 1.申请内存  2. 设置初始只  3.赋值</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                System.out.println(Mgr06.getINSTANCE().hashCode());  <span class="comment">// 创建100个对象同时获取Mgr06对象。</span></span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="多线程与高并发"><a class="markdownIt-Anchor" href="#多线程与高并发"></a> 多线程与高并发⭐⭐⭐</h1>
<p>凡是从时间角度或者优先级角度解决多线程问题皆不对！！！凡是从<code>join</code>考虑的，也全不对！！！</p>
<h2 id="哲学家就餐问题"><a class="markdownIt-Anchor" href="#哲学家就餐问题"></a> 哲学家就餐问题</h2>
<p><img src="https://img-blog.csdnimg.cn/20200311170922207.png" alt="在这里插入图片描述" /></p>
<h3 id="死锁写法"><a class="markdownIt-Anchor" href="#死锁写法"></a> 死锁写法</h3>
<ul>
<li>创建筷子类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ChopStick 类 筷子类</span></span><br><span class="line"><span class="keyword">package</span> com.xzt.PhilosopherDining;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChopStick</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>创建线程类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T01_DeadLock类，会造成死锁</span></span><br><span class="line"><span class="keyword">package</span> com.xzt.PhilosopherDining;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T01_DeadLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ChopStick</span> <span class="variable">ch0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChopStick</span>();  <span class="comment">// 创建5根筷子</span></span><br><span class="line">        <span class="type">ChopStick</span> <span class="variable">ch1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChopStick</span>();</span><br><span class="line">        <span class="type">ChopStick</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChopStick</span>();</span><br><span class="line">        <span class="type">ChopStick</span> <span class="variable">ch3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChopStick</span>();</span><br><span class="line">        <span class="type">ChopStick</span> <span class="variable">ch4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChopStick</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Philosohper</span> <span class="variable">p0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Philosohper</span>(<span class="string">&quot;p0&quot;</span>, <span class="number">0</span>, ch0, ch1);  <span class="comment">// 创建5个哲学家，指定其编号及左右筷子编号。</span></span><br><span class="line">        <span class="type">Philosohper</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Philosohper</span>(<span class="string">&quot;p1&quot;</span>, <span class="number">1</span>, ch1, ch2);</span><br><span class="line">        <span class="type">Philosohper</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Philosohper</span>(<span class="string">&quot;p2&quot;</span>, <span class="number">2</span>, ch2, ch3);</span><br><span class="line">        <span class="type">Philosohper</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Philosohper</span>(<span class="string">&quot;p3&quot;</span>, <span class="number">3</span>, ch3, ch4);</span><br><span class="line">        <span class="type">Philosohper</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Philosohper</span>(<span class="string">&quot;p4&quot;</span>, <span class="number">4</span>, ch4, ch0);</span><br><span class="line"></span><br><span class="line">        p0.start();</span><br><span class="line">        p1.start();</span><br><span class="line">        p2.start();</span><br><span class="line">        p3.start();</span><br><span class="line">        p4.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Philosohper</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ChopStick left, right;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Philosohper</span><span class="params">(String name, <span class="type">int</span> index, ChopStick left, ChopStick right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setName(name);</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (right) &#123;  <span class="comment">// 拿起右筷子</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (left) &#123;  <span class="comment">// 拿起左筷子</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(index + <span class="string">&quot; 号哲学家已经吃完&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="左撇子算法"><a class="markdownIt-Anchor" href="#左撇子算法"></a> 左撇子算法</h3>
<ul>
<li>解决死锁问题（<strong>左撇子算法</strong>）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.PhilosopherDining;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 只需要有一个哲学家是左撇子就可以，然后先抓左手，后抓右手，其他的哲学家仍然先抓右手再抓左手。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T02_DeadLockOpen</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ChopStick</span> <span class="variable">ch0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChopStick</span>();  <span class="comment">// 创建5根筷子</span></span><br><span class="line">        <span class="type">ChopStick</span> <span class="variable">ch1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChopStick</span>();</span><br><span class="line">        <span class="type">ChopStick</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChopStick</span>();</span><br><span class="line">        <span class="type">ChopStick</span> <span class="variable">ch3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChopStick</span>();</span><br><span class="line">        <span class="type">ChopStick</span> <span class="variable">ch4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChopStick</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Philosohper</span> <span class="variable">p0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Philosohper</span>(<span class="string">&quot;p0&quot;</span>, <span class="number">0</span>, ch0, ch1);  <span class="comment">// 创建5个哲学家，指定其编号及左右筷子编号。</span></span><br><span class="line">        <span class="type">Philosohper</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Philosohper</span>(<span class="string">&quot;p1&quot;</span>, <span class="number">1</span>, ch1, ch2);</span><br><span class="line">        <span class="type">Philosohper</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Philosohper</span>(<span class="string">&quot;p2&quot;</span>, <span class="number">2</span>, ch2, ch3);</span><br><span class="line">        <span class="type">Philosohper</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Philosohper</span>(<span class="string">&quot;p3&quot;</span>, <span class="number">3</span>, ch3, ch4);</span><br><span class="line">        <span class="type">Philosohper</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Philosohper</span>(<span class="string">&quot;p4&quot;</span>, <span class="number">4</span>, ch4, ch0);</span><br><span class="line"></span><br><span class="line">        p0.start();</span><br><span class="line">        p1.start();</span><br><span class="line">        p2.start();</span><br><span class="line">        p3.start();</span><br><span class="line">        p4.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Philosohper</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ChopStick left, right;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Philosohper</span><span class="params">(String name, <span class="type">int</span> index, ChopStick left, ChopStick right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setName(name);</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index % <span class="number">2</span> == <span class="number">0</span>) &#123;  <span class="comment">// 偶数的哲学家是左撇子</span></span><br><span class="line">                <span class="keyword">synchronized</span> (left) &#123;  <span class="comment">// 拿起左筷子</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (right) &#123;  <span class="comment">// 拿起右筷子</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(index + <span class="string">&quot; 号哲学家已经吃完&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (right) &#123;  <span class="comment">// 拿起左筷子</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (left) &#123;  <span class="comment">// 拿起右筷子</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(index + <span class="string">&quot; 号哲学家已经吃完&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="交替输出"><a class="markdownIt-Anchor" href="#交替输出"></a> 交替输出</h2>
<p>两个字符串<code>1234567</code>，<code>ABCDEFG</code>，要求交替输出，并且每次先输出数字。</p>
<h3 id="实现方式1locksupport"><a class="markdownIt-Anchor" href="#实现方式1locksupport"></a> 实现方式1：LockSupport</h3>
<p><code>LockSupport.unpark(t1)</code>、<code>LockSupport.park()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.alternateoutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T01_Output</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="literal">null</span>, t2 = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] aI = <span class="string">&quot;1234567&quot;</span>.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] aC = <span class="string">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c : aI) &#123;</span><br><span class="line">                System.out.println(c);</span><br><span class="line">                LockSupport.unpark(t2); <span class="comment">// 先叫醒t2</span></span><br><span class="line">                LockSupport.park(); <span class="comment">// 然后睡觉</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c : aC) &#123;</span><br><span class="line">                LockSupport.park(); <span class="comment">// 先睡觉 挂起</span></span><br><span class="line">                System.out.println(c);</span><br><span class="line">                LockSupport.unpark(t1);  <span class="comment">// 然后叫醒t1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现方法2synchronized"><a class="markdownIt-Anchor" href="#实现方法2synchronized"></a> 实现方法2<code>synchronized</code></h3>
<p><code>wait(); notify()</code></p>
<p>存在问题：可能先输出了字母后输出了数字。可以使用<code>CountDownLatch latch = new CountDownLatch(1); // 门闩</code></p>
<p>给后输出的前面插上门闩<code>latch.await()</code>，等先输出的输出结束后放下门闩<code>latch.countDown()</code>，如下注释部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.alternateoutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T02_WaitNotify</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="literal">null</span>, t2 = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">char</span>[] aI = <span class="string">&quot;1234567&quot;</span>.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] aC = <span class="string">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        CountDownLatch latch = new CountDownLatch(1);</span></span><br><span class="line">        t1 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> c : aI) &#123;</span><br><span class="line">                    System.out.println(c);</span><br><span class="line"><span class="comment">//                    latch.countDown();</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        o.notify();  <span class="comment">// 叫醒对方</span></span><br><span class="line">                        o.wait(); <span class="comment">// wait让出锁自己休息</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                o.notify();  <span class="comment">// 必要，否则无法停止，因为总有结束时会有一方在休息，需要叫醒</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                latch.await();</span></span><br><span class="line"><span class="comment">//            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> c : aC) &#123;</span><br><span class="line">                    System.out.println(c);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        o.notify();</span><br><span class="line">                        o.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                o.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现方式3renntrantlock"><a class="markdownIt-Anchor" href="#实现方式3renntrantlock"></a> 实现方式3：<code>RenntrantLock()</code></h3>
<p><code>RenntrantLock()</code>可重入锁，可以做队列。<code>singal(); await();</code></p>
<p><code>RenntrantLock</code> 和<code>synchronized</code>的区别</p>
<ul>
<li><code>RenntrantLock</code> 可以做队列，多个队列<code>Condition</code>；<code>synchronized</code>只有一个队列</li>
<li><code>RenntrantLock</code> 可以做公平锁；<code>synchronized</code>只能做非公平锁。</li>
<li><code>RenntrantLock</code> 可以尝试上锁；<code>synchronized</code>只能傻傻等待。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.alternateoutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T03_Lock_Condition</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] aI = <span class="string">&quot;1234567&quot;</span>.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] aC = <span class="string">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();  <span class="comment">// 可重入锁</span></span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition(); <span class="comment">// 队列1</span></span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition(); <span class="comment">// 队列2</span></span><br><span class="line"></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);  <span class="comment">// 门闩</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                latch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lock.lock(); <span class="comment">// 上锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> c : aI) &#123;</span><br><span class="line">                    System.out.println(c);</span><br><span class="line">                    </span><br><span class="line">                    condition2.signal();</span><br><span class="line">                    condition1.await();</span><br><span class="line">                &#125;</span><br><span class="line">                condition2.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock(); <span class="comment">// 上锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> c : aC) &#123;</span><br><span class="line">                    System.out.println(c);</span><br><span class="line">                    latch.countDown(); <span class="comment">// 放下门闩</span></span><br><span class="line"></span><br><span class="line">                    condition1.signal();</span><br><span class="line">                    condition2.await();</span><br><span class="line">                &#125;</span><br><span class="line">                condition1.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现方式4transferqueue"><a class="markdownIt-Anchor" href="#实现方式4transferqueue"></a> 实现方式4：<code>TransferQueue&lt;&gt;</code></h3>
<p><code>TransferQueue&lt;&gt;</code>是一个交换队列，容量为0，只能用于交换。互相打印对方的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.alternateoutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedTransferQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T04_TransferQueue</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] aI = <span class="string">&quot;1234567&quot;</span>.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] aC = <span class="string">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        LinkedTransferQueue&lt;Character&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedTransferQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> c : aI) &#123;</span><br><span class="line">                    queue.transfer(c);  <span class="comment">// 先仍一个c</span></span><br><span class="line">                    System.out.println(queue.take());  <span class="comment">//在输出</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">char</span> c : aC) &#123;</span><br><span class="line">                    System.out.println(queue.take());  <span class="comment">// 先输出队列中的元素，输出的是aI扔进去的。</span></span><br><span class="line">                    queue.transfer(c); <span class="comment">// 再扔进去一个c</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事务问题"><a class="markdownIt-Anchor" href="#事务问题"></a> 事务问题</h2>
<p>三个任务，一个任务执行错误，其他任务都应该取消。</p>
<h2 id="cas-无锁优化自旋"><a class="markdownIt-Anchor" href="#cas-无锁优化自旋"></a> CAS 无锁优化，自旋</h2>
<h2 id="atomicinterge"><a class="markdownIt-Anchor" href="#atomicinterge"></a> <code>AtomicInterge</code></h2>
<p>不需要加锁，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T01_AtomicInterge</span> &#123;</span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>); <span class="comment">// 相当于Interge count = 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            count.incrementAndGet(); <span class="comment">// 相当于 count ++，但是是线程安全的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T01_AtomicInterge</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T01_AtomicInterge</span>();</span><br><span class="line">        List&lt;Thread&gt; threads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads.add(<span class="keyword">new</span> <span class="title class_">Thread</span>(t::m, <span class="string">&quot;thread-&quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        threads.forEach((o) -&gt; o.start());</span><br><span class="line">        </span><br><span class="line">        threads.forEach((o) -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                o.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(t.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="新类型锁同步锁"><a class="markdownIt-Anchor" href="#新类型锁同步锁"></a> 新类型锁（同步锁）</h2>
<h3 id="synchronized"><a class="markdownIt-Anchor" href="#synchronized"></a> <code>synchronized</code></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 下面样例会等t1线程结束后才调用t2线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T00_Synchronized</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="comment">// if(i == 2) t.m2();  // 此处调用m2，则可实现当输出2时调用m2方法，体现了synchronized的可重用性。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m2......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T00_Synchronized</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T00_Synchronized</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t::m1, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t::m2, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="renntrantlock可重入锁"><a class="markdownIt-Anchor" href="#renntrantlock可重入锁"></a> <code>RenntrantLock</code>可重入锁</h3>
<p><code>private Lock lock = new ReentrantLock();</code></p>
<p><strong>优点</strong></p>
<ul>
<li>使用 try lock进行尝试锁定，不管锁定与否，方法都将继续执行。下方m2方法</li>
<li><strong>公平锁</strong>，默认是非公平锁，公平锁定义方法<code>private ReentrantLocklock = new ReentrantLock(true);</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T01_RenntrantLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">locked</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            locked = lock.tryLock(<span class="number">5</span>, TimeUnit.SECONDS);  <span class="comment">// 5s之内尝试获得锁，获得返回true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;m2 ....&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(locked) lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T01_RenntrantLock</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T01_RenntrantLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t::m1, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t::m2, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 公平锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T02_RenntrantLock2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>); <span class="comment">// 公平锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 公平锁输出：两个线程交替输出，非公平：等线程1结束，线程2才能拿到</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">T02_RenntrantLock2</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T02_RenntrantLock2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="countdownlatch-门闩"><a class="markdownIt-Anchor" href="#countdownlatch-门闩"></a> <code>CountDownLatch</code> 门闩</h3>
<p><code>CountDownLatch latch = new CountDownLatch(值);</code></p>
<p><strong>最终要的方法</strong></p>
<ul>
<li><code>latch.countDown();</code> 门闩值减一。</li>
<li><code>latch.await();</code> 插上门闩，等待门闩的值减为0后继续往后执行。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T03_CountDownLatchTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">usingCountDownLatch</span><span class="params">()</span> &#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> <span class="title class_">Thread</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(threads.length); <span class="comment">// 值为100 的门闩</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                    result += j;</span><br><span class="line">                &#125;</span><br><span class="line">                latch.countDown();  <span class="comment">// 门闩减一</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await();  <span class="comment">// 插上门闩，初始为100,等上面门闩值减为0时可以往后继续执行</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end Latch&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">usingJoin</span><span class="params">()</span> &#123;</span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> <span class="title class_">Thread</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                    result += j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用join函数，和上面效果一样。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                threads[i].join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;end Latch&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        usingCountDownLatch();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cyclicbarrier-栅栏"><a class="markdownIt-Anchor" href="#cyclicbarrier-栅栏"></a> <code>CyclicBarrier</code> 栅栏</h3>
<p>主要用于限流。</p>
<p><strong>定义方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">CyclicBarrier</span> <span class="variable">barrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">20</span>, <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;满人，发车！！！&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">CyclicBarrier</span> <span class="variable">barrier1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">20</span>, () -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;满人，发车&quot;</span>);</span><br><span class="line">&#125;);  <span class="comment">// lambda表达式，和上面一样</span></span><br></pre></td></tr></table></figure>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T04_TestCyclicBarrier</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">barrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">20</span>, <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;满人，发车！！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">barrier1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">20</span>, () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;满人，发车&quot;</span>);</span><br><span class="line">        &#125;);  <span class="comment">// lambda表达式，和上面一样</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    barrier.await();  <span class="comment">// 满20个线程才能执行</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="phaser-阶段"><a class="markdownIt-Anchor" href="#phaser-阶段"></a> <code>Phaser</code> 阶段</h3>
<p>…</p>
<h3 id="readwritelock-读写锁"><a class="markdownIt-Anchor" href="#readwritelock-读写锁"></a> <code>ReadWriteLock</code> 读写锁</h3>
<ul>
<li>读锁是共享锁，写锁是独占锁。读锁共享锁可保证并发读是非常高效的，其中读写，写读，写写是互斥的</li>
<li><code>synchronized</code>和<code>renntrantLock</code>都是独占锁。</li>
</ul>
<p><strong>定义方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="type">ReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">readLock</span> <span class="operator">=</span> readWriteLock.readLock();  <span class="comment">// 当一个线程获得读锁时，其他线程仍然可以继续读，</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">writeLock</span> <span class="operator">=</span> readWriteLock.writeLock();</span><br></pre></td></tr></table></figure>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.FloatControl;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 读写锁：共享锁和排他锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T05_TestReadWirteLock</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">ReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">readLock</span> <span class="operator">=</span> readWriteLock.readLock();  <span class="comment">// 当一个线程获得读锁时，其他线程仍然可以继续读，</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">writeLock</span> <span class="operator">=</span> readWriteLock.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">(Lock lock)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;read over!!&quot;</span>);</span><br><span class="line">            <span class="comment">// 模拟读取操作</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(Lock lock, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            value = v;</span><br><span class="line">            System.out.println(<span class="string">&quot;write over!!&quot;</span>);</span><br><span class="line">            <span class="comment">// 模拟读取操作</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Runnable readR = () -&gt; read(lock);  // 1s读一次</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">readR</span> <span class="operator">=</span> () -&gt; read(readLock);  <span class="comment">// 1s所有线程都会读取</span></span><br><span class="line"><span class="comment">//        Runnable writeR = () -&gt; write(lock, new Random().nextInt());</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">writeR</span> <span class="operator">=</span> () -&gt; write(writeLock, <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">18</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(readR).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(writeR).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="semaphore信号量"><a class="markdownIt-Anchor" href="#semaphore信号量"></a> <code>Semaphore</code>信号量</h3>
<p><strong>定义方法</strong>：<code>Semaphore s = new Semaphore(值, true)</code>，此处的 值 代表最大允许同时执行的线程个数。<code>true</code>代表公平锁。</p>
<p><strong>常用方法</strong></p>
<ul>
<li><code>s.acquire()</code> 获得信号量(锁)，信号量值减一，若为0，则其他线程无法获取</li>
<li><code>s.release()</code> 释放信号量(锁)，信号量值加一。</li>
</ul>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T06_TestSemaphore</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">1</span>);  <span class="comment">// 允许一个线程同时执行</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();  <span class="comment">// 获得信号量，信号量值减一，若为0，则其他线程无法获取</span></span><br><span class="line">                System.out.println(<span class="string">&quot;T1 running....&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;T1 running....&quot;</span>);</span><br><span class="line">                semaphore.release(); <span class="comment">// 释放信号量，其他线程又可以重新获取。</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                semaphore.acquire();  <span class="comment">// 获得信号量，信号量值减一，若为0，则其他线程无法获取</span></span><br><span class="line">                System.out.println(<span class="string">&quot;T2 running....&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;T2 running....&quot;</span>);</span><br><span class="line">                semaphore.release(); <span class="comment">// 释放信号量，其他线程又可以重新获取。</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="exchanger-交换器"><a class="markdownIt-Anchor" href="#exchanger-交换器"></a> <code>Exchanger</code> 交换器</h3>
<p><code>static Exchanger&lt;String&gt; exchanger = new Exchanger&lt;&gt;();</code></p>
<p>交换两个线程中的内容，只能是两个线程之间。</p>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Exchanger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T07_TestExchanger</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;T1&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s = exchanger.exchange(s);  <span class="comment">// 阻塞</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + s);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;T2&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s = exchanger.exchange(s);  <span class="comment">// 阻塞，当Exchanger里面存在两个时进行交换。</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; &quot;</span> + s);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">t1 T2</span></span><br><span class="line"><span class="comment">t2 T1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="locksupport"><a class="markdownIt-Anchor" href="#locksupport"></a> <code>LockSupport</code></h3>
<p>可以任意位置停止。并且可以叫醒指定线程。</p>
<p><strong>常用方法</strong></p>
<ul>
<li><code>LockSupport.park()</code>，将线程暂停，但不是终止。</li>
<li><code>LockSupport.unpark(线程名)</code>，将指定线程恢复。并且<code>unpark</code>可以在<code>park</code>之前调用</li>
</ul>
<p><strong>实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T08_TestLockSupport</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">5</span>) LockSupport.park();  <span class="comment">// 将t线程暂停，但没有终止。</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">8000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;8s end!!!&quot;</span>);</span><br><span class="line">        LockSupport.unpark(t); <span class="comment">// 将t线程恢复</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="io流"><a class="markdownIt-Anchor" href="#io流"></a> IO流</h1>
<h2 id="文件"><a class="markdownIt-Anchor" href="#文件"></a> 文件</h2>
<blockquote>
<p>文件是保存数据的地方</p>
</blockquote>
<h3 id="文件流"><a class="markdownIt-Anchor" href="#文件流"></a> 文件流</h3>
<blockquote>
<p>文件在程序中是以流的形式来操作的</p>
<p>输入流：数据从数据源（文件）到程序（内存）的路径</p>
<p>输出流：数据从程序（内存）到数据源（文件）的路径</p>
</blockquote>
<h3 id="常用的文件操作"><a class="markdownIt-Anchor" href="#常用的文件操作"></a> 常用的文件操作</h3>
<ul>
<li>创建文件对象相关构造器和方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(String pathname);  <span class="comment">// 根据路径构建一个File对象</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(File parent, String child); <span class="comment">// 根据父目录文件+子路径构建</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(String parent, String child); <span class="comment">// 根据父目录+子路径构建</span></span><br><span class="line"></span><br><span class="line">file.crateNewFile(); <span class="comment">// 创建新文件</span></span><br></pre></td></tr></table></figure>
<ul>
<li>获取文件的相关信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取文件的信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//先创建文件对象</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\news1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用相应的方法，得到对应信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;文件名字=&quot;</span> + file.getName());</span><br><span class="line">    <span class="comment">//getName、getAbsolutePath、getParent、length、exists、isFile、isDirectory</span></span><br><span class="line">    System.out.println(<span class="string">&quot;文件绝对路径=&quot;</span> + file.getAbsolutePath());</span><br><span class="line">    System.out.println(<span class="string">&quot;文件父级目录=&quot;</span> + file.getParent());</span><br><span class="line">    System.out.println(<span class="string">&quot;文件大小(字节)=&quot;</span> + file.length());</span><br><span class="line">    System.out.println(<span class="string">&quot;文件是否存在=&quot;</span> + file.exists());<span class="comment">//T</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是不是一个文件=&quot;</span> + file.isFile());<span class="comment">//T</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是不是一个目录=&quot;</span> + file.isDirectory());<span class="comment">//F</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>目录的操作和文件删除</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断 d:\\news1.txt 是否存在，如果存在就删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\news1.txt&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">    <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">            System.out.println(filePath + <span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(filePath + <span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;该文件不存在...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 D:\\demo02 是否存在，存在就删除，否则提示不存在</span></span><br><span class="line"><span class="comment">//这里我们需要体会到，在java编程中，目录也被当做文件</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\demo02&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">    <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">            System.out.println(filePath + <span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(filePath + <span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;该目录不存在...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断 D:\\demo\\a\\b\\c 目录是否存在，如果存在就提示已经存在，否则就创建</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">directoryPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\demo\\a\\b\\c&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(directoryPath);</span><br><span class="line">    <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">        System.out.println(directoryPath + <span class="string">&quot;存在..&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.mkdirs()) &#123; <span class="comment">//创建一级目录使用mkdir() ，创建多级目录使用mkdirs()</span></span><br><span class="line">            System.out.println(directoryPath + <span class="string">&quot;创建成功..&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(directoryPath + <span class="string">&quot;创建失败...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="io流原理及流的分类"><a class="markdownIt-Anchor" href="#io流原理及流的分类"></a> IO流原理及流的分类</h2>
<blockquote>
<p>I/O技术是非常实用的技术，用于处理数据传输。如读/写文件。网络通讯等。</p>
<p>java程序中，对于数据的输入和输出是以<code>stream</code>流的方式进行</p>
<p><code>java.io</code>包下提供了各种流类和接口。</p>
</blockquote>
<h3 id="io流原理"><a class="markdownIt-Anchor" href="#io流原理"></a> I/O流原理</h3>
<ul>
<li>输入input：读取外部数据到程序（内存）中</li>
<li>输出output：将程序输出到磁盘、光盘等存储设备中。</li>
</ul>
<h3 id="流的分类"><a class="markdownIt-Anchor" href="#流的分类"></a> 流的分类</h3>
<p><img src="/img/Java/02JavaBasic/image-20220922145641013.png" alt="image-20220922145641013" /></p>
<p>615</p>
<h2 id="节点流和处理流"><a class="markdownIt-Anchor" href="#节点流和处理流"></a> 节点流和处理流</h2>
<h2 id="输入流"><a class="markdownIt-Anchor" href="#输入流"></a> 输入流</h2>
<h2 id="输出流"><a class="markdownIt-Anchor" href="#输出流"></a> 输出流</h2>
<h2 id="properties类"><a class="markdownIt-Anchor" href="#properties类"></a> <code>Properties</code>类</h2>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段1</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 企业开发基础 MySQL</title>
    <url>/2022/06/06/JAVA/04JavaMySQL/</url>
    <content><![CDATA[<h1 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h1>
<ul>
<li>数据库：简称DB（DataBase），按照一定格式存储数据的一些文件的组合。存储数据的仓库，实际就是一堆文件，这些文件中存储了具有特定格式的数据。</li>
<li>数据库管理系统：简称DBMS（DataBaseManagement），数据库管理系统是专门用来管理数据库中数据的，数据库管理系统可以对数据库当中的数据进行增删改查。
<ul>
<li>常见的数据库管理系统：MySQL，Oracle，MS SqlServer，DB2, sybase等…</li>
</ul>
</li>
<li>SQL：结构化查询语言，程序员需要学习SQL语句，程序员通过编写SQL语句，然后DBMS负责执行SQL语句，最终来完成对数据库中数据的增删改查操作。
<ul>
<li>SQL是一套标准，</li>
</ul>
</li>
</ul>
<p><strong>三者之间的关系</strong></p>
<p>​	DBMS —&gt; 执行  ----&gt; SQL —&gt; 操作 ----&gt; DB</p>
<h1 id="查看mysql服务"><a class="markdownIt-Anchor" href="#查看mysql服务"></a> 查看MySQL服务</h1>
<blockquote>
<p>​	计算机点击右键，选择管理，在选择服务和应用程序中的服务，找到mysql服务。默认是自动启动状态，只有在启动状态才能够使用。</p>
</blockquote>
<h2 id="mysql服务启停"><a class="markdownIt-Anchor" href="#mysql服务启停"></a> MySQL服务启停</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net stop MySQL  <span class="comment">#停止服务</span></span><br><span class="line">net start MySQL <span class="comment">#开启服务</span></span><br></pre></td></tr></table></figure>
<h2 id="登录mysql"><a class="markdownIt-Anchor" href="#登录mysql"></a> 登录MySQL</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p密码  <span class="comment"># 显示密码的形式</span></span><br><span class="line">mysql -uroot -p <span class="comment"># 隐藏密码</span></span><br></pre></td></tr></table></figure>
<h1 id="sql-分类"><a class="markdownIt-Anchor" href="#sql-分类"></a> SQL 分类⭐</h1>
<ul>
<li>DQL：数据查询语言，关键字：<code>select</code></li>
<li>DML：数据操作语言，表中数据的增删改，<code>delete</code>、<code>insert</code>、<code>update</code></li>
<li>DDL：数据定义语言，表结构的增删改<code>create</code>、<code>drop</code>、<code>alter</code>主要操作的是表结构</li>
<li>TCL：事务控制语言，事务提交<code>commit</code>，事物回滚<code>rollback</code></li>
<li>DCL：数据控制语言，授权<code>grant</code>，撤销权限<code>revoke</code>…</li>
</ul>
<h1 id="mysql常用命令"><a class="markdownIt-Anchor" href="#mysql常用命令"></a> MySQL常用命令</h1>
<p>以下命令不区分大小写。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show databases;  <span class="comment"># 查看mysql中有哪些数据库</span></span><br><span class="line"></span><br><span class="line">use 数据库名;  <span class="comment"># 使用数据库</span></span><br><span class="line"></span><br><span class="line">create database 数据库名;  <span class="comment"># 创建数据库</span></span><br><span class="line"></span><br><span class="line">show tables;  <span class="comment"># 查看数据库中有哪些表</span></span><br></pre></td></tr></table></figure>
<p>数据库中最基本的单元是表：table</p>
<p>任何一张表都有行和列：</p>
<ul>
<li>行（row）：被称为数据/记录。</li>
<li>列（column）：别成为字段，每个字段都有字段名，数据类型，约束等属性。
<ul>
<li>字段名：是一个普通的名字，见名知意</li>
<li>数据类型：字符串，数字，日期等</li>
<li>约数：约束有很多，其中有唯一性约束。</li>
</ul>
</li>
</ul>
<h2 id="查看表结构"><a class="markdownIt-Anchor" href="#查看表结构"></a> 查看表结构</h2>
<p>只查看表结构不查看数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;  </span><br><span class="line"><span class="keyword">describe</span> 表名;</span><br></pre></td></tr></table></figure>
<h1 id="dql数据查询语言"><a class="markdownIt-Anchor" href="#dql数据查询语言"></a> DQL数据查询语言</h1>
<h2 id="简单查询"><a class="markdownIt-Anchor" href="#简单查询"></a> 简单查询</h2>
<ul>
<li>查询一个字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<ul>
<li>查询两个字段或多个字段，使用<code>,</code>隔开</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>, 字段名<span class="number">2</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<ul>
<li>查询所有字段，使用<code>*</code>进行查询时，效率低，可读性差</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名; </span><br></pre></td></tr></table></figure>
<ul>
<li>给某个字段名起别名，使用<code>as</code> 关键字，其中<code>as</code>关键字可以省略。只是将显示的查询结果列名显示为别名。若别名中有空格或是中文则可以使用<code>单引号</code>将别名括起来</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>, 字段名<span class="number">2</span> <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>, 字段名<span class="number">2</span> 别名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用数学表达式</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="operator">*</span> <span class="number">12</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<p>条件查询</p>
<p>不是将表中所有数据都查出来，是查询出来符合条件的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	字段<span class="number">1</span>, 字段<span class="number">2</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	表名</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	条件;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>=</code>等于条件</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sno <span class="operator">=</span> <span class="string">&#x27;201717901&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;&gt;</code>、<code>!=</code> 不等于</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sno <span class="operator">!=</span> <span class="string">&#x27;201717901&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sno <span class="operator">&lt;&gt;</span> <span class="string">&#x27;201717901&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;</code> ，<code>&lt;=</code>，<code>&gt;</code>，<code>&gt;=</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sage <span class="operator">&lt;</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sage <span class="operator">&lt;=</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sage <span class="operator">&gt;</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sage <span class="operator">&gt;=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>between...and...</code> 必须左小右大， 等同于 <code>&gt;= and &lt;=</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sage <span class="operator">&gt;=</span> <span class="number">18</span> <span class="keyword">and</span> sage <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sage <span class="keyword">between</span> <span class="number">18</span> <span class="keyword">and</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>is null</code> ，<code>is not null</code>，在数据库中 <code>null</code>不能使用<code>=</code>衡量。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> phone <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> phone <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>and</code> 并且</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sage <span class="operator">&gt;=</span> <span class="number">18</span> <span class="keyword">and</span> phone <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>or</code>或者</li>
</ul>
<p><code>and</code> 和 <code>or</code> 同时出现，有优先级问题，<code>and</code>优先级比<code>or</code>高</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno, sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> phone <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> sage <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>in</code>，相当于多个<code>or</code>，不是区间，是个具体的值。<code>not in</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sname <span class="keyword">in</span> (<span class="string">&#x27;ggg&#x27;</span>, <span class="string">&#x27;mmm&#x27;</span>, <span class="string">&#x27;qqq&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sname <span class="operator">=</span> <span class="string">&#x27;ggg&#x27;</span> <span class="keyword">or</span> sname <span class="operator">=</span> <span class="string">&#x27;mmm&#x27;</span> <span class="keyword">or</span> sname <span class="operator">=</span> <span class="string">&#x27;qqq&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>not</code> 取非，通常使用于 <code>is</code>或<code>in</code>中</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sname <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;ggg&#x27;</span>, <span class="string">&#x27;mmm&#x27;</span>, <span class="string">&#x27;qqq&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>like</code>， 模糊查询，<code>%</code>代表匹配任意个字符，<code>_</code> 任意一个字符</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%o%&#x27;</span>; # 名字中含o的</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%t&#x27;</span>;  # 以t结尾的</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;k%&#x27;</span>;  # 以k开头的</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;_a%&#x27;</span>; # 第二个字母是a的名字</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%\_%&#x27;</span>; # 名字中有_的</span><br></pre></td></tr></table></figure>
<h2 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h2>
<ul>
<li>关键字：<code>order by</code> 默认升序，降序关键字：<code>desc</code>，指顶升序<code>asc</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno, sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> sno; # 默认是升序</span><br><span class="line"><span class="keyword">select</span> sno, sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> sno <span class="keyword">desc</span>; # 降序</span><br><span class="line"><span class="keyword">select</span> sno, sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> sno <span class="keyword">asc</span>;  # 升序</span><br></pre></td></tr></table></figure>
<ul>
<li>两个字段或者多个字段排序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno, sname, sage <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>, sno <span class="keyword">asc</span>; # 按照年龄升序，相同则按照学号升序</span><br></pre></td></tr></table></figure>
<ul>
<li>根据字段的位置排序，不建议！！！</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sno, sage, sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>;  # 以sage排序，第<span class="number">2</span>列排序</span><br></pre></td></tr></table></figure>
<ul>
<li>当条件语句和排序共存时，需要先写条件语句再写排序语句</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sage <span class="keyword">between</span> <span class="number">18</span> <span class="keyword">and</span> <span class="number">30</span> <span class="keyword">order</span> <span class="keyword">by</span> sno <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h2 id="数据处理函数-单行处理函数"><a class="markdownIt-Anchor" href="#数据处理函数-单行处理函数"></a> 数据处理函数 / 单行处理函数</h2>
<p><strong>单行处理函数</strong> 的特点：一个输入对应一个输出</p>
<p>多行处理函数：多个输入对应一个输出</p>
<ul>
<li><code>upper()</code> 将该字段的所有字母都变为大写</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(sname) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>lower</code> 将该字段的所有字母都变为小写</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(sname) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>substr(截取的字符串, 起始下标, 截取长度)</code>取子串，<strong>起始下标从1开始</strong>。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> substr(sname, <span class="number">1</span>, <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>length</code>取长度</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> length(sname) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>concat(str1, str2)</code> 字符串拼接</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="built_in">upper</span>(substr(sname, <span class="number">1</span>, <span class="number">1</span>)), substr(sname, <span class="number">2</span>, length(sname) <span class="operator">-</span> <span class="number">1</span>)) <span class="keyword">from</span> <span class="keyword">user</span>;  # 将首字母转为大写</span><br></pre></td></tr></table></figure>
<ul>
<li><code>trim()</code> 去空格</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> sname <span class="operator">=</span> <span class="built_in">trim</span>(<span class="string">&#x27;   king&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>round(小数, 保留的小数位)</code>四舍五入，保留的小数位可以为负数，-1则代表保留到十位。</li>
<li><code>rand()</code> 生成随机数，生成<code>0 ~ 1</code>的随机数</li>
<li><code>ifnull(数据，被当作哪个值)</code> ，空处理函数，可以将<code>null</code>转换为一个具体的值。</li>
<li><code>case...when...then...when...then...else...end</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	sno, </span><br><span class="line">	sage,</span><br><span class="line">	(<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">then</span> sage <span class="operator">+</span> <span class="number">2</span> <span class="keyword">then</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">then</span> sage <span class="operator">+</span> <span class="number">1</span> <span class="keyword">else</span> sage <span class="keyword">end</span>) <span class="keyword">as</span> new_sage </span><br><span class="line"><span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<h2 id="分组函数-多行处理函数"><a class="markdownIt-Anchor" href="#分组函数-多行处理函数"></a> 分组函数 / 多行处理函数</h2>
<p>输入多行，最终输出一行。<strong>分组函数在使用时必须先进行分组才能够使用</strong>。若没有分组则默认整张表为一组。</p>
<ul>
<li><code>max</code>、<code>count</code>、<code>avg</code>、<code>min</code>、<code>sum</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(sal) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<ol>
<li>分组函数自动忽略<code>null</code>，不是一个值，是什么也没有</li>
<li>分组函数中<code>count(*)</code>和<code>count(具体字段)</code>不同。</li>
<li>分组函数不能直接使用在<code>where</code>子句，因为<code>where</code>的执行顺序比<code>group by</code>高。<strong>参考下面的执行顺序</strong></li>
</ol>
<h2 id="分组查询"><a class="markdownIt-Anchor" href="#分组查询"></a> 分组查询</h2>
<p>可以将数据先进行分组，然后都每一组数据进行操作。</p>
<p><strong>关键词</strong>：<code>group by</code></p>
<p><strong>关键字顺序</strong>：<code>select...from...where...group by...order by...</code></p>
<p><strong>执行顺序</strong>：<code>from -&gt; where -&gt; group by -&gt; select -&gt; order by</code>⭐</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查找计算机专业每种性别的平均年龄</span></span><br><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(sage) <span class="keyword">from</span> student <span class="keyword">where</span> major <span class="operator">=</span> <span class="string">&#x27;computer&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"><span class="comment">-- 查找每个专业的最大年龄</span></span><br><span class="line"><span class="keyword">select</span> major, <span class="built_in">max</span>(sage) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> major;</span><br></pre></td></tr></table></figure>
<p>结论：在一条<code>select</code> 语句中，如果有<code>group by</code>语句的话，<code>select</code>后面只能跟：参加分组的字段，以及分组函数，其他的一律不能跟。</p>
<ul>
<li>联合分组</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查找不同专业不同性别的最大年龄</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sage) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> major, sex;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>having</code></li>
</ul>
<p>使用<code>having</code>可以对分完之后的数据进一步过滤。</p>
<p><strong>注意</strong>：<code>having</code>不能单独使用，不能代替<code>where</code>，必须和<code>group by</code>联合使用。</p>
<p><strong>优化策略</strong>：优先选择<code>where</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查找不同专业的最大年龄，并且只显示最大年龄大于20的数据。执行效率低。</span></span><br><span class="line"><span class="keyword">select</span> major, <span class="built_in">max</span>(sage) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> major <span class="keyword">having</span> <span class="built_in">max</span>(sage) <span class="operator">&gt;</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 和上面的效果一样。</span></span><br><span class="line"><span class="keyword">select</span> major, <span class="built_in">max</span>(sage) <span class="keyword">where</span> sage <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">group</span> <span class="keyword">by</span> major;</span><br></pre></td></tr></table></figure>
<ul>
<li>总结：</li>
</ul>
<p><strong>关键字顺序</strong>：<code>select...from...where...group by...having...order by...</code> 只能按照这个顺序来</p>
<p><strong>执行顺序</strong>：<code>from -&gt; where -&gt; group by -&gt; having -&gt; select -&gt; order by</code></p>
<h2 id="去除重复记录"><a class="markdownIt-Anchor" href="#去除重复记录"></a> 去除重复记录</h2>
<p>注意：原表数据不会被修改，只是查询结果去重。</p>
<p><strong>关键字</strong>：<code>distinct</code>，只能出现在所有字段的前面。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 统计专业数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> major) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<h2 id="连接查询"><a class="markdownIt-Anchor" href="#连接查询"></a> 连接查询</h2>
<p>从一张表中单独查询称为单表查询。跨表查询称为链接查询。</p>
<h3 id="根据连接方式分类"><a class="markdownIt-Anchor" href="#根据连接方式分类"></a> <strong>根据连接方式分类</strong></h3>
<ul>
<li>内连接
<ul>
<li>等值连接</li>
<li>非等值连接</li>
<li>自连接</li>
</ul>
</li>
<li>外连接
<ul>
<li>左连接</li>
<li>有连接</li>
</ul>
</li>
<li>全连接</li>
</ul>
<p>当两张表进行连接查询没有任何条件限制的时候，最终查询结果条数，是两张表条数的乘积。这种现象称为 <strong>笛卡尔积现象</strong>。</p>
<p>表的连接次数越多，效率越低。则需要避免尽可能多的表连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> user.sname, student.major <span class="keyword">from</span> <span class="keyword">user</span>, student <span class="keyword">where</span> user.sno <span class="operator">=</span> student.sno;</span><br></pre></td></tr></table></figure>
<h3 id="内连接之等值连接"><a class="markdownIt-Anchor" href="#内连接之等值连接"></a> 内连接之等值连接</h3>
<p><code>table1 inner join table2 on 条件</code> 内连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> u.sname, s.major <span class="keyword">from</span> <span class="keyword">user</span> u, student s <span class="keyword">where</span> u.sno <span class="operator">=</span> s.sno; # SQL92</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> u.sname, s.major <span class="keyword">from</span> <span class="keyword">user</span> u <span class="keyword">inner</span> <span class="keyword">join</span> student s <span class="keyword">on</span> u.sno <span class="operator">=</span> s.sno; # SQL99 结构更清晰，表连接的条件是独立的，后面可加<span class="keyword">where</span>进一步进行筛选</span><br></pre></td></tr></table></figure>
<h3 id="内连接之非等值连接"><a class="markdownIt-Anchor" href="#内连接之非等值连接"></a> 内连接之非等值连接</h3>
<p>连接条件是非等值关系</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename, e.sal, s.grade </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	emp e </span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">	salgrade s </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">	e.sal <span class="keyword">between</span> s.losal <span class="keyword">on</span> s.hisal</span><br></pre></td></tr></table></figure>
<h3 id="内连接之自连接"><a class="markdownIt-Anchor" href="#内连接之自连接"></a> 内连接之自连接</h3>
<p>将一张表看作两张表，给一张表起两个别名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>, b.name <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span> <span class="keyword">from</span> <span class="keyword">user</span> a <span class="keyword">join</span> <span class="keyword">user</span> b <span class="keyword">on</span> a.pid <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure>
<h3 id="外连接之右连接"><a class="markdownIt-Anchor" href="#外连接之右连接"></a> 外连接之右连接</h3>
<p><strong>关键词</strong>：<code>right [outer] join...on</code></p>
<p><strong>内连接的特点</strong>：将完全匹配上的连接条件查询出来。</p>
<p><strong>外连接（右）</strong>：表示将<code>join</code>关键字右边的表看作<strong>主表</strong>，需要将其中的数据会全部查出来。两张表存在主次关系。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	u.sname, s.major </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	<span class="keyword">user</span> u </span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> </span><br><span class="line">	student s </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">	u.sno <span class="operator">=</span> s.sno;</span><br></pre></td></tr></table></figure>
<h3 id="外连接之左连接"><a class="markdownIt-Anchor" href="#外连接之左连接"></a> 外连接之左连接</h3>
<p><strong>关键词</strong>：<code>left [outer] join...on</code></p>
<p>和上面效果相同，需要将两张表的顺序变一下。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	u.sname, s.major </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	student s  </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> </span><br><span class="line">	<span class="keyword">user</span> u</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">	u.sno <span class="operator">=</span> s.sno;</span><br></pre></td></tr></table></figure>
<h3 id="多表连接"><a class="markdownIt-Anchor" href="#多表连接"></a> 多表连接</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	a</span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">	b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	a和b的连接条件</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">	c</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">	a和c的连接条件</span><br></pre></td></tr></table></figure>
<h2 id="子查询"><a class="markdownIt-Anchor" href="#子查询"></a> 子查询</h2>
<p><code>select</code>语句中嵌套<code>select</code>语句，被嵌套的<code>select</code>语句称为子查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	..(<span class="keyword">select</span>)..</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	..(<span class="keyword">select</span>)..</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">	..(<span class="keyword">select</span>)..</span><br></pre></td></tr></table></figure>
<ul>
<li><code>where</code>子句中的子查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找出大于平均年龄的学生</span></span><br><span class="line"><span class="keyword">select</span> sname, sage <span class="keyword">from</span> student <span class="keyword">where</span> sage <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sage) <span class="keyword">from</span> student);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>from</code>子句中的子查询</li>
</ul>
<p><code>from</code>后面的子查询，可以将子查询的查询结果当作一张临时表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找出每个岗位平均薪资的 等级</span></span><br><span class="line"><span class="keyword">select</span> job, <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"></span><br><span class="line">### 合并</span><br><span class="line"><span class="keyword">select</span> t.job, s.grade </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	(<span class="keyword">select</span> job, <span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job) t</span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">	salgrade s </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">	t.avgsal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>select</code>后面出现的子查询</li>
</ul>
<p>此时要求子查询只能一次返回一条结果，多余一条就报错。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	u.sno, (selct s.sname <span class="keyword">from</span> student <span class="keyword">where</span> u.sno <span class="operator">=</span> s.sno) <span class="keyword">as</span> sname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	<span class="keyword">user</span> u;</span><br></pre></td></tr></table></figure>
<h2 id="union合并查询结果集"><a class="markdownIt-Anchor" href="#union合并查询结果集"></a> <code>union</code>合并查询结果集</h2>
<p>下面三种写法比较。<code>union</code>效率比较高。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sname, major <span class="keyword">from</span> student <span class="keyword">where</span> major <span class="operator">=</span> <span class="string">&#x27;计算机科学与技术&#x27;</span> <span class="keyword">or</span> major <span class="operator">=</span> <span class="string">&#x27;网络工程&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sname, major <span class="keyword">from</span> student <span class="keyword">where</span> major <span class="keyword">in</span> (<span class="string">&#x27;计算机科学与技术&#x27;</span>, <span class="string">&#x27;网络工程&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sname, major <span class="keyword">from</span> student <span class="keyword">where</span> major <span class="operator">=</span> <span class="string">&#x27;计算机科学与技术&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> sname, major <span class="keyword">from</span> student <span class="keyword">where</span> major <span class="operator">=</span> <span class="string">&#x27;网络工程&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong>：在合并时，严格要求两个结果集的列数相同。mysql可以列的数据类型可不一致，orcal则不行。</p>
<h2 id="limit"><a class="markdownIt-Anchor" href="#limit"></a> <code>limit</code></h2>
<p><code>limit startIndex, length</code></p>
<p>将查询结果集中的一部分查询出来，通常用于分页查询。</p>
<p><strong>注意</strong>：mysql中 <code>limit</code> 在 <code>order by</code> 之后执行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按照年龄降序取前10条记录.</span></span><br><span class="line"><span class="keyword">select</span> sname, major, sage <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> sage <span class="keyword">desc</span> limit <span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> sname, major, sage <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> sage <span class="keyword">desc</span> limit <span class="number">0</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h3 id="通用分页"><a class="markdownIt-Anchor" href="#通用分页"></a> 通用分页</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">limit startIndex, length</span><br></pre></td></tr></table></figure>
<p>length：pageSize</p>
<p>startIndex：(pageNo - 1) * pageSize；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">limit (pageNo <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> pageSize, pageSize;</span><br></pre></td></tr></table></figure>
<h1 id="ddl数据定义语言"><a class="markdownIt-Anchor" href="#ddl数据定义语言"></a> DDL数据定义语言</h1>
<h2 id="表的创建"><a class="markdownIt-Anchor" href="#表的创建"></a> 表的创建</h2>
<p><strong>语法格式</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    字段名<span class="number">1</span> 数据类型，</span><br><span class="line">    字段名<span class="number">2</span> 数据类型，</span><br><span class="line">	字段名<span class="number">3</span> 数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 快速创建表(表的复制)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>
<p>表名建议以<code>t_</code>或者<code>tb_</code>开始，可读性强，见名知意。</p>
<p>字段名：见名知意。</p>
<p><strong>数据类型</strong>：</p>
<ul>
<li><code>vachar</code> 可变长度字符串，会根据数据实际长度<strong>动态分配</strong>长度，最长255。</li>
<li><code>char</code> 字符，不会根据数据实际长度分配长度，只会分配固定长度，会导致空间浪费</li>
<li><code>int</code> 整型</li>
<li><code>bigint</code> 等同于java中的<code>long</code></li>
<li><code>float</code> <code>double</code></li>
<li><code>date</code> 短日期</li>
<li><code>datetime</code> 长日期</li>
<li><code>clob</code> 字符大对象，最多可存储4G的字符串。超过255字符的都需要使用。</li>
<li><code>blob</code> 二进制大对象。专门用来存储图片，声音，视频等流媒体数据。往<code>blob</code>类型的字段上插入数据时需要使用IO流才行。</li>
</ul>
<h2 id="删除表格"><a class="markdownIt-Anchor" href="#删除表格"></a> 删除表格</h2>
<p><code>drop table if exists 表名</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> t_student; <span class="comment">-- 当student不存在时则报错。</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_student;</span><br></pre></td></tr></table></figure>
<h1 id="dml数据操作语言"><a class="markdownIt-Anchor" href="#dml数据操作语言"></a> DML数据操作语言</h1>
<h2 id="插入数据"><a class="markdownIt-Anchor" href="#插入数据"></a> 插入数据</h2>
<p><code>insert into 表名(字段1, 字段2, 字段3, ...) values(值1, 值2, 值2)</code></p>
<p>注意：字段名和值需要一一对应，数量要对应，数据类型也要对应。可以同时插入多条数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(sname, sage, sex) <span class="keyword">values</span>(<span class="string">&#x27;aaa&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(sname, sage, sex) <span class="keyword">values</span>((<span class="string">&#x27;aaa&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>), (<span class="string">&#x27;bbb&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;男&#x27;</span>), (<span class="string">&#x27;ccc&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;女&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p><strong>数字格式化</strong>：<code>format(数字, 格式)</code></p>
<p><code>str_to_date('字符串日期', '日期格式')</code>： 将字符串varchar类型转为date类型。<code>str_to_date('20-04-1999', '%d-%m-%Y')</code></p>
<p><code>dateformat(日期类型数据, '日期格式')</code>：将date类型转换为一定格式的varchar类型。</p>
<p><strong><code>date</code>和<code>datetime</code>的区别</strong></p>
<ul>
<li><code>date</code>是短日期，只包括年月日信息。默认格式：<code>%Y-%m-%d</code></li>
<li><code>datetime</code>是长日期，包括年月日时分秒信息。默认格式：<code>%Y-%m-%d %h:%i:%s</code></li>
<li><code>now()</code>函数，获取系统当前时间。并且获取的时间带有时分秒信息。</li>
</ul>
<h2 id="修改数据"><a class="markdownIt-Anchor" href="#修改数据"></a> 修改数据</h2>
<p><code>update 表名 set 字段1 = 值1, 字段2 = 值2 where 条件</code></p>
<p><strong>注意</strong>：没有条件，会把所有数据都更新。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> t_student <span class="keyword">set</span> sname <span class="operator">=</span> <span class="string">&#x27;mmm&#x27;</span>, sage <span class="operator">=</span> <span class="number">20</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h2 id="删除数据"><a class="markdownIt-Anchor" href="#删除数据"></a> 删除数据</h2>
<ul>
<li><code>delete from 表名 where 条件;</code></li>
</ul>
<p><strong>注意</strong>：没有条件会把整张表数据全部删除。</p>
<p><strong>缺点</strong>：效率较慢，并且删除后在硬盘上的存储空间不释放。</p>
<p><strong>优点</strong>：可以回滚。可以恢复删除的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> sno <span class="operator">=</span> <span class="string">&#x27;202010101&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>truncate table 表名</code> 属于DDL操作</li>
</ul>
<p><strong>优点</strong>：效率高，物理删除，表一次被截断。</p>
<p><strong>缺点</strong>：不支持回滚。</p>
<h1 id="约束"><a class="markdownIt-Anchor" href="#约束"></a> 约束</h1>
<blockquote>
<p>在创建表时可以给表中的字段加上一些约束，来保证这个表中数据的完整性和有效性！！！</p>
</blockquote>
<h2 id="常见的约束"><a class="markdownIt-Anchor" href="#常见的约束"></a> 常见的约束</h2>
<ul>
<li>非空约束：<code>not null</code></li>
<li>唯一性约束：<code>unique</code></li>
<li>主键约束：<code>primary key</code>，简称（PK）</li>
<li>外键约束：<code>foreign key</code>，简称（FK）</li>
<li>检查约束：<code>check</code> （mysql不支持，orcal支持）</li>
</ul>
<h2 id="非空约束"><a class="markdownIt-Anchor" href="#非空约束"></a> 非空约束</h2>
<blockquote>
<p>非空约束<code>not null</code> 的字段不能为NULL</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="唯一性约束"><a class="markdownIt-Anchor" href="#唯一性约束"></a> 唯一性约束</h2>
<blockquote>
<p>唯一性约束<code>unique</code>约束的字段不能重复。</p>
</blockquote>
<p>可以两个字段联合起来具有唯一性。</p>
<p><strong>表级约束</strong>：约束没有添加在列后面，这种约束被称为表级约束。当需要多个字段联合起来添加某一约束时，需要使用表级约束。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- name和email联合起来具有唯一性的创建方法（重名不同身份证号）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">255</span>),  <span class="operator">/</span><span class="operator">/</span> 约束没有添加在列后面，这种约束被称为表级约束。</span><br><span class="line">    <span class="keyword">unique</span> (name, email)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="主键约束"><a class="markdownIt-Anchor" href="#主键约束"></a> 主键约束⭐⭐</h2>
<blockquote>
<p>主键约束 <code>primary key</code> 约束的字段值即不能为空也不能重复。也可以进行表级约束</p>
<p>在mysql中，如果一个字段同时被<code>unique</code>和<code>not null</code>约束时，则该字段自动变成主键字段。（注意：Orcal不一样！！！）</p>
</blockquote>
<p><strong>主键特征</strong>：<code>not null</code> + <code>unique</code></p>
<p><strong>相关术语</strong></p>
<ul>
<li>主键约束：就是一种约束</li>
<li>主键字段：某个字段加上了主键约束，则该字段为主键字段</li>
<li>主键值：主键字段中的每一个值都叫做主键值。</li>
</ul>
<p>主键值是每一行记录的<strong>唯一标识</strong>，是每一行记录的身份证号。</p>
<p><strong>注意</strong></p>
<ul>
<li>任何一张表都应该有主键，没有主键则表无效。</li>
<li>在实际开发中不建议使用复合主键。</li>
<li>一张表只能存在一个主键约束</li>
<li>主键值建议使用：<code>int</code>、<code>bigint</code>、<code>char</code>等类型，不建议使用<code>varchar</code>，一般都是数字，一般都是定长的。</li>
</ul>
<p><strong>主键分类</strong></p>
<ul>
<li>自然主键：一个自然数，和业务没关系</li>
<li>业务主键：主键和业务紧密关联。例如拿银行卡号做主键。</li>
<li>在实际开发中，自然主键使用的较多。主键不建议使用业务。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 列级约束</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment, <span class="comment">-- auto_increment 自增</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表级约束 - 复合主键，在实际开发中不建议使用复合主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test (</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    sno <span class="type">varchar</span>(<span class="number">11</span>),</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">unique</span>,</span><br><span class="line">    <span class="keyword">primary</span> key(id, sno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="外键约束"><a class="markdownIt-Anchor" href="#外键约束"></a> 外键约束</h2>
<blockquote>
<p>主键约束 <code>foreign key</code> 约束的字段，保证了该字段中的每一个值都是引用的外键值或为NULL。</p>
</blockquote>
<p><strong>相关约束</strong></p>
<ul>
<li>外键约束：是一种约束</li>
<li>外键字段：该字段上添加了外键约束</li>
<li>外键值：外键字段中的每一个值。</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li>被引用的表为父表，被约束的表为子表。</li>
<li>删除表的时候，应该先删子表再删除父表。</li>
<li>创建表的时候，应该先创父表再创键子表。</li>
<li>子表中的外键引用的父表中的某个字段，被引用的这个字段不是必须为主键，但必须具有唯一性<code>unique</code></li>
<li>外键值可以为NULL</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment, <span class="comment">-- auto_increment 自增</span></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    cno <span class="type">int</span>,</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">unique</span>,</span><br><span class="line">    <span class="keyword">foreign</span> key(cno) <span class="keyword">references</span> t_class(classno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="存储引擎"><a class="markdownIt-Anchor" href="#存储引擎"></a> 存储引擎💤</h1>
<blockquote>
<p>存储引擎是MySQL中特有的一个术语。</p>
<p>实际上存储引擎是一个表存储/组织数据的方式。不同的存储引擎，表数据的存储方式不同。</p>
</blockquote>
<h2 id="给表添加指定存储引擎"><a class="markdownIt-Anchor" href="#给表添加指定存储引擎"></a> 给表添加/指定”存储引擎“</h2>
<ul>
<li>mysql默认的存储引擎是：InnoDB</li>
<li>mysql默认的字符编码方式是：utf8</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_student` (</span><br><span class="line">    `<span class="keyword">no</span>` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `cno` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`<span class="keyword">no</span>`),</span><br><span class="line">    KEY `cno` (`cno`),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> `t_student_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`cno`) <span class="keyword">REFERENCES</span> `t_class` (`classno`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">11</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"><span class="comment">-- ENGINE来指定存储引擎。CHARSET来指定这张表的字符编码方式。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_product(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)engine<span class="operator">=</span>InnoDB <span class="keyword">default</span> charset<span class="operator">=</span>gbk;</span><br></pre></td></tr></table></figure>
<h2 id="mysql支持的存储引擎"><a class="markdownIt-Anchor" href="#mysql支持的存储引擎"></a> mysql支持的存储引擎</h2>
<p>mysql支持九大存储引擎，当前5.5.36支持8个。版本不同支持情况不同。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show engines</span><br><span class="line"></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">      Engine: FEDERATED</span><br><span class="line">     Support: NO</span><br><span class="line">     Comment: Federated MySQL storage engine</span><br><span class="line">Transactions: NULL</span><br><span class="line">          XA: NULL</span><br><span class="line">  Savepoints: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">      Engine: MRG_MYISAM</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Collection of identical MyISAM tables</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">      Engine: MyISAM</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: MyISAM storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 4. row ***************************</span><br><span class="line">      Engine: BLACKHOLE</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: /dev/null storage engine (anything you write to it disappears</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 5. row ***************************</span><br><span class="line">      Engine: CSV</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: CSV storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 6. row ***************************</span><br><span class="line">      Engine: MEMORY</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 7. row ***************************</span><br><span class="line">      Engine: ARCHIVE</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Archive storage engine</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br><span class="line">*************************** 8. row ***************************</span><br><span class="line">      Engine: InnoDB</span><br><span class="line">     Support: DEFAULT</span><br><span class="line">     Comment: Supports transactions, row-level locking, and foreign keys</span><br><span class="line">Transactions: YES</span><br><span class="line">          XA: YES</span><br><span class="line">  Savepoints: YES</span><br><span class="line">*************************** 9. row ***************************</span><br><span class="line">      Engine: PERFORMANCE_SCHEMA</span><br><span class="line">     Support: YES</span><br><span class="line">     Comment: Performance Schema</span><br><span class="line">Transactions: NO</span><br><span class="line">          XA: NO</span><br><span class="line">  Savepoints: NO</span><br></pre></td></tr></table></figure>
<h2 id="常见的存储引擎"><a class="markdownIt-Anchor" href="#常见的存储引擎"></a> 常见的存储引擎</h2>
<h3 id="myisam存储引擎"><a class="markdownIt-Anchor" href="#myisam存储引擎"></a> MyISAM存储引擎</h3>
<p>它管理的表具有以下特征：</p>
<ul>
<li>使用三个文件表示每个表：
<ul>
<li>格式文件 — 存储表结构的定义（<code>mytable.frm</code>）</li>
<li>数据文件 — 存储表行的内容（<code>mytable.MYD</code>）</li>
<li>索引文件 — 存储表上索引（<code>mytable.MYI</code>）：索引是一本书的目录，缩小扫描范围，提高查询效率的一种机制</li>
</ul>
</li>
<li>可被转换为压缩、只读表来节省空间</li>
</ul>
<p>提示一下：</p>
<ul>
<li>对于一张表来说，只要是主键，</li>
<li>或者加有unique约束的字段上会自动创建索引。</li>
</ul>
<p>MyISAM<strong>存储引擎特点</strong>：</p>
<ul>
<li>可被转换为压缩、只读表来节省空间</li>
<li>这是这种存储引擎的优势！！！！</li>
<li>MyISAM不支持事务机制，安全性低。</li>
</ul>
<h3 id="innodb存储引擎"><a class="markdownIt-Anchor" href="#innodb存储引擎"></a> InnoDB存储引擎</h3>
<blockquote>
<p>这是mysql默认的存储引擎，同时也是一个重量级的存储引擎。</p>
<p>InnoDB支持事务，支持数据库崩溃后自动恢复机制。</p>
<p>InnoDB存储引擎最主要的特点是：非常安全。</p>
</blockquote>
<p>它管理的表具有下列主要特征：</p>
<ul>
<li>每个 InnoDB 表在数据库目录中以<code>.frm</code> 格式文件表示</li>
<li>InnoDB 表空间 tablespace 被用于存储表的内容（表空间是一个逻辑名称。表空间存储数据+索引。）</li>
<li>提供一组用来记录事务性活动的日志文件</li>
<li>用 COMMIT(提交)、SAVEPOINT 及ROLLBACK(回滚)支持事务处理</li>
<li>提供全 ACID 兼容</li>
<li>在 MySQL 服务器崩溃后提供自动恢复</li>
<li>多版本（MVCC）和行级锁定</li>
<li>支持外键及引用的完整性，包括级联删除和更新</li>
</ul>
<p>InnoDB最大的特点就是<strong>支持事务</strong>：以保证数据的安全。效率不是很高，并且也不能压缩，不能转换为只读，不能很好的节省存储空间。</p>
<h3 id="memory存储引擎"><a class="markdownIt-Anchor" href="#memory存储引擎"></a> MEMORY存储引擎</h3>
<blockquote>
<p>使用 MEMORY 存储引擎的表，其数据存储在内存中，且行的长度固定，这两个特点使得 MEMORY 存储引擎非常快。</p>
</blockquote>
<p>MEMORY 存储引擎管理的表具有下列特征：</p>
<ul>
<li>在数据库目录内，每个表均以.frm 格式的文件表示。</li>
<li>表数据及索引被存储在内存中。（目的就是快，查询快！）</li>
<li>表级锁机制。</li>
<li>不能包含 TEXT 或 BLOB 字段。</li>
</ul>
<p>EMORY 存储引擎以前被称为HEAP 引擎。</p>
<p>MEMORY引擎优点：查询效率是最高的。不需要和硬盘交互。<br />
MEMORY引擎缺点：不安全，关机之后数据消失。因为数据和索引都是在内存当中。</p>
<h1 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务⭐⭐⭐⭐⭐</h1>
<blockquote>
<p>一个事务就是一个完整的业务逻辑。是一个最小的工作单元。不可再分。</p>
<p>事务：就是批量的DML语句同时成功，或者同时失败！</p>
</blockquote>
<h2 id="和事务有关的dml语句"><a class="markdownIt-Anchor" href="#和事务有关的dml语句"></a> 和事务有关的DML语句</h2>
<p>只有DML语句才会有事务这一说，其它语句和事务无关！！！</p>
<p><code>insert</code>、<code>delete</code>、<code>update</code>只有这三个语句和事务有关系，其它都没有关系。数据安全第一位！！！</p>
<p><strong>事务的本质</strong>：一个事务其实就是多条DML语句同时成功，或者同时失败！</p>
<h2 id="事务的实现"><a class="markdownIt-Anchor" href="#事务的实现"></a> 事务的实现</h2>
<p>InnoDB存储引擎：提供一组用来记录事务性活动的日志文件。</p>
<p>在事务的执行过程中，每一条DML的操作都会记录到“事务性活动的日志文件”中。</p>
<p>在事务的执行过程中，我们可以提交事务，也可以回滚事务。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">事务开启了：</span><br><span class="line">insert</span><br><span class="line">insert</span><br><span class="line">insert</span><br><span class="line">delete</span><br><span class="line">update</span><br><span class="line">update</span><br><span class="line">update</span><br><span class="line">事务结束了！</span><br></pre></td></tr></table></figure>
<p><strong>提交事务</strong></p>
<ul>
<li><strong>清空事务性活动的日志文件</strong>，将数据全部彻底持久化到数据库表中。</li>
<li>提交事务标志着，事务的结束。并且是一种<strong>全部成功的结束。</strong></li>
</ul>
<p><strong>回滚事务</strong></p>
<ul>
<li>将之前所有的DML操作全部撤销，并且<strong>清空事务性活动的日志文件</strong></li>
<li>回滚事务标志着，事务的结束。并且是一种<strong>全部失败的结束</strong> 。</li>
</ul>
<h2 id="提交回滚事务transaction"><a class="markdownIt-Anchor" href="#提交回滚事务transaction"></a> 提交/回滚事务(transaction)</h2>
<ul>
<li>提交事务：<code>commit;</code>语句</li>
<li>回滚事务：<code>rollback;</code>语句（回滚永远都是只能回滚到上一次的提交点！）</li>
</ul>
<p>mysql默认情况下是支持自动提交事务的。（自动提交）</p>
<ul>
<li>这种自动提交实际上是不符合我们的开发习惯，因为一个业务通常是需要多条DML语句共同执行才能完成的，为了保证数据的安全，必须要求同时成功之后再提交，所以不能执行一条就提交一条。</li>
</ul>
<p>每执行一条DML语句，则提交一次。</p>
<p>关闭mysql的自动提交机制：<code>start transaction;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">start</span> transaction; <span class="comment">-- 关闭自动提交</span></span><br><span class="line">DML;</span><br><span class="line">DML;</span><br><span class="line">DML;</span><br><span class="line">DML;</span><br><span class="line"><span class="keyword">commit</span>;  <span class="comment">-- 提交事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">start</span> transaction; <span class="comment">-- 关闭自动提交</span></span><br><span class="line">DML;</span><br><span class="line">DML;</span><br><span class="line">DML;</span><br><span class="line">DML;</span><br><span class="line"><span class="keyword">rollback</span>;  <span class="comment">-- 回滚事务，回滚到上一次提交的节点。</span></span><br></pre></td></tr></table></figure>
<h2 id="事务的特性"><a class="markdownIt-Anchor" href="#事务的特性"></a> 事务的特性</h2>
<ul>
<li><strong>A 原子性</strong>：说明事务是最小的工作单元。不可再分。</li>
<li><strong>C 一致性</strong>：所有事务要求，在同一个事务当中，所有操作必须同时成功，或者同时失败，以保证数据的一致性。</li>
<li><strong>I 隔离性</strong>：A事务和B事务之间具有一定的隔离。多个事务同时操作一张表的结果？</li>
<li><strong>D 持久性</strong>：事务最终结束的一个保障。事务提交，就相当于将没有保存到硬盘上的数据保存到硬盘上！</li>
</ul>
<h2 id="事务的隔离性"><a class="markdownIt-Anchor" href="#事务的隔离性"></a> 事务的隔离性</h2>
<p>例如：A教室和B教室中间有一道墙，这道墙可以很厚，也可以很薄。这就是事务的隔离级别。这道墙越厚，表示隔离级别就越高。</p>
<h3 id="事务的4个隔离级别"><a class="markdownIt-Anchor" href="#事务的4个隔离级别"></a> 事务的4个隔离级别⭐</h3>
<p>查看隔离级别：<code>SELECT @@tx_isolation</code>，mysql默认的隔离级别：<code>repeatable read</code></p>
<p>设置全局的隔离级别：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 设置全局的隔离级别为read uncommitted</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read uncommitted;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看隔离级别</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@tx</span>_isolation</span><br></pre></td></tr></table></figure>
<h4 id="读未提交"><a class="markdownIt-Anchor" href="#读未提交"></a> <strong>读未提交</strong></h4>
<blockquote>
<p><code>read uncommitted</code>（最低的隔离级别）没有提交就读到了</p>
<p>事务A可以读取到事务B未提交（没有<code>commit</code>）的数据。</p>
</blockquote>
<p><strong>存在问题</strong>：脏读现象！！！ Dirty Read</p>
<p>这种隔离级别一般都是理论上的，大多数的数据库隔离级别都是二档起步！</p>
<h4 id="读已提交"><a class="markdownIt-Anchor" href="#读已提交"></a> 读已提交</h4>
<blockquote>
<p><code>read committed</code>。提交之后才能读到</p>
<p>事务A只能读取到事务B提交之后的数据。解决了脏读的现象。</p>
</blockquote>
<p><strong>存在的问题</strong>：不可重复读取数据</p>
<ul>
<li>在事务开启之后，第一次读到的数据是3条，当前事务还没有结束，可能第二次再读取的时候，读到的数据是4条，3不等于4称为不可重复读取。</li>
</ul>
<p>这种隔离级别是比较真实的数据，每一次读到的数据是绝对的真实。</p>
<p>oracle数据库默认的隔离级别是：read committed</p>
<h4 id="可重复读"><a class="markdownIt-Anchor" href="#可重复读"></a> 可重复读</h4>
<blockquote>
<p><code>repeatable read</code>。提交之后也读不到，永远读取的都是刚开启事务时的数据</p>
<p>事务A开启之后，不管是多久，每一次在事务A中读取到的数据都是一致的。即使事务B将数据已经修改，并且提交了，事务A读取到的数据还是没有发生改变，这就是可重复读。</p>
<p>MySQL中默认的隔离级别</p>
</blockquote>
<p>解决了不可重复读取数据。</p>
<p><strong>存在问题</strong>：可以会出现幻影读。每一次读取到的数据都是幻象。不够真实！</p>
<h4 id="序列化串行化"><a class="markdownIt-Anchor" href="#序列化串行化"></a> 序列化/串行化</h4>
<blockquote>
<p><code>serializable</code>（最高的隔离级别）</p>
<p>这是最高隔离级别，效率最低。解决了所有的问题。</p>
</blockquote>
<p>这种隔离级别表示事务排队，不能并发！两个事务不能同时访问同一张表。</p>
<p><code>synchronized</code>，线程同步（事务同步）每一次读取到的数据都是最真实的，并且效率是最低的。</p>
<h1 id="索引-index"><a class="markdownIt-Anchor" href="#索引-index"></a> 索引 (index)</h1>
<blockquote>
<p>索引是在数据库表的字段上添加的，是为了提高查询效率存在的一种机制。</p>
<p>一张表的一个字段可以添加一个索引，当然，多个字段联合起来也可以添加索引。</p>
<p>索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。</p>
</blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">对于一本字典来说，查找某个汉字有两种方式：</span><br><span class="line">	第一种方式：一页一页挨着找，直到找到为止，这种查找方式属于全字典扫描。效率比较低。</span><br><span class="line">	第二种方式：先通过目录（索引）去定位一个大概的位置，然后直接定位到这个位置，做局域性扫描，缩小扫描的范围，快速的查找。这种查找方式属于通过索引检索，效率较高。</span><br></pre></td></tr></table></figure>
<p>MySQL在查询方面主要就是两种方式：</p>
<ul>
<li>第一种方式：全表扫描</li>
<li>第二种方式：根据索引检索。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;jack&#x27;</span>;</span><br><span class="line"><span class="comment">-- 若name字段上没有添加索引，则会进行全扫描</span></span><br></pre></td></tr></table></figure>
<p>在mysql数据库当中索引是需要排序的，并且这个所以的排序和<code>TreeSet</code>数据结构相同。<code>TreeSet（TreeMap）</code>底层是一个自平衡的二叉树！<strong>在mysql当中索引是一个<code>B-Tree</code>数据结构</strong>。</p>
<p>遵循左小又大原则存放，采用中序遍历方式遍历取数据。</p>
<h2 id="实现原理"><a class="markdownIt-Anchor" href="#实现原理"></a> 实现原理</h2>
<blockquote>
<p>缩小扫描范围，避免全表扫描</p>
</blockquote>
<p><strong>注意</strong></p>
<ul>
<li>在任何数据库当中主键上都会自动添加索引对象。另外在mysql当中，一个字段上如果有<code>unique</code>约束的话，也会自动创建索引对象。</li>
<li>在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有一个硬盘的物理存储编号。</li>
<li>在mysql当中，索引是一个单独的对象，不同的存储引擎以不同的形式存在。不管索引存储在哪里，索引在mysql当中都是一个树的形式存在。（自平衡二叉树：B-Tree）
<ul>
<li>在MyISAM存储引擎中，索引存储在一个.MYI文件中。</li>
<li>在InnoDB存储引擎中索引存储在一个逻辑名称叫做tablespace的当中。</li>
<li>在MEMORY存储引擎当中索引被存储在内存当中。</li>
</ul>
</li>
</ul>
<h2 id="添加索引的原则"><a class="markdownIt-Anchor" href="#添加索引的原则"></a> 添加索引的原则</h2>
<p>在mysql当中，主键上，以及unique字段上都会自动添加索引的！！！！</p>
<ul>
<li>数据量庞大</li>
<li>该字段经常出现在where的后面，以条件的形式存在，也就是说这个字段总是被扫描。</li>
<li>该字段很少的DML(insert delete update)操作。（因为DML之后，索引需要重新排序。）</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li>建议不要随意添加索引，因为索引也是需要维护的，太多的话反而会降低系统的性能。</li>
<li>建议通过主键查询，建议通过unique约束的字段进行查询，效率是比较高的。</li>
</ul>
<h2 id="索引的创删"><a class="markdownIt-Anchor" href="#索引的创删"></a> 索引的创删</h2>
<p><strong>创建索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给student表中的sname字段添加索引，并起名：stu_sname_index</span></span><br><span class="line"><span class="keyword">create</span> index stu_sname_index <span class="keyword">on</span> student(sname);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">create</span> index 索引名 <span class="keyword">on</span> 表(字段);</span><br></pre></td></tr></table></figure>
<p><strong>删除索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index stu_sname_index <span class="keyword">on</span> student;</span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">drop</span> index 索引名 <span class="keyword">on</span> 表;</span><br></pre></td></tr></table></figure>
<p>查看一个Sql语句是否使用了索引检索</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span>;</span><br><span class="line"><span class="comment">-- 结果中type=ALL 则为 全表扫描</span></span><br></pre></td></tr></table></figure>
<h2 id="索引失效"><a class="markdownIt-Anchor" href="#索引失效"></a> 索引失效</h2>
<ul>
<li>情况1</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%T&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>sname上即使添加了索引，也不会走索引。</p>
<p>原因是：因为模糊匹配当中以“%”开头了！尽量避免模糊查询的时候以“%”开始。这是一种优化的手段/策略。</p>
<ul>
<li>情况2</li>
</ul>
<p>使用or的时候会失效，如果使用or那么要求or两边的条件字段都要有索引，才会走索引，如果其中一边有一个字段没有索引，那么另一个字段上的索引也会实现。所以这就是为什么不建议使用or的原因。</p>
<ul>
<li>情况3</li>
</ul>
<p>使用复合索引的时候，没有使用左侧的列查找，索引失效</p>
<p><strong>符合索引</strong>：两个字段，或者更多的字段联合起来添加一个索引，叫做复合索引。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index emp_job_sal_index <span class="keyword">on</span> emp(job,sal); <span class="comment">-- 创建复合索引</span></span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>; <span class="comment">-- 可以使用索引</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">=</span> <span class="number">800</span>; <span class="comment">-- 不能使用索引</span></span><br></pre></td></tr></table></figure>
<ul>
<li>情况4</li>
</ul>
<p>在where当中索引列参加了运算，索引失效。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index emp_sal_index <span class="keyword">on</span> emp(sal); <span class="comment">-- 创建索引</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">=</span> <span class="number">800</span>; <span class="comment">-- 可以</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal<span class="operator">+</span><span class="number">1</span> <span class="operator">=</span> <span class="number">800</span>; <span class="comment">-- 不可以</span></span><br></pre></td></tr></table></figure>
<ul>
<li>情况5</li>
</ul>
<p>在where当中索引列使用了函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="built_in">lower</span>(ename) <span class="operator">=</span> <span class="string">&#x27;smith&#x27;</span>; <span class="comment">-- 不行</span></span><br></pre></td></tr></table></figure>
<h2 id="索引的分类"><a class="markdownIt-Anchor" href="#索引的分类"></a> 索引的分类</h2>
<blockquote>
<p>索引是各种数据库进行优化的重要手段。优化的时候优先考虑的因素就是索引。</p>
</blockquote>
<ul>
<li>单一索引：一个字段上添加索引</li>
<li>复合索引：两个字段或者更多的字段上添加索引。</li>
<li>主键索引：主键上添加索引。</li>
<li>唯一性索引：具有<code>unique</code>约束的字段上添加索引。</li>
</ul>
<p><strong>注意</strong>：唯一性比较弱的字段上添加索引用处不大。</p>
<h1 id="视图"><a class="markdownIt-Anchor" href="#视图"></a> 视图</h1>
<blockquote>
<p>view:站在不同的角度去看待同一份数据。</p>
</blockquote>
<h2 id="创建视图对象"><a class="markdownIt-Anchor" href="#创建视图对象"></a> 创建视图对象</h2>
<p>只有DQL语句才能以<code>view</code>的形式创建。<code>create view view_name as</code> 这里的语句必须是DQL语句;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept2 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept; <span class="comment">-- 表复制</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2; <span class="comment">-- 查看表中数据</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> dept2_view <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2; <span class="comment">-- 创建视图对象</span></span><br></pre></td></tr></table></figure>
<h2 id="删除视图对象"><a class="markdownIt-Anchor" href="#删除视图对象"></a> 删除视图对象</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> dept2_view; <span class="comment">-- 删除视图对象</span></span><br></pre></td></tr></table></figure>
<h2 id="视图的作用"><a class="markdownIt-Anchor" href="#视图的作用"></a> 视图的作用</h2>
<p>我们可以面向视图对象进行增删改查，对视图对象的增删改查，会导致原表被操作！</p>
<p><strong>视图的特点</strong>：通过对视图的操作，会影响到原表数据。</p>
<p><strong>作用</strong>：方便，简化开发，利于维护。</p>
<p>视图对象也是存储在硬盘中的，不会消失。</p>
<h1 id="dba常用命令"><a class="markdownIt-Anchor" href="#dba常用命令"></a> DBA常用命令</h1>
<p>需要重点掌握：数据的导入和导出（数据的备份）</p>
<p><strong>数据导出</strong>：</p>
<p>注意：在windows的dos命令窗口中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump bjpowernode&gt;D:\bjpowernode.sql -uroot -p123456  <span class="comment"># 导出数据库</span></span><br><span class="line">mysqldump bjpowernode emp&gt;D:\bjpowernode.sql -uroot -p123456  <span class="comment"># 导出指定的表</span></span><br></pre></td></tr></table></figure>
<p><strong>数据导入</strong></p>
<p>注意：需要先登录到mysql数据库服务器上。然后创建数据库：<code>create database bjpowernode;</code>使用数据库：<code>use bjpowernode</code>然后初始化数据库：<code>source D:\bjpowernode.sql</code></p>
<h1 id="数据库设计三范式"><a class="markdownIt-Anchor" href="#数据库设计三范式"></a> 数据库设计三范式⭐⭐</h1>
<blockquote>
<p>数据库表的设计依据。教你怎么进行数据库表的设计。</p>
</blockquote>
<p><strong>分类</strong></p>
<ul>
<li>第一范式：要求任何一张表必须有主键，每一个字段原子性不可再分。</li>
<li>第二范式：建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，不要产生部分依赖。</li>
<li>第三范式：建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，不要产生传递依赖。</li>
</ul>
<p>设计数据库表的时候，按照以上的范式进行，可以避免表中数据的冗余，空间的浪费。</p>
<h2 id="第一范式"><a class="markdownIt-Anchor" href="#第一范式"></a> 第一范式</h2>
<blockquote>
<p>最核心，最重要的范式，所有表的设计都需要满足。</p>
</blockquote>
<p><strong>必须有主键</strong>，并且每一个字段都是原子性不可再分。</p>
<h2 id="第二范式"><a class="markdownIt-Anchor" href="#第二范式"></a> 第二范式</h2>
<blockquote>
<p>建立在第一范式的基础之上，要求所有非主键字段必须完全依赖主键，不要产生部分依赖。</p>
</blockquote>
<p>可以利用外键<code>foreign key</code>消除部份依赖。</p>
<p><strong>多对多怎么设计？</strong></p>
<ul>
<li>多对多，三张表，关系表两个外键！！！！！！！！！！！！！！！</li>
</ul>
<p>例如：学生表、教师表、学生教师关系表。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">学生表</span><br><span class="line">   学生编号(pk)		学生名字</span><br><span class="line">   ------------------------------------</span><br><span class="line">   1001					张三</span><br><span class="line">   1002					李四</span><br><span class="line">   1003					王五</span><br><span class="line">  </span><br><span class="line">教师表</span><br><span class="line">教师编号(pk)		教师姓名</span><br><span class="line">--------------------------------------</span><br><span class="line">001					王老师</span><br><span class="line">002					赵老师</span><br><span class="line"></span><br><span class="line">学生教师关系表</span><br><span class="line">id(pk)			学生编号(fk)			教师编号(fk)</span><br><span class="line">------------------------------------------------------</span><br><span class="line">1						1001						001</span><br><span class="line">2						1002						002</span><br><span class="line">3						1003						001</span><br><span class="line">4						1001						002</span><br></pre></td></tr></table></figure>
<h2 id="第三范式"><a class="markdownIt-Anchor" href="#第三范式"></a> 第三范式</h2>
<blockquote>
<p>三范式建立在第二范式的基础之上，要求所有非主键字典必须直接依赖主键，不要产生传递依赖。</p>
</blockquote>
<p><strong>怎么设计一对多？</strong></p>
<ul>
<li>一对<em>多</em>，两张表，<em>多</em>的表加外键！！！！！！！！！！！！</li>
</ul>
<p>例如：学生表、班级表</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">班级表：一</span><br><span class="line">班级编号(pk)				班级名称</span><br><span class="line">----------------------------------------</span><br><span class="line">01						   一年一班</span><br><span class="line">02						   一年二班</span><br><span class="line">03						   一年三班</span><br><span class="line"></span><br><span class="line">学生表：多</span><br><span class="line">学生编号（PK）       学生姓名      班级编号(fk)</span><br><span class="line">-------------------------------------------</span><br><span class="line">1001				张三			01			</span><br><span class="line">1002				李四			02			</span><br><span class="line">1003				王五			03			</span><br><span class="line">1004				赵六			03</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2>
<ul>
<li>
<p>一对多</p>
<p>一对多，两张表，多的表加外键！！！！！！！！！！！！</p>
</li>
<li>
<p>多对多</p>
<p>多对多，三张表，关系表两个外键！！！！！！！！！！！！！！！</p>
</li>
<li>
<p>一对一</p>
<p>在实际的开发中，可能存在一张表字段太多，太庞大。这个时候要拆分表。</p>
<p>一对一，外键唯一！！！！！！！！！！！！！</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">没有拆分表之前：一张表</span><br><span class="line">t<span class="built_in">_</span>user</span><br><span class="line">id		login<span class="built_in">_</span>name		login<span class="built_in">_</span>pwd		real<span class="built_in">_</span>name		email				address........</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">1			zhangsan		123				张三				zhangsan@xxx</span><br><span class="line">2			lisi			123				李四				lisi@xxx</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">这种庞大的表建议拆分为两张：</span><br><span class="line">t<span class="built_in">_</span>login 登录信息表</span><br><span class="line">id(pk)		login<span class="built_in">_</span>name		login<span class="built_in">_</span>pwd	</span><br><span class="line">---------------------------------</span><br><span class="line">1				zhangsan		123			</span><br><span class="line">2				lisi			123			</span><br><span class="line"></span><br><span class="line">t<span class="built_in">_</span>user 用户详细信息表</span><br><span class="line">id(pk)		real<span class="built_in">_</span>name		email				address........	 login<span class="built_in">_</span>id(fk+unique)</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">100			张三				zhangsan@xxx								1</span><br><span class="line">200			李四				lisi@xxx	</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>实际经验</strong></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">数据库设计三范式是理论上的。</span><br><span class="line">实践和理论有的时候有偏差。</span><br><span class="line"></span><br><span class="line">最终的目的都是为了满足客户的需求，有的时候会拿冗余换执行速度。</span><br><span class="line"></span><br><span class="line">因为在sql当中，表和表之间连接次数越多，效率越低。（笛卡尔积）</span><br><span class="line"></span><br><span class="line">有的时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的，</span><br><span class="line">并且对于开发人员来说，sql语句的编写难度也会降低。</span><br><span class="line"></span><br><span class="line">面试的时候把这句话说上：他就不会认为你是初级程序员了！</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段3</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 企业开发基础 Spring5-AOP</title>
    <url>/2022/09/27/JAVA/07Spring5_AOP/</url>
    <content><![CDATA[<h2 id="aop概述"><a class="markdownIt-Anchor" href="#aop概述"></a> AOP概述</h2>
<blockquote>
<p>面向切面（方面）编程，不修改源代码进行功能增强。</p>
<p>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<strong>耦合度降低</strong>，<strong>提高程序的可重用性</strong>，同时<strong>提高了开发的效率</strong>。</p>
<p>通俗描述：不通过修改源代码方式，在主干功能里面添加新功能</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200702135106266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ5NjE5MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>
<h2 id="aop底层原理"><a class="markdownIt-Anchor" href="#aop底层原理"></a> AOP底层原理</h2>
<p>底层是通过动态代理的方式实现的。</p>
<p><strong>动态代理的两种情况</strong></p>
<ul>
<li>
<p><strong>有接口情况</strong>：使用 JDK 动态代理。</p>
<p>创建接口实现类的代理对象，增强类的方法。</p>
<p><img src="https://img-blog.csdnimg.cn/20200702135134128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ5NjE5MA==,size_16,color_FFFFFF,t_70" alt="有接口情况" /></p>
</li>
<li>
<p><strong>没有接口情况</strong>：使用 CGLIB 动态代理</p>
<p>创建当前类的子类的代理对象，增强类的方法。</p>
<p><img src="https://img-blog.csdnimg.cn/2020070213514980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTQ5NjE5MA==,size_16,color_FFFFFF,t_70" alt="没有接口情况" /></p>
</li>
</ul>
<h3 id="jdk-动态代理"><a class="markdownIt-Anchor" href="#jdk-动态代理"></a> JDK 动态代理</h3>
<p>使用 JDK 动态代理，使用 <code>Proxy</code> 类里面的方法创建代理对象。调用 <code>newProxyInstance</code> 方法，方法有三个参数：</p>
<ul>
<li><code>ClassLoader</code> 类加载器</li>
<li><code>interfaces</code> 增强方法所在的类，这个类实现的接口，支持多个接口</li>
<li><code>InvocationHandler</code> 实现这个接口 <code>InvocationHandler</code>，创建代理对象，写增强的部分</li>
</ul>
<p>实例代码</p>
<p>创建接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建接口实现类，实现方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法执行 ....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;update方法执行 ....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 Proxy 类创建接口代理对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建接口实现类的代理对象</span></span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(userDao));</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> dao.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="comment">// 下面这样也可以</span></span><br><span class="line">        <span class="comment">/*Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理对象代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 1.把创建的是谁的代理对象，把谁传递过来。</span></span><br><span class="line">    <span class="comment">// 通过有参构造传递</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法执行之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行之前执行....&quot;</span> + method.getName() + <span class="string">&quot;:&quot;</span> + Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增强的方法执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法执行之后执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行...&quot;</span> + obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="/img/Java/07Spring5_AOP/image-20220927144305893.png" alt="image-20220927144305893" /></p>
<h2 id="aop-相关术语"><a class="markdownIt-Anchor" href="#aop-相关术语"></a> AOP 相关术语</h2>
<ul>
<li><strong>连接点</strong>：类里面哪些方法可以被增强，这些方法称为连接点</li>
<li><strong>切入点</strong>：实际被真正增强的方法称为切入点</li>
<li><strong>通知</strong>（增强）：实际增强的逻辑部分称为通知，且分为以下五种类型：
<ul>
<li>1）前置通知 2）后置通知 3）环绕通知 4）异常通知 5）最终通知</li>
</ul>
</li>
<li><strong>切面</strong>：把通知应用到切入点过程</li>
</ul>
<h2 id="aop-操作"><a class="markdownIt-Anchor" href="#aop-操作"></a> AOP 操作</h2>
<blockquote>
<p>Spring 框架一般都是基于 <strong>AspectJ</strong> 实现 AOP 操作，AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使用，进行 AOP 操作</p>
</blockquote>
<p>基于 AspectJ 实现 AOP 操作：</p>
<ul>
<li>基于 xml 配置文件实现</li>
<li>基于注解方式实现（最常使用）</li>
</ul>
<p><strong>步骤</strong></p>
<ul>
<li>引入相关依赖 <code>spring-aspects-5.3.23.jar</code> <code>com.springsource.net.sf.cglib-2.2.0.jar</code> <code>com.springsource.org.aopalliance-1.0.0.jar</code> <code>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</code></li>
</ul>
<h3 id="切入点表达式"><a class="markdownIt-Anchor" href="#切入点表达式"></a> 切入点表达式</h3>
<p><strong>作用</strong>：知道对哪个类里面的哪个方法进行增强</p>
<p><strong>语法结构</strong>： <code>execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]))</code></p>
<p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 com.atguigu.dao.BookDao 类里面的 add 进行增强</span></span><br><span class="line">execution(* com.atguigu.dao.BookDao.add(..))</span><br><span class="line"><span class="comment">// 对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强</span></span><br><span class="line">execution(* com.atguigu.dao.BookDao.*(..))</span><br><span class="line"><span class="comment">// 对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强</span></span><br><span class="line">execution(* com.atguigu.dao.*.*(..))</span><br></pre></td></tr></table></figure>
<h3 id="aspectj-注解"><a class="markdownIt-Anchor" href="#aspectj-注解"></a> AspectJ 注解</h3>
<ol>
<li>
<p>创建类，在类里面定义方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.aopanno;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 被增强的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建增强类(编写增强的逻辑)。在增强类里面创建方法，让不同的方法代表不同的通知类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.aopanno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 增强的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>进行通知的配置</p>
<ol>
<li>
<p>在Spring的配置文件中，开启注解扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xzt.aopanno&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用注解创建 <code>User</code> 和 <code>UserProxy</code> 对象，在每个类上添加注解<code>@Component</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在增强类上添加注解<code>@Aspect</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 spring 配置文件中开启生成代理对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启AspectJ 生成代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li>
<p>配置不同类型的通知。在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.aopanno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 增强的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="comment">// @Before注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.xzt.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.xzt.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.xzt.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.xzt.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.xzt.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前.....&quot;</span>);</span><br><span class="line">        <span class="comment">// 被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">    user.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/07Spring5_AOP/image-20220927152920890.png" alt="image-20220927152920890" /></p>
</li>
</ol>
<h4 id="公共切入点抽取"><a class="markdownIt-Anchor" href="#公共切入点抽取"></a> 公共切入点抽取</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.aopanno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 增强的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">// 生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相同切入点抽取</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* com.xzt.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointdemo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="comment">// @Before注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;pointdemo()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前.....&quot;</span>);</span><br><span class="line">        <span class="comment">// 被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="设置增强类的优先级"><a class="markdownIt-Anchor" href="#设置增强类的优先级"></a> 设置增强类的优先级</h4>
<p>多个增强类 对同一个方法 进行增强，可以设置优先级:</p>
<ul>
<li>在增强类的上面添加注解<code>@Order(值)</code>，值越小优先级越高</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.aopanno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(3)</span>  <span class="comment">// 设置有优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonProxy</span> &#123;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="comment">// @Before注解表示作为前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.xzt.aopanno.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person before.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="aspectj-配置文件"><a class="markdownIt-Anchor" href="#aspectj-配置文件"></a> AspectJ 配置文件💤</h3>
<ol>
<li>
<p>创建两个类 增强类 和 被增强类，创建方法</p>
</li>
<li>
<p>在 spring 配置文件中创建两个类对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.aopanno.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.aopanno.UserProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 spring 配置文件中配置切入点。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置aop增强 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xzt.aopanno.User.add(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;userProxy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 增强作用在具体的方法上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="纯注解开发"><a class="markdownIt-Anchor" href="#纯注解开发"></a> 纯注解开发⭐⭐⭐</h3>
<p>需要编写配置文件(<code>ConfigAPP.java</code>)代替<code>xml</code>配置文件，上面写上三个注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>  <span class="comment">// 配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.xzt&quot;&#125;)</span>  <span class="comment">// IOC组件扫描</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span> <span class="comment">// 生成AspectJ代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigApp</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段3</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 企业开发基础 JavaWeb</title>
    <url>/2022/09/25/JAVA/05JavaWeb/</url>
    <content><![CDATA[<p>因为HTML和CSS相对比较熟练，所以直接跳过开始学习JavaScript</p>
<h1 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h1>
<h2 id="javascript介绍"><a class="markdownIt-Anchor" href="#javascript介绍"></a> JavaScript介绍</h2>
<blockquote>
<p>JS是弱类型，Java是强类型</p>
</blockquote>
<p><strong>特点</strong></p>
<ul>
<li>交互性（它可以做的就是信息的动态交互）</li>
<li>安全性（不允许直接访问本地硬盘）</li>
<li>跨平台性（只要是可以解释 JS 的浏览器都可以执行，和平台无关）</li>
</ul>
<h2 id="js和html代码的结合方式"><a class="markdownIt-Anchor" href="#js和html代码的结合方式"></a> JS和html代码的结合方式</h2>
<h3 id="第一种方式"><a class="markdownIt-Anchor" href="#第一种方式"></a> 第一种方式</h3>
<p>只需要在<code>head</code>标签中，或者在<code>body</code>标签中，使用<code>script</code>标签来书写JS代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert是JS语言提供的一个警告函数，可以接收任何参数</span></span></span><br><span class="line"><span class="language-javascript">        	<span class="title function_">alert</span>(<span class="string">&quot;Hello Word!!&quot;</span>);  </span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="第二种方式"><a class="markdownIt-Anchor" href="#第二种方式"></a> 第二种方式</h3>
<p>使用<code>script</code>标签中的<code>src</code>属性引入单独的<code>JavaScript</code>代码文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;Hello World!!!&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用script标签引入外部js文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;a.js&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一个<code>script</code>标签可以用来定义js代码，也可以用来引入js文件，两个功能二选一使用。不能同时使用。但是可以写多个<code>script</code>代码。</p>
<h2 id="js变量"><a class="markdownIt-Anchor" href="#js变量"></a> JS变量</h2>
<h3 id="js的变量类型"><a class="markdownIt-Anchor" href="#js的变量类型"></a> JS的变量类型</h3>
<ul>
<li>数值类型：<code>number</code>，包含了Java的多有数值有关的类型</li>
<li>字符串类型：<code>string</code></li>
<li>对象类型：<code>Object</code></li>
<li>布尔类型：<code>boolean</code></li>
<li>函数类型：<code>function</code></li>
</ul>
<p>JS里特殊的值</p>
<ul>
<li><code>undefined</code> 未定义，所有js变量未赋予初始值的时候，默认值都是<code>undefined</code></li>
<li><code>null</code> 空值</li>
<li><code>NaN</code> 全称是：Not a Number。非数字，非数值。数值类型*字符串类型就会出现</li>
</ul>
<p>JS中定义变量的格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名;</span><br><span class="line"><span class="keyword">var</span> 变量名 = 值;</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// alert(i); // undefined</span></span></span><br><span class="line"><span class="language-javascript">        i = <span class="number">12</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// typeof()是JavaScript语言提供的一个函数。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>( <span class="title function_">typeof</span>(i) ); <span class="comment">// number</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        i = <span class="string">&quot;abc&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 它可以取变量的数据类型返回</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>( <span class="title function_">typeof</span>(i) ); <span class="comment">// String</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a = <span class="number">12</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> b = <span class="string">&quot;abc&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>( a * b ); <span class="comment">// NaN是非数字，非数值。</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="关系比较运算"><a class="markdownIt-Anchor" href="#关系比较运算"></a> 关系（比较）运算</h3>
<ul>
<li>等于：<code>==</code> 等于是简单的做字面值比较</li>
<li>全等于：<code>===</code> 除了做字面的比较之外，还会比较两个变量的数据类型。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;12&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( a == b ); <span class="comment">// true</span></span><br><span class="line"><span class="title function_">alert</span>( a === b ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h3 id="逻辑运算"><a class="markdownIt-Anchor" href="#逻辑运算"></a> 逻辑运算</h3>
<ul>
<li>且运算：<code>&amp;&amp;</code></li>
<li>或运算：<code>||</code></li>
<li>取反运算：<code>!</code></li>
</ul>
<p>在JS语言中，所有的变量，都可以作为一个<code>boolean</code>类型的变量去使用</p>
<p><code>0/null/undefined/&quot;&quot;</code>都认为是false</p>
<h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3>
<p>JS中数组的定义方式：</p>
<ul>
<li><code>var 数组名 = [];</code> 空数组</li>
<li><code>var 数组名 = [1, 'abc', true]</code> 定义数组时赋值元素。</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li>JS语言中的数组，只要我们通过数组下标赋值，那么最大的下标值，就会自动的给数组做扩容操作。</li>
<li>JS中的数组中元素类型可以不同。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">arr[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(arr.<span class="property">length</span>);  <span class="comment">//10,其他元素为默认值undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">	<span class="title function_">alert</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3>
<h4 id="函数的定义方式"><a class="markdownIt-Anchor" href="#函数的定义方式"></a> 函数的定义方式</h4>
<ul>
<li>第一种：可以使用<code>function</code>关键字来定义函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(形参列表) &#123;</span><br><span class="line">    函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在JS中不需要可以规定函数的返回类型，只需要直接在函数体内使用<code>return</code>语句返回值即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun1</span>(<span class="number">1</span>, <span class="string">&quot;ab&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">fun2</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun3 = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun3</span>(<span class="number">1</span>, <span class="string">&quot;ab&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>第二种函数定义方式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="keyword">function</span>(<span class="params">形参列表</span>) &#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：在Java中函数允许重载，但是在JS中函数的重载会直接覆盖掉上一次的定义。</p>
<h4 id="函数的arguments隐形参数"><a class="markdownIt-Anchor" href="#函数的arguments隐形参数"></a> 函数的<code>arguments</code>隐形参数</h4>
<p>只在<code>function</code>函数内。就是在<code>function</code>函数中不需要定义，但却可以直接用来获取所有参数的变量。叫隐形参数。</p>
<p>比较像java基础的可变长参数一样。可变长参数其实是一个数组。</p>
<p>那么 js 中的隐形参数也跟 java 的可变长参数一样。操作类似数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求：要求 编写 一个函数。用于计算所有参数相加的和并返回</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;  <span class="comment">// arguments.length实际传入参数的长度</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">typeof</span>(<span class="variable language_">arguments</span>[i]) == <span class="string">&quot;number&quot;</span>) &#123;  <span class="comment">// 当前参数类型为number</span></span><br><span class="line">            result += <span class="variable language_">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( <span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&quot;abc&quot;</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>) );</span><br></pre></td></tr></table></figure>
<h3 id="js中的自定义对象"><a class="markdownIt-Anchor" href="#js中的自定义对象"></a> JS中的自定义对象</h3>
<h4 id="object形式的自定义对象"><a class="markdownIt-Anchor" href="#object形式的自定义对象"></a> Object形式的自定义对象</h4>
<p><strong>定义格式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">Object</span>();	<span class="comment">// 创建一个对象，空对象</span></span><br><span class="line">变量名.属性名 = 值;	<span class="comment">// 定义一个属性</span></span><br><span class="line">变量名.属性名 = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;	<span class="comment">// 定义一个属性函数名：function()&#123;&#125;	</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 对象的访问</span></span><br><span class="line">变量名.属性/函数名();</span><br></pre></td></tr></table></figure>
<p>示例代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(); </span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;华仔&quot;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">obj.<span class="property">fun</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; , 年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对象的访问：</span></span><br><span class="line"><span class="comment">//     变量名.属性 / 函数名();</span></span><br><span class="line"><span class="title function_">alert</span>( obj.<span class="property">age</span> );</span><br><span class="line">obj.<span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure>
<h4 id="形式的自定义对象"><a class="markdownIt-Anchor" href="#形式的自定义对象"></a> {}形式的自定义对象</h4>
<p><strong>定义格式</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = &#123;	<span class="comment">// 空对象</span></span><br><span class="line">    属性名：值,	<span class="comment">// 定义一个属性</span></span><br><span class="line">    属性名：值,	<span class="comment">// 定义一个属性</span></span><br><span class="line">    函数名：<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;	<span class="comment">// 定义一个函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的访问</span></span><br><span class="line">对象名.属性/函数名();</span><br></pre></td></tr></table></figure>
<p>示例代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;国哥&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    fun : <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; , 年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的访问：</span></span><br><span class="line"><span class="comment">//     变量名.属性 / 函数名();</span></span><br><span class="line"><span class="title function_">alert</span>(obj.<span class="property">name</span>);</span><br><span class="line">obj.<span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure>
<h2 id="js中的事件"><a class="markdownIt-Anchor" href="#js中的事件"></a> JS中的事件</h2>
<blockquote>
<p>是电脑输入设备和页面进行交互的响应，我们称之为事件。</p>
</blockquote>
<h3 id="常用的事件"><a class="markdownIt-Anchor" href="#常用的事件"></a> 常用的事件</h3>
<ul>
<li><code>onload</code> 加载完成事件：页面加载完成之后，常用于做页面 js 代码初始化操作</li>
<li><code>onclick</code> 单击事件：常用于按钮的点击响应操作。</li>
<li><code>onblur</code> 失去焦点事件：常用用于输入框失去焦点后验证其输入内容是否合法。</li>
<li><code>onchange</code> 内容发生改变事件：常用于下拉列表和输入框内容发生改变后操作</li>
<li><code>onsubmit</code> 表单提交事件： 常用于表单提交前，验证所有表单项是否合法。</li>
</ul>
<h3 id="注册绑定事件"><a class="markdownIt-Anchor" href="#注册绑定事件"></a> 注册(绑定)事件</h3>
<blockquote>
<p>事件的注册其实就是告诉浏览器，当事件响应后要执行哪些操作代码，叫事件注册或事件绑定。</p>
</blockquote>
<ul>
<li>静态注册事件</li>
</ul>
<p>通过 <code>html</code> 标签的事件属性直接赋于事件响应后的代码，这种方式我们叫静态注册。</p>
<ul>
<li>动态注册事件</li>
</ul>
<p>是指先通过 js 代码得到标签的 <code>dom</code> 对象，然后再通过 <code>dom 对象.事件名 = function()&#123;&#125;</code> 这种形式赋于事件响应后的代码，叫动态注册。</p>
<p>动态注册的基本步骤：</p>
<ol>
<li>获取标签对象</li>
<li>标签对象.时间名 = function(){}</li>
</ol>
<h3 id="onload加载完成事件"><a class="markdownIt-Anchor" href="#onload加载完成事件"></a> <code>onload</code>加载完成事件</h3>
<p><code>onload</code>事件是浏览器解析完页面之后就会自动触发的事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// onload事件动态注册。是固定写法</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;动态注册的onload事件&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="onclick单击事件"><a class="markdownIt-Anchor" href="#onclick单击事件"></a> <code>onclick</code>单击事件</h3>
<p><code>onclick</code>单击事件常用于按钮</p>
<p>示例代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onclickFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;静态注册onclick事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 动态注册onclick事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1 获取标签对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            * document 是JavaScript语言提供的一个对象（文档）&lt;br/&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            * get           获取</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            * Element       元素（就是标签）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            * By            通过。。   由。。经。。。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            * Id            id属性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            *</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            * getElementById通过id属性获取标签对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            **/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btnObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert( btnObj );</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2 通过标签对象.事件名 = function()&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">            btnObj.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;动态注册的onclick事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 静态注册onClick事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;onclickFun();&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="onblur失去焦点事件"><a class="markdownIt-Anchor" href="#onblur失去焦点事件"></a> <code>onblur</code>失去焦点事件</h3>
<p><code>onblur</code>失去焦点事件常用于输入框。</p>
<p>示例代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 静态注册失去焦点事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onblurFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console是控制台对象，是由JavaScript语言提供，专门用来向浏览器的控制器打印输出， 用于测试使用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// log() 是打印的方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;静态注册失去焦点事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 动态注册 onblur事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1 获取标签对象</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">var</span> passwordObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// alert(passwordObj);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2 通过标签对象.事件名 = function()&#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript">            passwordObj.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动态注册失去焦点事件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 静态注册onblur事件 --&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;onblurFun();&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="onchange内容发生改变事件"><a class="markdownIt-Anchor" href="#onchange内容发生改变事件"></a> <code>onchange</code>内容发生改变事件</h3>
<p><code>onchange</code>内容发生改变事件 通常用于下拉列表中。</p>
<p>示例代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onchangeFun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;女神已经改变了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1 获取标签对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> selObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sel01&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert( selObj );</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2 通过标签对象.事件名 = function()&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">            selObj.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;男神已经改变了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    请选择你心中的女神：</span><br><span class="line">    <span class="comment">&lt;!--静态注册onchange事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">onchange</span>=<span class="string">&quot;onchangeFun();&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--女神--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>芳芳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>佳佳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>娘娘<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    请选择你心中的男神：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;sel01&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--男神--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>国哥<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>华仔<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>富城<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="onsubmit表单提交事件"><a class="markdownIt-Anchor" href="#onsubmit表单提交事件"></a> <code>onsubmit</code>表单提交事件</h3>
<p><code>onsubmit</code>表单提交事件 是为了在提交时验证表单中的内容是否合法</p>
<p>示例代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 静态注册表单提交事务</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">onsubmitFun</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 要验证所有表单项是否合法，如果，有一个不合法就阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;静态注册表单提交事件----发现不合法&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1 获取标签对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> formObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form01&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2 通过标签对象.事件名 = function()&#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">            formObj.<span class="property">onsubmit</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 要验证所有表单项是否合法，如果，有一个不合法就阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;动态注册表单提交事件----发现不合法&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--return false 可以阻止 表单提交 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return onsubmitFun();&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;静态注册&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form01&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;动态注册&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="dom模型"><a class="markdownIt-Anchor" href="#dom模型"></a> DOM模型</h2>
<blockquote>
<p>DOM 全称是 Document Object Model 文档对象模型</p>
<p>大白话，就是把文档中的标签，属性，文本，转换成为对象来管理。</p>
</blockquote>
<h3 id="document对象"><a class="markdownIt-Anchor" href="#document对象"></a> Document对象</h3>
<p><img src="/img/Java/05JavaWeb/image-20220925160851563.png" alt="image-20220925160851563" /></p>
<p><strong>Document 对象的理解</strong>：</p>
<ul>
<li>Document 它管理了所有的 HTML 文档内容。</li>
<li>document 它是一种树结构的文档。有层级关系。</li>
<li>它让我们把所有的标签都对象化。</li>
<li>我们可以通过 document 访问所有的标签对象。</li>
</ul>
<h3 id="document对象中的方法"><a class="markdownIt-Anchor" href="#document对象中的方法"></a> Document对象中的方法</h3>
<ul>
<li><code>document.getElementById(elementId)</code>通过标签的 id 属性查找标签 dom 对象，elementId 是标签的 id 属性值</li>
<li><code>document.getElementsByName(elementName)</code> 通过标签的 name 属性查找标签 dom 对象，elementName 标签的 name 属性值</li>
<li><code>document.getElementsByTagName(tagname)</code> 通过标签名查找标签 dom 对象。tagname 是标签名</li>
<li><code>document.createElement( tagName)</code> 通过给定的标签名，创建一个标签对象。tagName 是要创建的标签名</li>
</ul>
<p><strong>注意</strong>：<code>document</code> 对象的三个查询方法，如果有 id 属性，优先使用 <code>getElementById</code> 方法来进行查询如果没有 id 属性，则优先使用 <code>getElementsByName</code> 方法来进行查询如果id属性和name属性都没有最后再按标签名查 <code>getElementsByTagName</code></p>
<h2 id="节点的常用属性和方法"><a class="markdownIt-Anchor" href="#节点的常用属性和方法"></a> 节点的常用属性和方法</h2>
<p>节点就是标签对象</p>
<p><strong>方法</strong></p>
<ul>
<li><code>getElementsByTagName()</code>获取当前节点的指定标签名孩子节点</li>
<li><code>appendChild(oChildNode)</code> 可以添加一个子节点，<code>oChildNode</code>是要添加的孩子节点。</li>
</ul>
<p><strong>属性</strong></p>
<ul>
<li><code>childNodes</code>属性，获取当前节点的所有子节点</li>
<li><code>firstChild</code>属性，获取当前节点的第一个子节点</li>
<li><code>lastChild</code>属性，获取当前节点的最后一个子节点</li>
<li><code>parentNode</code>属性，获取当前节点的父节点</li>
<li><code>nextSibling</code>属性，获取当前节点的下一个节点</li>
<li><code>previousSibling</code>属性，获取当前节点的上一个节点</li>
<li><code>className</code>用于获取或设置标签的 class 属性值</li>
<li><code>innerHTML</code>属性，表示获取/设置起始标签和结束标签中的内容</li>
<li><code>innerText</code>属性，表示获取/设置起始标签和结束标签中的文本</li>
</ul>
<h2 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;字符串&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="regexp">/字符串/</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">/[]/</span>; <span class="comment">// 或</span></span><br><span class="line"><span class="regexp">/[a-z]/</span>  <span class="comment">// 任意a~z</span></span><br></pre></td></tr></table></figure>
<p>示例代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示要求字符串中，是否包含字母e</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;e&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/e/</span>; <span class="comment">// 也是正则表达式对象</span></span><br><span class="line"><span class="comment">// 表示要求字符串中，是否包含字母a或b或c</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/[abc]/</span>;</span><br><span class="line"><span class="comment">// 表示要求字符串，是否包含小写字母</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/[a-z]/</span>;</span><br><span class="line"><span class="comment">// 表示要求字符串，是否包含任意大写字母</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/[A-Z]/</span>;</span><br><span class="line"><span class="comment">// 表示要求字符串，是否包含任意数字</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/[0-9]/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示要求字符串，是否包含字母，数字，下划线</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/\w/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示要求 字符串中是否包含至少一个a</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/a+/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示要求 字符串中是否 *包含* 零个 或 多个a</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/a*/</span>;</span><br><span class="line"><span class="comment">// 表示要求 字符串是否包含一个或零个a</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/a?/</span>;</span><br><span class="line"><span class="comment">// 表示要求 字符串是否包含连续三个a</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/a&#123;3&#125;/</span>;</span><br><span class="line"><span class="comment">// 表示要求 字符串是否包 至少3个连续的a，最多5个连续的a</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/a&#123;3,5&#125;/</span>;</span><br><span class="line"><span class="comment">// 表示要求 字符串是否包 至少3个连续的a，</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/a&#123;3,&#125;/</span>;</span><br><span class="line"><span class="comment">// 表示要求 字符串必须以a结尾</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/a$/</span>;</span><br><span class="line"><span class="comment">// 表示要求 字符串必须以a打头</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/^a/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求字符串中是否*包含* 至少3个连续的a</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/a&#123;3,5&#125;/</span>;</span><br><span class="line"><span class="comment">// 要求字符串，从头到尾都必须完全匹配</span></span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/^a&#123;3,5&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> patt = <span class="regexp">/^\w&#123;5,12&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;wzg168[[[&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>( patt.<span class="title function_">test</span>(str) );</span><br></pre></td></tr></table></figure>
<h1 id="jquery"><a class="markdownIt-Anchor" href="#jquery"></a> jQuery</h1>
<h2 id="jquery介绍"><a class="markdownIt-Anchor" href="#jquery介绍"></a> jQuery介绍</h2>
<blockquote>
<p>jQuery是JavaScript和查询（Query），他是辅助JavaScript开发的js类库。</p>
</blockquote>
<p><strong>核心思想</strong> ：它的核心思想是 write less,do more(写得更少,做得更多)，所以它实现了很多浏览器的兼容问题。</p>
<p><strong>优点</strong>：jQuery 是免费、开源的，jQuery 的语法设计可以使开发更加便捷，例如操作<a href="http://baike.baidu.com/view/55621.htm">文档</a>对象、选择 <a href="http://baike.baidu.com/view/14806.htm">DOM </a>元素、制作动画效果、事件处理、使用 <a href="http://baike.baidu.com/view/1641.htm">Ajax </a>以及其他功能</p>
<p><strong>注意</strong>：使用jQuery一定要引用jQuery库。</p>
<p>示例代码：使用jQuery给一个按钮绑定单击事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//使用$()代替window.onload</span></span></span><br><span class="line"><span class="language-javascript">	$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">//使用选择器获取按钮对象，随后绑定单击响应函数</span></span></span><br><span class="line"><span class="language-javascript">		$(<span class="string">&quot;#btnId&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">//弹出Hello</span></span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">		&#125;);</span></span><br><span class="line"><span class="language-javascript">	&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnId&quot;</span>&gt;</span>SayHello<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="jquery核心函数"><a class="markdownIt-Anchor" href="#jquery核心函数"></a> jQuery核心函数</h2>
<p><code>$</code>是jQuery 的 <strong>核心函数</strong>，能完成jQuery 的很多功能。<code>$()</code>就是调用<code>$</code>这个函数</p>
<ul>
<li>传入参数为【函数】时。表示页面加载完成之后，相当于<code>window.onload = function()&#123;&#125;</code></li>
<li>传入参数为【HTML字符串】时。会对我们创建这个 html 标签对象</li>
<li>传入参数为【选择器字符串】时：
<ul>
<li><code>$(&quot;#id属性值&quot;)</code> id选择器，根据id查询标签对象</li>
<li><code>$(&quot;.class属性值&quot;)</code> class选择器，根据class属性查询标签对象</li>
<li><code>$(&quot;标签名&quot;)</code> 标签名选择器，根据标签名查询标签对象</li>
</ul>
</li>
<li>传入参数为【DOM 对象】时：会把这个dom对象转换为jQuery对象</li>
</ul>
<h2 id="jquery对象和dom对象的区别"><a class="markdownIt-Anchor" href="#jquery对象和dom对象的区别"></a> jQuery对象和DOM对象的区别</h2>
<p><strong>DOM对象</strong></p>
<ul>
<li>通过 <code>getElementById()</code>查询出来的标签对象是 Dom 对象</li>
<li>通过 <code>getElementsByName()</code>查询出来的标签对象是 Dom 对象</li>
<li>通过 <code>getElementsByTagName()</code>查询出来的标签对象是 Dom 对象</li>
<li>通过 <code>createElement()</code> 方法创建的对象，是 Dom 对象</li>
</ul>
<p>DOM对象<code>Alert</code>出来的效果是：<code>[object HTML 标签名Element]</code></p>
<p><strong>jQuery对象</strong></p>
<ul>
<li>通过 JQuery 提供的 API 创建的对象，是 JQuery 对象</li>
<li>通过 JQuery 包装的 Dom 对象，也是 JQuery 对象</li>
<li>通过 JQuery 提供的 API 查询到的对象，是 JQuery 对象</li>
</ul>
<p>jQuery对象<code>Alert</code>出来的效果是：[object Object]</p>
<h2 id="jquery对象的本质"><a class="markdownIt-Anchor" href="#jquery对象的本质"></a> jQuery对象的本质</h2>
<p>jQuery对象是 dom对象的数组 + jQuery 提供的一系列功能函数。</p>
<h2 id="jquery对象和dom对象的使用区别"><a class="markdownIt-Anchor" href="#jquery对象和dom对象的使用区别"></a> jQuery对象和DOM对象的使用区别</h2>
<ul>
<li>jQuery 对象不能使用 DOM 对象的属性和方法</li>
<li>DOM 对象也不能使用 jQuery 对象的属性和方法</li>
</ul>
<h2 id="jquery对象和dom对象互转"><a class="markdownIt-Anchor" href="#jquery对象和dom对象互转"></a> jQuery对象和DOM对象互转⭐</h2>
<p>DOM对象转为 jQuery 对象</p>
<ul>
<li>现有DOM对象</li>
<li><code>$(DOM对象)</code>就可以转换成 jQuery对象</li>
</ul>
<p>jQuery 对象转为 DOM对象</p>
<ul>
<li>先有 jQuery对象</li>
<li><code>jQuery对象[下标]</code>取出相应的DOM对象。</li>
</ul>
<p><img src="/img/Java/05JavaWeb/image-20220925211944707.png" alt="image-20220925211944707" /></p>
<h2 id="jquery选择器"><a class="markdownIt-Anchor" href="#jquery选择器"></a> jQuery选择器⭐⭐⭐</h2>
<h3 id="基本选择器"><a class="markdownIt-Anchor" href="#基本选择器"></a> 基本选择器</h3>
<ul>
<li><code>#id</code> 根据id查找标签对象</li>
<li><code>.class</code> 根据class查找标签对象</li>
<li><code>element</code> 根据标签名查找标签对象</li>
<li><code>*</code> 表示任意的，所有选择器</li>
<li><code>selector1,selector2</code>组合选择器：合并选择器1，选择器2的结果并返回</li>
</ul>
<p>示例代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#one&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bbffaa&quot;</span>); <span class="comment">// css() 方法 可以设置和获取样式</span></span><br><span class="line">$(<span class="string">&quot;.mini&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bbffaa&quot;</span>); <span class="comment">//2.选择 class 为 mini 的所有元素</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bbffaa&quot;</span>); <span class="comment">//3.选择 元素名是 div 的所有元素</span></span><br><span class="line">$(<span class="string">&quot;*&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bbffaa&quot;</span>); <span class="comment">//4.选择所有的元素</span></span><br><span class="line">$(<span class="string">&quot;span,#two&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bbffaa&quot;</span>); <span class="comment">//5.选择所有的 span 元素和id为two的元素</span></span><br></pre></td></tr></table></figure>
<h3 id="层级选择器"><a class="markdownIt-Anchor" href="#层级选择器"></a> 层级选择器</h3>
<ul>
<li><code>ancestor descendant</code>后代选择器：在给定的祖先元素下匹配<strong>所有的后代元素</strong></li>
<li><code>parent &gt; child</code>子元素选择器：在给定的父元素下匹配<strong>所有的子元素</strong></li>
<li><code>prev + next</code>相邻元素选择器：匹配所有<strong>紧接在</strong> prev 元素后的 next 元素</li>
<li><code>prev ~ sibings</code>之后的兄弟元素选择器：匹配 prev 元素<strong>之后的所有</strong> siblings 元素</li>
</ul>
<p>示例代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.选择 body 内的所有 div 元素</span></span><br><span class="line">$(<span class="string">&quot;body div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line"><span class="comment">// 2.在 body 内, 选择div子元素  </span></span><br><span class="line">$(<span class="string">&quot;body &gt; div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line"><span class="comment">// 3.选择 id 为 one 的下一个 div 元素 </span></span><br><span class="line">$(<span class="string">&quot;#one + div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line"><span class="comment">// 4.选择 id 为 two 的元素后面的所有 div 兄弟元素</span></span><br><span class="line">$(<span class="string">&quot;#two ~ div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="过滤选择器"><a class="markdownIt-Anchor" href="#过滤选择器"></a> 过滤选择器</h3>
<h4 id="基本过滤"><a class="markdownIt-Anchor" href="#基本过滤"></a> 基本过滤</h4>
<ul>
<li><code>:first</code> 获取第一个元素</li>
<li><code>:last</code> 获取最后一个元素</li>
<li><code>:not(selector)</code> 去除所有与给定选择器匹配的元素</li>
<li><code>:even</code> 匹配所有索引值为偶数的元素，从 0 开始计数</li>
<li><code>:odd</code> 匹配所有索引值为奇数的元素，从 0 开始计数</li>
<li><code>:eq(index)</code> 匹配一个给定索引值的元素</li>
<li><code>:gt(index)</code> 匹配所有大于给定索引值的元素</li>
<li><code>:lt(index)</code> 匹配所有小于给定索引值的元素</li>
<li><code>:header</code> 匹配如 <code>h1</code>, <code>h2</code>, <code>h3</code> 之类的标题元素</li>
<li><code>:animated</code> 匹配所有正在执行动画效果的元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//11.选择没有执行动画的最后一个div</span></span><br><span class="line">$(<span class="string">&quot;div:not(:animated):last&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="内容过滤器"><a class="markdownIt-Anchor" href="#内容过滤器"></a> 内容过滤器</h4>
<ul>
<li><code>:contains(text)</code> 匹配包含给定文本的元素</li>
<li><code>:empty</code> 匹配所有不包含子元素或者文本的空元素</li>
<li><code>:parent</code> 匹配含有子元素或者文本的元素</li>
<li><code>has(selector)</code> 匹配含有选择器所匹配的元素的元素</li>
</ul>
<h4 id="属性过滤器"><a class="markdownIt-Anchor" href="#属性过滤器"></a> 属性过滤器</h4>
<ul>
<li><code>[attribute]</code> ：匹配包含给定属性的元素**。**</li>
<li><code>[attribute=value]</code> ：匹配给定的属性是某个特定值的元素</li>
<li><code>[attribute!=value]</code>：匹配所有不含有指定的属性，或者属性不等于特定值的元素。</li>
<li><code>[attribute^=value]</code>：匹配给定的属性是以某些值开始的元素</li>
<li><code>[attribute$=value]</code>：匹配给定的属性是以某些值结尾的元素</li>
<li><code>[attribute*=value]</code>：匹配给定的属性是以包含某些值的元素</li>
<li><code>[attrSel1][attrSel2][attrSelN]</code>：复合属性选择器，需要同时满足多个条件时使用。]</li>
</ul>
<p>示例代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选取 属性title值等于&#x27;test&#x27;的div元素</span></span><br><span class="line">$(<span class="string">&quot;div[title=&#x27;test&#x27;]&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先选取有属性id的div元素，然后在结果中 选取属性title值 含有&#x27;es&#x27;的 div 元素</span></span><br><span class="line">$(<span class="string">&quot;div[id][title*=&#x27;es&#x27;]&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素</span></span><br><span class="line">$(<span class="string">&quot;div[title][title!=&#x27;test&#x27;]&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;#bbffaa&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="表单过滤器"><a class="markdownIt-Anchor" href="#表单过滤器"></a> 表单过滤器</h4>
<ul>
<li><code>:input</code>：匹配所有 input, textarea, select 和 button 元素</li>
<li><code>:text</code>：匹配所有 文本输入框</li>
<li><code>:password</code>：匹配所有的密码输入框</li>
<li><code>:radio</code>：匹配所有的单选框</li>
<li><code>:checkbox</code>：匹配所有的复选框</li>
<li><code>:submit</code>：匹配所有提交按钮</li>
<li><code>:image</code>：匹配所有 img 标签</li>
<li><code>:reset</code>：匹配所有重置按钮</li>
<li><code>:button</code>： 匹配所有 input type=button <button>按钮</li>
<li><code>:file</code>： 匹配所有 input type=file 文件上传</li>
<li><code>:hidden</code>：匹配所有不可见元素 display:none 或 input type=hidden</li>
</ul>
<h4 id="表单对象属性过滤器"><a class="markdownIt-Anchor" href="#表单对象属性过滤器"></a> 表单对象属性过滤器</h4>
<ul>
<li><code>:enabled</code>：匹配所有可用元素</li>
<li><code>:disabled</code>：匹配所有不可用元素</li>
<li><code>:checked</code>：匹配所有选中的单选，复选，和下拉列表中选中的option标签对象</li>
<li><code>:selected</code>：匹配所有选中的option</li>
</ul>
<h2 id="jquery元素筛选"><a class="markdownIt-Anchor" href="#jquery元素筛选"></a> jQuery元素筛选</h2>
<ul>
<li><code>eq(index)</code>获取给定索引的元素，和<code>:eq(index)</code>效果相同</li>
<li><code>first()</code>获取第一个元素，和<code>:first</code>效果相同</li>
<li><code>last()</code>获取最后一个元素</li>
<li><code>filter(exp)</code>留下匹配的元素</li>
<li><code>is(exp)</code> 判断是否匹配给定的选择器，只要有一个匹配就返回true</li>
<li><code>has(exp)</code>返回包含有匹配选择器的元素的元素，功能跟 :has 一样</li>
<li><code>not(exp)</code>删除匹配选择器的元素，功能跟 :not 一样</li>
<li><code>children(exp)</code> 返回匹配给定选择器的子元素，功能跟 parent&gt;child 一样</li>
<li><code>find(exp)</code> 返回匹配给定选择器的后代元素，功能跟 ancestor descendant 一样</li>
<li><code>next()</code>返回当前元素的下一个兄弟元素，功能跟 prev + next 功能一样</li>
<li><code>nextAll()</code>返回当前元素后面所有的兄弟元素，功能跟 prev ~ siblings 功能一样</li>
<li><code>nextUntil()</code>返回当前元素到指定匹配的元素为止的后面元素</li>
<li><code>parent()</code> 返回父元素</li>
<li><code>prev(exp)</code>返回当前元素的上一个兄弟元素</li>
<li><code>prevAll()</code>返回当前元素前面所有的兄弟元素</li>
<li><code>prevUnit(exp)</code> 返回当前元素到指定匹配的元素为止的前面元素</li>
<li><code>siblings(exp)</code> 返回所有兄弟元素</li>
<li><code>add()</code>把 add 匹配的选择器的元素添加到当前 jquery 对象中</li>
</ul>
<p>示例代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">eq</span>(<span class="number">3</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;div:eq(3)&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bfa&quot;</span>);  <span class="comment">// 两种写法效果完全一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//filter()在div中选择索引为偶数的</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">filter</span>(<span class="string">&quot;:even&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bfa&quot;</span>);</span><br><span class="line"><span class="comment">//siblings()    找到所有的兄弟元素，包括前面的和后面的</span></span><br><span class="line">$(<span class="string">&quot;#two&quot;</span>).<span class="title function_">siblings</span>().<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bfa&quot;</span>)</span><br><span class="line"><span class="comment">//   $(&quot;span,#two,.mini,#one&quot;)</span></span><br><span class="line">$(<span class="string">&quot;span&quot;</span>).<span class="title function_">add</span>(<span class="string">&quot;#two&quot;</span>).<span class="title function_">add</span>(<span class="string">&quot;.mini&quot;</span>).<span class="title function_">add</span>(<span class="string">&quot;#one&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#bfa&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="jquery的属性操作"><a class="markdownIt-Anchor" href="#jquery的属性操作"></a> jQuery的属性操作</h2>
<ul>
<li><code>html()</code> 它可以设置和获取起始标签和结束标签中的内容。和dom属性中的<code>innerHtml</code>一样</li>
<li><code>text()</code>他可以设置和获取起始标签和结束标签中的文本。和dom属性中的<code>innerText</code>一样</li>
<li><code>val()</code>它可以设置和获取 <strong>表单项</strong> 的value属性值。和dom属性<code>value</code>一样</li>
</ul>
<p>示例代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="line"><span class="title function_">alert</span>( $(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>() );<span class="comment">// 获取</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;</span>);<span class="comment">// 设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="line"><span class="title function_">alert</span>( $(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>() ); <span class="comment">// 获取</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;</span>); <span class="comment">// 设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>($(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>());<span class="comment">//获取</span></span><br><span class="line">    $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;超级程序猿&quot;</span>);<span class="comment">// 设置</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量操作单选</span></span><br><span class="line">$(<span class="string">&quot;:radio&quot;</span>).<span class="title function_">val</span>([<span class="string">&quot;radio2&quot;</span>]);</span><br><span class="line"><span class="comment">// 批量操作筛选框的选中状态</span></span><br><span class="line">$(<span class="string">&quot;:checkbox&quot;</span>).<span class="title function_">val</span>([<span class="string">&quot;checkbox3&quot;</span>,<span class="string">&quot;checkbox2&quot;</span>]);</span><br><span class="line"><span class="comment">// 批量操作多选的下拉框选中状态</span></span><br><span class="line">$(<span class="string">&quot;#multiple&quot;</span>).<span class="title function_">val</span>([<span class="string">&quot;mul2&quot;</span>,<span class="string">&quot;mul3&quot;</span>,<span class="string">&quot;mul4&quot;</span>]);</span><br><span class="line"><span class="comment">// 操作单选的下拉框选中状态</span></span><br><span class="line">$(<span class="string">&quot;#single&quot;</span>).<span class="title function_">val</span>([<span class="string">&quot;sin2&quot;</span>]);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>attr()</code>可以设置和获取属性的值，不推荐操作<code>checked</code>、<code>readOnly</code>、<code>selected</code>、<code>disable</code>等等。<code>attr()</code>方法还可以操作飞标准的属性。比如自定义属性：</li>
<li><code>prop()</code>可以设置和获取属性的值，只推荐操作：<code>checked</code>、<code>readOnly</code>、<code>selected</code>、<code>disable</code>等</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>( $(<span class="string">&quot;:checkbox:first&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;name&quot;</span>) ); <span class="comment">// 获取name属性的值</span></span><br><span class="line">$(<span class="string">&quot;:checkbox:first&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;abc&quot;</span>) ; <span class="comment">// 设置name属性的值</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;:checkbox&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>,<span class="literal">false</span> );<span class="comment">// 官方觉得返回undefined是一个错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历方法</span></span><br><span class="line">$(<span class="string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在each遍历的function函数中，有一个this对象。这个this对象是当前正在遍历到的dom对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">checked</span> = !<span class="variable language_">this</span>.<span class="property">checked</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="dom的增删改"><a class="markdownIt-Anchor" href="#dom的增删改"></a> DOM的增删改</h2>
<p>内部插入</p>
<ul>
<li><code>appendTo()</code>：<code>a.appendTo(b)</code>把a插入到b子元素的末尾，成为最后一个元素。</li>
<li><code>prependTo()</code>：<code>a.prependTo(b)</code>把a插入到b所有子元素的前面，成为第一个元素。</li>
</ul>
<p>外部插入</p>
<ul>
<li><code>insertAfter()</code>：<code>a.insertAfter(b)</code>得到ba</li>
<li><code>insertBefore()</code>：<code>a.insertBefore(b)</code>得到ab</li>
</ul>
<p>替换</p>
<ul>
<li><code>replaceWith()</code>：<code>a.replaceWith(b)</code>，用b替换掉a</li>
<li><code>replaceAll()</code>：<code>a.replaceAll(b)</code>，用a替换掉所有的b</li>
</ul>
<p>删除</p>
<ul>
<li><code>remove()</code>：<code>a.remove()</code>删除a标签</li>
<li><code>empty()</code>：<code>a.empty()</code>清空a标签的所有内容。</li>
</ul>
<h2 id="css样式操作"><a class="markdownIt-Anchor" href="#css样式操作"></a> CSS样式操作</h2>
<ul>
<li><code>addClass(class属性)</code> 通过添加class属性来添加样式</li>
<li><code>removeClass(class属性)</code>通过删除class属性来删除样式</li>
<li><code>toggleClass(class属性)</code>对被选择的class属性进行添加/删除类的切换操作</li>
<li><code>offset()</code>返回第一个匹配元素相对于文档的位置</li>
<li><code>offset(&#123;top:值, left:值&#125;)</code>设置相对于文档的位置</li>
</ul>
<h2 id="jquery动画"><a class="markdownIt-Anchor" href="#jquery动画"></a> jQuery动画</h2>
<p><strong>基本动画</strong></p>
<ul>
<li><code>show()</code>，将隐藏的元素可见。</li>
<li><code>hide()</code>，将可见的元素隐藏</li>
<li><code>toggle()</code>，可见的隐藏，隐藏的可见</li>
</ul>
<p>以上的三个方法都可以添加参数：</p>
<ol>
<li>第一个参数：动画执行的时长，以毫秒为单位</li>
<li>第二个参数：动画的回调函数，动画完成后自动调用的函数。</li>
</ol>
<p><strong>淡入淡出动画</strong></p>
<ul>
<li><code>fadeIn(time)</code>在指定时间内淡入（慢慢可见）</li>
<li><code>fadeOut(time)</code>在指定时间内淡出（慢慢消失）</li>
<li><code>fadeTo([time], [0.5], [function])</code> 在指定时长内慢慢的将透明度修改到指定的值。0透明，1完全可见，0.5半透明</li>
<li><code>fadeToggle(time, function)</code> 淡入/淡出切换</li>
</ul>
<h2 id="jquery事件和js事件的区别"><a class="markdownIt-Anchor" href="#jquery事件和js事件的区别"></a> jQuery事件和JS事件的区别</h2>
<p><code>$(function()&#123;&#125;)</code> 和 <code>window.onload = function()&#123;&#125;</code>的区别</p>
<p><strong>触发的时间</strong>：</p>
<ul>
<li>jQuery 的页面加载完成之后是浏览器的内核解析完页面的标签创建好 DOM 对象之后就会<strong>马上执行</strong>。</li>
<li>原生 js 的页面加载完成之后，除了要等浏览器内核解析完标签创建好 DOM 对象，还要等标签显示时需要的内容加载完成</li>
</ul>
<p><strong>触发的顺序</strong></p>
<ul>
<li>jQuery 页面加载完成之后先执行</li>
<li>原生 js 的页面加载完成之后</li>
</ul>
<p><strong>执行的次数</strong></p>
<ul>
<li>原生 js 的页面加载完成之后，<strong>只会执行最后一次的赋值函数</strong>，会将前面的函数覆盖掉。</li>
<li>jQuery 的页面加载完成之后是全部把注册的 function 函数，依次顺序全部执行。</li>
</ul>
<h2 id="jquery中其他事件的处理方法"><a class="markdownIt-Anchor" href="#jquery中其他事件的处理方法"></a> jQuery中其他事件的处理方法</h2>
<ul>
<li><code>click([function])</code> 它可以绑定单击事件，以及触发单击事件</li>
<li><code>mouseover()</code> 鼠标移入事件</li>
<li><code>mouseout()</code> 鼠标移出事件</li>
<li><code>bind()</code> 可以给元素一次性绑定一个或多个事件。</li>
<li><code>one()</code> 使用上跟 bind 一样。但是 one 方法绑定的事件只会响应一次。</li>
<li><code>unbind()</code> 跟 bind 方法相反的操作，解除事件的绑定</li>
<li><code>live()</code> 也是用来绑定事件。它可以用来绑定选择器匹配的所有元素的事件。哪怕这个元素是后面动态创建出 来的也有</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用live绑定的单击事件</span></span><br><span class="line">$(<span class="string">&quot;h5&quot;</span>).<span class="title function_">live</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;h5单击事件 == live方法绑定&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;h5&quot;</span>).<span class="title function_">click</span>(); <span class="comment">// 不传function是触发事件</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//鼠标移入</span></span><br><span class="line">$(<span class="string">&quot;h5&quot;</span>).<span class="title function_">mouseover</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你进来了&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// //鼠标移出</span></span><br><span class="line">$(<span class="string">&quot;h5&quot;</span>).<span class="title function_">mouseout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你出去了&quot;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="事件的冒泡"><a class="markdownIt-Anchor" href="#事件的冒泡"></a> 事件的冒泡</h3>
<blockquote>
<p>事件的冒泡是指，父子元素同时监听同一个事件。当触发子元素的事件的时候，同一个事件也被传递到了父元素的事件里去 响应</p>
</blockquote>
<p>阻止事件冒泡的方法：在子元素事件函数体内，return false; 可以阻止事件的冒泡传递</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#content&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// div为父元素</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;我是div&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;span&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// span为子元素</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;我是span&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="js事件对象"><a class="markdownIt-Anchor" href="#js事件对象"></a> JS事件对象</h3>
<blockquote>
<p>事件对象，是封装有触发的事件信息的一个 javascript 对象。</p>
<p>我们重点关心的是怎么拿到这个 javascript 的事件对象。以及使用。</p>
</blockquote>
<p>获取 javascript 事件对象</p>
<ul>
<li>在给元素绑定事件的时候，在事件的 function( event ) 参数列表中添加一个参数，这个参数名，我们习惯取名为 event。 这个 event 就是</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.原生javascript获取 事件对象</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;areaDiv&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.JQuery代码获取 事件对象</span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// $(&quot;#areaDiv&quot;).click(function (event) &#123;</span></span><br><span class="line">    <span class="comment">// 	console.log(event);</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    <span class="comment">//3.使用bind同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;#areaDiv&quot;</span>).<span class="title function_">bind</span>(<span class="string">&quot;mouseover mouseout&quot;</span>,<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.<span class="property">type</span> == <span class="string">&quot;mouseover&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标移入&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="property">type</span> == <span class="string">&quot;mouseout&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标移出&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="xml"><a class="markdownIt-Anchor" href="#xml"></a> XML</h1>
<blockquote>
<p>xml是可扩展的标记性语言</p>
</blockquote>
<p><strong>作用</strong></p>
<ul>
<li>用来保存数据，而且这些数据具有自我描述性</li>
<li>可以作为项目或者模块的配置文件</li>
<li>还可以作为网络传输数据的格式。（不多用了，主要以JSON为主）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>xzt<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="xml语法"><a class="markdownIt-Anchor" href="#xml语法"></a> XML语法</h2>
<h3 id="文档声明"><a class="markdownIt-Anchor" href="#文档声明"></a> 文档声明</h3>
<p><strong>属性</strong></p>
<ul>
<li><code>version</code>版本号</li>
<li><code>encoding</code>编码格式</li>
<li><code>standalone=&quot;yes/no&quot;</code>表示该xml文件是否是独立的xml</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li><code>&lt;?xml</code> 需要连在一起写。否则会报错</li>
</ul>
<p>示例代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- version:xml版本； encoding:xml编码 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="xml元素标签"><a class="markdownIt-Anchor" href="#xml元素标签"></a> XML元素（标签）</h3>
<blockquote>
<p>xml元素是指从（且包括）开始标签直到（且包括）结束标签的部分</p>
<p>元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。</p>
</blockquote>
<p>元素也分为单标签和双标签</p>
<ul>
<li>单标签：<code>&lt;元素名 属性=&quot;值&quot;/&gt;</code></li>
<li>双标签：<code>&lt;元素名 属性=&quot;值&quot;&gt; &lt;/元素名&gt;</code></li>
</ul>
<h4 id="命名规则"><a class="markdownIt-Anchor" href="#命名规则"></a> 命名规则</h4>
<ul>
<li>名称可以包含字母、数字以及其他字符。</li>
<li>名称不能以数字或者标点符号开始</li>
<li>名称不能包含空格</li>
</ul>
<h3 id="xml属性"><a class="markdownIt-Anchor" href="#xml属性"></a> XML属性</h3>
<blockquote>
<p>xml 的标签属性和 html 的标签属性是非常类似的，属性可以提供元素的额外信息 。</p>
</blockquote>
<p>在标签上可以书写属性： 一个标签上可以书写多个属性。每个属性的值必须使用 引号 引起来。属性 的规则和标签的书写规则一致。</p>
<p><strong>注意</strong>：属性必须用<code>&quot;&quot;</code>引起来</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="语法规则"><a class="markdownIt-Anchor" href="#语法规则"></a> 语法规则</h3>
<ul>
<li>xml中所有的元素都必须有关闭标签</li>
<li>xml对大小写敏感</li>
<li>xml标签必须正确的嵌套</li>
<li>xml文档必须有根元素，没有父标签的顶级元素</li>
<li>xml的属性须加引号</li>
<li>xml中的特殊字符。例如<code>&gt;</code>需要写为<code>&amp;gt;</code>、<code>&lt;</code>需要写为<code>&amp;lt;</code></li>
</ul>
<h3 id="文本区域cdata区"><a class="markdownIt-Anchor" href="#文本区域cdata区"></a> 文本区域（CDATA区）</h3>
<blockquote>
<p>CDATA 语法可以告诉 xml 解析器，我 CDATA 里的文本内容，只是纯文本，不需要 xml 语法解析</p>
</blockquote>
<p><strong>CDATA格式</strong></p>
<p><code>&lt;![CDATA[这里可以把你输入的字符原样显示，不会解析xml]]&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">id</span>&gt;</span>2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span></span><br><span class="line">        	&lt;![CDATA[aaa&lt;&lt;&lt;&gt;&gt;&gt;aaa&gt;&gt;&gt;&lt;&lt;&lt;!!!!]]&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="xml解析"><a class="markdownIt-Anchor" href="#xml解析"></a> XML解析</h2>
<blockquote>
<p>xml 可扩展的标记语言。 不管是 html 文件还是 xml 文件它们都是标记型文档，都可以使用 w3c 组织制定的 dom 技术来</p>
</blockquote>
<p>第三方的解析：</p>
<ul>
<li>jdom 在 dom 基础上进行了封装 。</li>
<li>dom4j 又对 jdom 进行了封装。</li>
<li>pull 主要用在 Android 手机开发，是在跟 sax 非常类似都是事件机制解析 xml 文件。</li>
</ul>
<p>这个 Dom4j 它是第三方的解析技术。我们需要使用第三方给我们提供好的类库才可以解析 xml</p>
<h3 id="dom4j解析"><a class="markdownIt-Anchor" href="#dom4j解析"></a> dom4j解析⭐⭐⭐</h3>
<blockquote>
<p>由于 dom4j 它不是 sun 公司的技术，而属于第三方公司的技术，我们需要使用 dom4j 就需要到 dom4j 官网下载 dom4j 的 jar 包。</p>
</blockquote>
<h4 id="dom4j编程步骤"><a class="markdownIt-Anchor" href="#dom4j编程步骤"></a> dom4j编程步骤</h4>
<ul>
<li>第一步： 先加载 xml 文件创建 Document 对象</li>
<li>第二步：通过 Document 对象拿到根元素对象</li>
<li>第三步：通过根元素.elelemts(标签名); 可以返回一个集合，这个集合里放着。所有你指定的标签名的元素对象</li>
<li>第四步：找到你想要修改、删除的子元素，进行相应在的操作</li>
<li>第五步，保存到硬盘上</li>
</ul>
<h4 id="获取-document-对象"><a class="markdownIt-Anchor" href="#获取-document-对象"></a> 获取 document 对象</h4>
<blockquote>
<p>首先需要创建一个lib目录，并添加dom4j的jar包。并添加到类路径。</p>
</blockquote>
<p><strong>步骤</strong></p>
<ol>
<li>读取 xml 文件<code>SAXReader saxReader = new SAXReader(); Document document = saxReader.read(&quot;xml文件位置&quot;);</code></li>
<li>通过document对象获取根元素 <code>Element rootElement = document.getRootElement();</code></li>
<li>通过根元素获取xml里的标签对象 <code>List&lt;Element&gt; books = rootElement.elements();</code></li>
<li>遍历，处理每个xml里的标签转化为对应的类
<ul>
<li><code>elementText()</code> 直接获取指定标签名的文本内容</li>
</ul>
</li>
</ol>
<p><strong>示例代码</strong></p>
<p>需要解析的xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">sn</span>=<span class="string">&quot;SN12341232&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>辟邪剑谱<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>9.9<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>班主任<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">sn</span>=<span class="string">&quot;SN12341231&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>葵花宝典<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>99.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>班长<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>与xml文件相对应的Book类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String sn;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String sn, String name, BigDecimal price, String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sn = sn;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSn</span><span class="params">(String sn)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sn = sn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BigDecimal <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(BigDecimal price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;sn=&#x27;&quot;</span> + sn + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&quot;, author=&#x27;&quot;</span> + author + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>dom4j解析类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dom4jTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception, NullPointerException &#123;</span><br><span class="line">        <span class="comment">// 创建一个SaxReader输入流，去读取 xml配置文件，生成Document对象</span></span><br><span class="line">        <span class="comment">// 1.读取bools.xml文件</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> saxReader.read(<span class="string">&quot;src/books.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.通过document对象获取根元素</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        <span class="comment">// 3.通过根元素获取book标签对象</span></span><br><span class="line">        List&lt;Element&gt; books = rootElement.elements();</span><br><span class="line">        <span class="comment">// 4.遍历，处理每个book标签转化为Book类</span></span><br><span class="line">        <span class="keyword">for</span> (Element book : books) &#123;</span><br><span class="line">            <span class="comment">// asXML() 把标签对象转换为标签字符串</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">nameElement</span> <span class="operator">=</span> book.element(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="comment">// getText()可以获取文本中的标签内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">nameText</span> <span class="operator">=</span> nameElement.getText();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// elementText() 直接获取指定标签名的文本内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">price</span> <span class="operator">=</span> nameElement.elementText(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> nameElement.elementText(<span class="string">&quot;author&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// attributeValue() 获取指定属性名的值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sn</span> <span class="operator">=</span> book.attributeValue(<span class="string">&quot;sn&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(sn, nameText, Double.parseDouble(price), author);</span><br><span class="line">            System.out.println(book1);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="tomcat"><a class="markdownIt-Anchor" href="#tomcat"></a> Tomcat</h1>
<blockquote>
<p>JavaWeb 是指，所有通过 Java 语言编写可以通过浏览器访问的程序的总称，叫 JavaWeb。</p>
<p>JavaWeb 是基于请求和响应来开发的。</p>
</blockquote>
<p>请求：请求是指客户端（浏览器）给服务器（Tomcat）发送数据，叫请求 Request</p>
<p>响应：响应是指服务器给客户端回传数据，叫响应 Response</p>
<p>请求和响应是成对出现的，有请求就有响应</p>
<p><strong>端口号</strong>：8080。<a href="https://localhost:8080">https://localhost:8080</a></p>
<h2 id="常用的web服务器"><a class="markdownIt-Anchor" href="#常用的web服务器"></a> 常用的Web服务器</h2>
<p>web资源按实现的技术和呈现的效果不同，分为静态资源和动态资源</p>
<ul>
<li>静态资源：html、css、js、txt、MP4视频、jpg图片</li>
<li>动态资源：jsp页面、Servlet程序。</li>
</ul>
<p><a href="https://blog.csdn.net/qq_40881680/category_11876209.html?spm=1001.2014.3001.5482">相关配置参考</a></p>
<h1 id="servlet"><a class="markdownIt-Anchor" href="#servlet"></a> Servlet</h1>
<blockquote>
<p>Servlet是JavaEE规范之一</p>
</blockquote>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段3</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 企业开发基础 Spring5-IOC</title>
    <url>/2022/09/26/JAVA/06Spring5_IOC/</url>
    <content><![CDATA[<h2 id="spring概述"><a class="markdownIt-Anchor" href="#spring概述"></a> Spring概述</h2>
<blockquote>
<p>Spring 是轻量级的开源的JavaEE框架。</p>
<p>Spring 可以解决企业应用开发的复杂性</p>
<p>Spring 有两个核心部分：IOC 和 AOP</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/7a328642b6bf4efab14c287bff1ca290.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY2FyeS56aGFp,size_20,color_FFFFFF,t_70,g_se,x_16" alt="Spring5模块" /></p>
<p><strong>特点</strong></p>
<ul>
<li>方便解耦，简化开发</li>
<li>AOP编程支持</li>
<li>方便程序测试</li>
<li>方便和其他框架进行整合</li>
<li>方便进行事务的操作</li>
<li>降低API开发难度</li>
</ul>
<p>可以使用 <code>maven</code> 包管理工具，也可以下载 Spring 到本地。</p>
<p>下载地址：<a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">Spring</a> ，下载完成后，需要将下面几个jar包导入到项目文件中。还需要引入一个日志包。</p>
<p><img src="/img/Java/06Spring/image-20220926163603438.png" alt="image-20220926163603438" /></p>
<p>官网地址：<a href="https://spring.io/projects/spring-framework#learn">Spring</a></p>
<h2 id="ioc概述"><a class="markdownIt-Anchor" href="#ioc概述"></a> IOC概述</h2>
<blockquote>
<p>控制反转IOC</p>
<p>a）把对象创建和对象之间的调用过程，交给Spring进行管理</p>
<p>b）使用IOC目的：为了降低耦合度</p>
</blockquote>
<h2 id="底层原理"><a class="markdownIt-Anchor" href="#底层原理"></a> 底层原理</h2>
<ul>
<li>xml解析</li>
<li>工厂模式</li>
</ul>
<p>若A类中想调用B类中的方法。传统的先创建对象再调用对象中的方法，造成程序的耦合度太高。因此出现了工厂模式，可以有效降低耦合度，但是还是存在耦合：</p>
<p><strong>工厂模式实现过程</strong></p>
<ol>
<li>先创建第三个类（工厂类C）</li>
<li>里面写一个静态<code>static</code>方法，</li>
<li>在方法里面返回B类的一个对象</li>
</ol>
<p>则A类就可以通过<code>B类 类名 = C类类名.静态方法名();</code>来调用B类中的方法。</p>
<ul>
<li>反射</li>
</ul>
<h3 id="ioc解耦过程"><a class="markdownIt-Anchor" href="#ioc解耦过程"></a> IOC解耦过程⭐</h3>
<ol>
<li>xml配置文件，配置创建的对象 <code>&lt;bean id=&quot;dao&quot; class=&quot;com.xzt.UserDao&quot;&gt; &lt;/bean&gt;</code></li>
<li>创建工厂类，实现一个静态方法。方法实现过程。
<ul>
<li>xml解析 <code>String classValue = &quot;com.xzt.UserDao&quot;</code></li>
<li>通过反射创建对象 <code>Class clazz = Class.forName(classValue);</code></li>
<li><code>return (UserDao)clazz.newInstance();</code></li>
</ul>
</li>
</ol>
<h2 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h2>
<p>IOC 思想基于IOC 容器完成，IOC容器底层就是对象工厂</p>
<ul>
<li><code>BeanFactory</code> ：IOC容器基本实现是Spring内部接口的使用接口，不提供给开发人员进行使用。</li>
<li><code>ApplicationContext</code>：<code>BeanFactory</code>接口的子接口，提供更多更强大的功能，提供给开发人员使用。</li>
</ul>
<p><strong>区别</strong></p>
<p><code>BeanFactory</code>加载配置文件时候不会创建对象，在获取对象时才会创建对象。<code>ApplicationContext</code>加载配置文件时候就会把在配置文件对象进行创建。推荐使用！！！</p>
<h3 id="applicationcontext实现类"><a class="markdownIt-Anchor" href="#applicationcontext实现类"></a> <code>ApplicationContext</code>实现类</h3>
<ul>
<li><code>FileSystemXmlApplicationContext</code> 根据系统路径</li>
<li><code>ClassPathXmlApplicationContext</code> 根据src路径</li>
</ul>
<h2 id="ioc容器-bean管理"><a class="markdownIt-Anchor" href="#ioc容器-bean管理"></a> IOC容器-Bean管理</h2>
<p><strong>Bean管理</strong></p>
<ul>
<li>Spring创建对象</li>
<li>Spring注入属性</li>
</ul>
<h3 id="基于xml配置文件实现bean管理"><a class="markdownIt-Anchor" href="#基于xml配置文件实现bean管理"></a> 基于XML配置文件实现Bean管理</h3>
<h4 id="基于xml配置文件创建对象"><a class="markdownIt-Anchor" href="#基于xml配置文件创建对象"></a> 基于XML配置文件创建对象</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User.java</span></span><br><span class="line"><span class="keyword">package</span> com.xzt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 配置User对象创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在spring配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象创建。</p>
<p><strong>bean标签的常用属性</strong></p>
<ul>
<li><code>id</code>属性：唯一标识</li>
<li><code>class</code>属性：类的全路径（包类路径）</li>
</ul>
<p><strong>注意</strong>：创建对象时，默认执行无参构造函数</p>
<h4 id="基于xml配置文件-注入属性-set方式注入"><a class="markdownIt-Anchor" href="#基于xml配置文件-注入属性-set方式注入"></a> 基于XML配置文件 - 注入属性 - set方式注入⭐</h4>
<p><code>&lt;property name=&quot;变量名&quot; value=&quot;值&quot;&gt;&lt;/property&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Book 类</span></span><br><span class="line"><span class="comment">//（1）传统方式： 创建类，定义属性和对应的set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="comment">//创建属性</span></span><br><span class="line">    <span class="keyword">private</span> String bname;</span><br><span class="line">    <span class="keyword">private</span> String bauthor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建属性对应的set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBname</span><span class="params">(String bname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bname = bname;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBauthor</span><span class="params">(String bauthor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bauthor = bauthor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）spring方式： set方法注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property完成属性注入</span></span><br><span class="line"><span class="comment">        name：类里面属性名称</span></span><br><span class="line"><span class="comment">        value：向属性注入的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;World&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="基于xml配置文件-注入属性-有参构造函数注入"><a class="markdownIt-Anchor" href="#基于xml配置文件-注入属性-有参构造函数注入"></a> 基于XML配置文件 - 注入属性 - 有参构造函数注入⭐</h4>
<p>两种方式：</p>
<p><code>&lt;constructor-arg name=&quot;变量名&quot; value=&quot;值&quot;&gt;&lt;/constructor-arg&gt;</code></p>
<p><code>&lt;constructor-arg index=&quot;变量编号&quot; value=&quot;值&quot;&gt;&lt;/constructor-arg&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//（1）传统方式：创建类，构建有参函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//有参数构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">(String oname, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.oname = oname;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--（2）spring方式：有参数构造注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给oname变量赋值为Hello address变量赋值为China! --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China!&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 和上面的效果一样，给第一个参数赋值Hello，给第二个参数赋值China! --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China!&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="基于xml配置文件-注入属性-p名称空间注入"><a class="markdownIt-Anchor" href="#基于xml配置文件-注入属性-p名称空间注入"></a> 基于XML配置文件 - 注入属性 - p名称空间注入 💤</h4>
<p><strong>注意</strong>：需要先添加p名称空间在配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1、添加xmlns:p --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--2、在bean标签进行属性注入（算是set方式注入的简化操作）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Book&quot;</span> <span class="attr">p:bname</span>=<span class="string">&quot;very&quot;</span> <span class="attr">p:bauthor</span>=<span class="string">&quot;good&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="基于xml配置文件-注入空值和特殊符号"><a class="markdownIt-Anchor" href="#基于xml配置文件-注入空值和特殊符号"></a> 基于XML配置文件 - 注入空值和特殊符号</h4>
<p>可以借助<code>&lt;![CDATA[ ]]&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--（1）null值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span>  <span class="comment">&lt;!-- 属性里边添加一个null标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--（2）特殊符号赋值 --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 属性值包含特殊符号</span></span><br><span class="line"><span class="comment">       a 把&lt;&gt;进行转义 &amp;lt; &amp;gt;</span></span><br><span class="line"><span class="comment">       b 把带特殊符号内容写到CDATA</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="基于xml配置文件-注入属性-外部bean"><a class="markdownIt-Anchor" href="#基于xml配置文件-注入属性-外部bean"></a> 基于XML配置文件 - 注入属性 - 外部Bean</h4>
<p>创建两个类<code>Service</code>类和<code>Dao</code>类，在<code>Service</code>调用<code>Dao</code>里的方法。</p>
<p>创建<code>userDao</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// userDao.java</span></span><br><span class="line"><span class="keyword">package</span> com.xzt.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>创建<code>userDaoImpl</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserDaoImpl.java</span></span><br><span class="line"><span class="keyword">package</span> com.xzt.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao update .....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<code>userService</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserService.java</span></span><br><span class="line"><span class="keyword">package</span> com.xzt.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xzt.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.xzt.dao.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建UserDao属性，生成set方法</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 传统方式</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        userDao.update();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<code>bean2.xml</code>进行属性注入（使用set方法进行注入）</p>
<ul>
<li><code>name</code>属性值: 类里面属性的名字，就是 <code>private UserDao userDao</code> 里面的userDao;</li>
<li><code>ref</code>属性值: 创建<code>userDao</code>对象bean标签的id值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.service和dao对象创建   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.service.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            注入userDao对象</span></span><br><span class="line"><span class="comment">            name属性值: 类里面属性的名字 private UserDao userDao;</span></span><br><span class="line"><span class="comment">            ref属性值: 创建userDao对象bean标签的id值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="基于xml配置文件-注入属性-内部bean"><a class="markdownIt-Anchor" href="#基于xml配置文件-注入属性-内部bean"></a> 基于XML配置文件 - 注入属性 - 内部Bean</h4>
<p><strong>作用</strong>：一对多关系：部门和员工，一个部门和多个员工。一个员工属于一个部门。在实体类之间表示一对多的关系。</p>
<p>部门类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 部门类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDname</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>员工类，需要定义一个部门对象，表示该员工所属的部门。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">// 员工属于某一个部门，定义一个部门对象</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>分别用 <em>外部 bean</em> 和 <em>内部 bean</em> 实现了配置，两种方式选择一种就可以</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 外部bean写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.bean.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 内部bean写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安保部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="基于xml配置文件-注入属性-级联赋值"><a class="markdownIt-Anchor" href="#基于xml配置文件-注入属性-级联赋值"></a> 基于XML配置文件 - 注入属性 - 级联赋值</h4>
<p>同时向有关联的类注入值。上面的<code>内部bean</code>也可以实现这种效果</p>
<p>示例代码：修改上面的<code>xml</code>文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一种写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 级联赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安保部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   	<span class="comment">&lt;!-- 第二种写法，需要生成对应的get方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 级联赋值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安保部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 需要生成dept的get方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="基于xml配置文件-注入集合属性-数组"><a class="markdownIt-Anchor" href="#基于xml配置文件-注入集合属性-数组"></a> 基于XML配置文件 - 注入集合属性-数组</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数组类型注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>java课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据库课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="基于xml配置文件-注入集合属性-list"><a class="markdownIt-Anchor" href="#基于xml配置文件-注入集合属性-list"></a> 基于XML配置文件 - 注入集合属性 - List⭐</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- list类型注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>里斯<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- list类型注入 并且是对象类型的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cousers&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建多个course对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Couser&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Math&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Couser&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Couser&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MySql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>把集合注入部分提取出来</strong></p>
<ul>
<li>引入名称空间（类似p名称空间）<code>util</code></li>
<li>创建<code>&lt;util:list id=&quot;id值&quot;&gt; &lt;/util:list&gt;</code></li>
</ul>
<p>示例代码：和上面的效果一样</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.引入util命名空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.提取list集合类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;stringList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.提取list集合类型属性注入使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;string&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;stringList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ----------------------------------------------- --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;string&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 创建多个course对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Couser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Math&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Couser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Couser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MySql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="基于xml配置文件-注入集合属性-map"><a class="markdownIt-Anchor" href="#基于xml配置文件-注入集合属性-map"></a> 基于XML配置文件 - 注入集合属性 - Map</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- map类型注入 key-value --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="基于xml配置文件-注入集合属性-set"><a class="markdownIt-Anchor" href="#基于xml配置文件-注入集合属性-set"></a> 基于XML配置文件 - 注入集合属性 - Set</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- set类型注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>示例代码</strong></p>
<p>编写<code>stu</code>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.collectiontype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="comment">// 数组类型属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; maps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Couser&gt; cousers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCousers</span><span class="params">(List&lt;Couser&gt; cousers)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cousers = cousers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourses</span><span class="params">(String[] courses)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写<code>Course</code>课程类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.collectiontype;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Couser</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCname</span><span class="params">(String cname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cname = cname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写<code>bean.xml</code>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数组类型注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>java课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据库课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- list类型注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>里斯<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- map类型注入 key-value --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- set类型注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- list类型注入 并且是对象类型的值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cousers&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建多个course对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Couser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Math&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Couser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Couser&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MySql&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="工厂bean-factorybean"><a class="markdownIt-Anchor" href="#工厂bean-factorybean"></a> 工厂bean (<code>FactoryBean</code>)</h3>
<blockquote>
<p>普通bean：在配置文件中定义的bean类型就是返回类型。上面所有的都是普通bean。</p>
<p>工厂bean：在配置文件中定义的bean类型可以和返回类型不一样。</p>
</blockquote>
<ul>
<li>创建类，让这个类定义为工厂类，通过实现接口<code>FactoryBean</code></li>
<li>实现接口里面的方法，在实现的方法中定义返回的 bean 类型</li>
</ul>
<p>创建工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.factorybean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xzt.collectiontype.Couser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义返回bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Couser</span> <span class="variable">couser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Couser</span>();</span><br><span class="line">        <span class="keyword">return</span> couser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FactoryBean.<span class="built_in">super</span>.isSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.引入util命名空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.factorybean.MyBean&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 定义的类型为 MyBean类型 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>编写测试类。返回类型为Course</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line">        <span class="type">Couser</span> <span class="variable">couser</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;myBean&quot;</span>, Couser.class);<span class="comment">// bean的定义类型和返回类型不一样</span></span><br><span class="line">        System.out.println(couser);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="bean的作用域"><a class="markdownIt-Anchor" href="#bean的作用域"></a> Bean的作用域</h2>
<blockquote>
<p>在 spring 配置文件 bean 标签里面有属性（scope）用于设置单实例还是多实例</p>
<p>在 Spring 里面，**默认情况 **下 bean 是 <strong>单实例对象</strong> ，下面进行作用域设置</p>
</blockquote>
<p>单实例是指一直都是同一个对象，多实例是指创建一次就是一个新的对象。</p>
<p><strong>设置单实例 / 多实例</strong></p>
<p>通过属性<code>scope</code>设置是单实例还是多实例。</p>
<p><code>scope</code> 属性值</p>
<ul>
<li><code>singleton</code> 默认值，表示单实例对象。<strong>在加载spring配置文件时就会创建单实例对象</strong></li>
<li><code>prototype</code> 表示多实例对象。<strong>不是在加载spring配置文件时创建单实例对象，是在使用<code>getBean()</code>方法时创建多实例。</strong></li>
<li><code>request</code></li>
<li><code>session</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.collectiontype.Couser&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Math&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="bean的生命周期"><a class="markdownIt-Anchor" href="#bean的生命周期"></a> Bean的生命周期</h2>
<blockquote>
<p>生命周期是一个对象从创建到销毁的过程。</p>
</blockquote>
<h3 id="bean的生命周期-2"><a class="markdownIt-Anchor" href="#bean的生命周期-2"></a> Bean的生命周期</h3>
<ol>
<li>通过构造器创建Bean实例（无参构造）</li>
<li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li>
<li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li>
<li>bean 可以使用了（对象获取到了）</li>
<li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li>
</ol>
<p>实例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tracing.dtrace.ArgsAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步 执行无参构造创建实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOname</span><span class="params">(String oname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.oname = oname;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步 调用set方法设置值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建执行初始化的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步 执行初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建执行销毁的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initDestory</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第五步 执行销毁的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean4.xml&quot;</span>);</span><br><span class="line">        <span class="type">Orders</span> <span class="variable">order</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;order&quot;</span>, Orders.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;第四步 获取创建bean实例对象&quot;</span>);</span><br><span class="line">        System.out.println(order);</span><br><span class="line"></span><br><span class="line">        ((ClassPathXmlApplicationContext) context).close(); <span class="comment">// 手动销毁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- init-method: 初始化方法是调用  destroy-method:销毁方法时调用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;order&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.bean.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;initDestory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/06Spring/image-20220926212401428.png" alt="image-20220926212401428" /></p>
<h3 id="bean-的后置处理器"><a class="markdownIt-Anchor" href="#bean-的后置处理器"></a> Bean 的后置处理器</h3>
<p>bean 生命周期有七步 （正常生命周期为五步，而配置后置处理器后为七步）</p>
<ol>
<li>通过构造器创建 bean 实例（无参数构造）</li>
<li>为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）</li>
<li>把 bean 实例传递 bean 后置处理器的方法 <code>postProcessBeforeInitialization</code> 💡</li>
<li>调用 bean 的初始化的方法（需要进行配置初始化的方法）</li>
<li>把 bean 实例传递 bean 后置处理器的方法 <code>postProcessAfterInitialization</code> 💡</li>
<li>bean 可以使用了（对象获取到了）</li>
<li>当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</li>
</ol>
<p>后置处理器的实现方法：创建一个类<code>MyBeanPost</code>，实现一个接口 <code>BeanPostProcessor</code>。并且在xml中配置后置处理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.bean.MyBeanPost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置后置处理器，会对当前xml文件中的所有配置都添加上后置处理器 --&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="bean管理"><a class="markdownIt-Anchor" href="#bean管理"></a> Bean管理</h2>
<h3 id="xml自动装配"><a class="markdownIt-Anchor" href="#xml自动装配"></a> XML自动装配</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.autowire;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.autowire;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;dept=&quot;</span> + dept +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 手动装配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.autowire.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>bean标签属性<code>autowire</code> 用来配置自动装配。<code>autowire</code>属性有两个值：</p>
<ul>
<li><code>byName</code> 根据属性名称注入。需要注入bean的id值和类对象名称一样。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实现自动装配-byName --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里的id值必须和Emp类中的Dept对象名称相同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><code>byType</code> 根据类型属性注入。存在缺陷，相同的类不能创建多个。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实现自动装配-byType --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xzt.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="引入外部属性文件"><a class="markdownIt-Anchor" href="#引入外部属性文件"></a> 引入外部属性文件</h3>
<h4 id="直接配置数据库信息"><a class="markdownIt-Anchor" href="#直接配置数据库信息"></a> 直接配置数据库信息</h4>
<ol>
<li>配置Druid（德鲁伊）连接池</li>
<li>引入Druid（德鲁伊）连接池依赖 jar 包</li>
</ol>
<p>配置Druid（德鲁伊）连接池</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="引入外部属性文件配置数据库连接池"><a class="markdownIt-Anchor" href="#引入外部属性文件配置数据库连接池"></a> 引入外部属性文件配置数据库连接池⭐⭐</h4>
<ol>
<li>创建外部属性文件，<code>properties</code> 格式文件，写数据库信息（<strong>jdbc.properties</strong>）</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jdbc.properties</span></span><br><span class="line"><span class="attr">prop.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">prop.url</span>=<span class="string">jdbc:mysql://localhost:3306/userDb</span></span><br><span class="line"><span class="attr">prop.userName</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">prop.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>把外部 properties 属性文件引入到 spring 配置文件中 —— 引入 context 名称空间</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入context名称空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部属性文件配置连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="基于注解方式引入对象"><a class="markdownIt-Anchor" href="#基于注解方式引入对象"></a> 基于注解方式引入对象</h3>
<blockquote>
<p>注解：是代码特殊标记，格式：<code>@注解名称(属性名称=属性值, 属性名称=属性值)</code></p>
</blockquote>
<p><strong>作用位置</strong>：注解可以作用在类上、方法上、属性上面。</p>
<p><strong>目的</strong>：简化xml配置</p>
<p><strong>spring针对Bean管理中创建对象提供注解</strong></p>
<ul>
<li><code>@Component</code> 普通注解</li>
<li><code>@Service</code> 用在业务逻辑层</li>
<li><code>@Controller</code> 用在Web层</li>
<li><code>@Repository</code> 用在Dao层</li>
</ul>
<p>上面的四个注解，功能相同，都可以用来创建Bean实例。</p>
<h4 id="基于注解方式实现对象创建步骤"><a class="markdownIt-Anchor" href="#基于注解方式实现对象创建步骤"></a> <strong>基于注解方式实现对象创建步骤</strong>⭐⭐</h4>
<ol>
<li>
<p>引入AOP依赖<code>spring-aop-5.3.23.jar</code></p>
</li>
<li>
<p>开启组件扫描。在配置文件中引入名称空间<code>context</code>，然后编写配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入context名称空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 开启组件扫描,两种写法</span></span><br><span class="line"><span class="comment">		1.如果扫描多个包，多个包使用逗号隔开</span></span><br><span class="line"><span class="comment">		2.扫描包上层目录</span></span><br><span class="line"><span class="comment"> 	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xzt.dao, com.xzt.service, com.xzt.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xzt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建类，在类上面添加创建对象注释。</p>
<p>加四个注解中的其中任何一个都可以。并且其中 value属性值可以不写。默认就是类名称首字母小写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 用注解方式创建对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 加四个注解中的其中任何一个都可以，</span></span><br><span class="line"><span class="comment">// value属性值可以不写。默认就是类名称首字母小写。</span></span><br><span class="line"><span class="meta">@Service(value = &quot;userService&quot;)</span> <span class="comment">// &lt;bean id=&quot;userService&quot; class=&quot;...&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servcie add....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);  <span class="comment">// 引入配置文件，</span></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);  <span class="comment">// 创建对象</span></span><br><span class="line">    System.out.println(userService);</span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>开启组件扫描配置细节</strong></p>
<ul>
<li><code>use-default-filters=&quot;false&quot;</code> 表示现在不使用默认 filter，自己配置 filter。<code>context:include-filter</code> 标签设置扫描哪些内容</li>
<li><code>context:exclude-filter</code> 标签设置哪些注解不扫描。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例 1</span></span><br><span class="line"><span class="comment">     use-default-filters=&quot;false&quot; 表示现在不使用默认 filter，自己配置 filter</span></span><br><span class="line"><span class="comment">     context:include-filter ，设置扫描哪些内容</span></span><br><span class="line"><span class="comment">		type=&quot;annotation&quot; 根据注解进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span> <span class="attr">use-defaultfilters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span> <span class="comment">&lt;!--代表只扫描Controller注解的类--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--示例 2</span></span><br><span class="line"><span class="comment">     下面配置扫描包所有内容</span></span><br><span class="line"><span class="comment">     context:exclude-filter： 设置哪些内容不进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--表示Controller注解的类之外一切都进行扫描--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="基于注解方式实现属性注入"><a class="markdownIt-Anchor" href="#基于注解方式实现属性注入"></a> 基于注解方式实现属性注入</h4>
<p><strong>常用于属性注入的注解</strong></p>
<ul>
<li><code>@AutoWired</code> 根据属性类型进入自动注入</li>
<li><code>@Qualifier(value=&quot;名称&quot;)</code> 根据属性名称进行注入。需要和<code>@AutoWired</code>一起使用</li>
<li><code>@Resource</code> 可以根据类型注入<code>@Resource</code>，也可以根据名称注入 <code>@Resource(name=&quot;名称&quot;)</code>，不建议用</li>
<li><code>@Value(value = &quot;值&quot;)</code> 注入普通类型属性。</li>
</ul>
<p><strong>基于注解属性注入步骤</strong> ⭐⭐</p>
<ol>
<li>
<p>把 servcie 和 dao 对象创建，在 service 和 dao 类添加创建对象注释。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository(value = &quot;userDaoImpl1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao add......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 service 里注入 dao 对象，在 service 类添加 dao 类型属性。在属性上面使用注解。不需要加set方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xzt.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 用注解方式创建对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 加四个注解中的其中任何一个都可以，</span></span><br><span class="line"><span class="comment">// value属性值可以不写。默认就是类名称首字母小写。</span></span><br><span class="line"><span class="meta">@Service(value = &quot;userService&quot;)</span> <span class="comment">// &lt;bean id=&quot;userService&quot; class=&quot;...&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义dao类型属性</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span>  <span class="comment">// 和@Repository(value = &quot;userDaoImpl1&quot;)这里的对应</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servcie add....&quot;</span>);</span><br><span class="line">        userDao.add();  <span class="comment">// 调用dao里的add方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="纯注解开发"><a class="markdownIt-Anchor" href="#纯注解开发"></a> 纯注解开发</h4>
<p><strong>步骤</strong></p>
<ol>
<li>
<p>创建配置类<code>SpringConfig.java</code>，替代<code>xml</code>配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 把当前类作为配置类，用这个类替代xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.xzt&quot;&#125;)</span>  <span class="comment">// 包扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>加载配置类的方式需要改变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);  // 根据xml配置文件加载</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);  <span class="comment">// 根据配置类加载</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段3</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 企业开发基础 Spring5-JDBCTemplate</title>
    <url>/2022/09/27/JAVA/08Spring5_JdbcTemplate/</url>
    <content><![CDATA[<h2 id="jdbctemplate概述"><a class="markdownIt-Anchor" href="#jdbctemplate概述"></a> JdbcTemplate概述</h2>
<blockquote>
<p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p>
</blockquote>
<h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2>
<ol>
<li>
<p>导入jar包 <code>druid-1.1.9.jar</code>、<code>mysql-connector-java-8.0.29.jar</code> 这个需要根据自己安装的MySQL版本选择不同版本的jar包、<code>spring-jdbc-5.3.23.jar</code>、<code>spring-tx-5.3.23.jar</code>、<code>spring-orm-5.3.23.jar</code></p>
<p><img src="/img/Java/08Spring5_JdbcTemplate/image-20220928092901445.png" alt="image-20220928092901445" /></p>
</li>
<li>
<p>在 spring 配置文件中配置连接池</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">prop.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">prop.url</span>=<span class="string">jdbc:mysql://localhost:3306/userDb</span></span><br><span class="line"><span class="attr">prop.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">prop.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入context名称空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部属性文件配置连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置 JdbcTemplate对象，注入 DataSource</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建JdbcTemplate对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dataSource数据源信息，使用set方法注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象</p>
<ol>
<li>
<p>开启组件扫描，目的是可以使用注解注入对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启组件扫描，可以使用注解注入对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xzt.spring5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建 dao 注入 JdbcTemplate 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入jdbcTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建 service 类，注入dao对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h2 id="jdbctemplate数据库操作"><a class="markdownIt-Anchor" href="#jdbctemplate数据库操作"></a> JdbcTemplate数据库操作</h2>
<p><img src="/img/Java/08Spring5_JdbcTemplate/image-20220928102201600.png" alt="image-20220928102201600" /></p>
<h3 id="添加功能"><a class="markdownIt-Anchor" href="#添加功能"></a> 添加功能</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段<span class="number">1</span>, 字段<span class="number">2</span>, ...) <span class="keyword">values</span>(值, 值, ....);</span><br></pre></td></tr></table></figure>
<p><strong>实现步骤</strong></p>
<ol>
<li>
<p>添加数据库表对应的实体类</p>
</li>
<li>
<p>编写 service 和 dao，在dao里面实现数据库添加操作。调用 JdbcTemplate 对象中的 <code>update</code>方法实现添加操作。</p>
<ol>
<li>第一个参数：sql语句</li>
<li>第二个参数：可变参数，设置sql语句值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入jdbcTemplate对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book values(?, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="comment">// 调用方法实现。</span></span><br><span class="line">        Object[] args = &#123;book.getBookId(), book.getBookusername(), book.getBstatus()&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, args);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDemo01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建bookService对象</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;bookService&quot;</span>, BookService.class);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 调用方法</span></span><br><span class="line">    bookService.addBook(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>, <span class="string">&quot;Spring5&quot;</span>, <span class="string">&quot;Y&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="修改和删除功能"><a class="markdownIt-Anchor" href="#修改和删除功能"></a> 修改和删除功能</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="number">1</span> <span class="operator">=</span> 值, 字段<span class="number">2</span> <span class="operator">=</span> 值 <span class="keyword">where</span> 字段<span class="number">3</span> <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段 <span class="operator">=</span> 值;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBook</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set bookname = ?, bstatus = ? where book_id = ?&quot;</span>;</span><br><span class="line">    Object[] args = &#123;book.getBookname(), book.getBstatus(), book.getBookId()&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, args);</span><br><span class="line">    System.out.println(update);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBook</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_book where book_id = ?&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, bookId);</span><br><span class="line">    System.out.println(update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查询功能"><a class="markdownIt-Anchor" href="#查询功能"></a> 查询功能</h3>
<h4 id="查询返回某个值"><a class="markdownIt-Anchor" href="#查询返回某个值"></a> 查询返回某个值</h4>
<p>使用<code>queryForObject</code>函数：</p>
<ul>
<li>第一个参数：sql 语句</li>
<li>第二个参数：<code>返回类型.class</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询表记录数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from t_book&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="查询返回对象"><a class="markdownIt-Anchor" href="#查询返回对象"></a> 查询返回对象</h4>
<p>使用<code>queryForObject</code>方法，有三个参数</p>
<ul>
<li>第一个参数：sql 语句</li>
<li>第二个参数：<code>RowMapper</code>，是接口，返回不同类型的数据，使用这个接口里面实现类<code>BeanPropertyRowMapper</code>完成数据封装。</li>
<li>第三个参数：返回值的数据类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询返回对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">getOneBook</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_book where book_id = ?&quot;</span>;</span><br><span class="line">    Object[] args = &#123;bookId&#125;;</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class), bookId);</span><br><span class="line">    <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="查询返回集合"><a class="markdownIt-Anchor" href="#查询返回集合"></a> 查询返回集合</h4>
<p>使用<code>queryForList</code>方法。有三个参数：</p>
<ul>
<li>第一个参数：sql 语句</li>
<li>第二个参数：<code>RowMapper</code>，是接口，返回不同类型的数据，使用这个接口里面实现类<code>BeanPropertyRowMapper</code>完成数据封装。</li>
<li>第三个参数：返回值的数据类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询集合列表</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAllBook</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_book&quot;</span>;</span><br><span class="line">    List&lt;Book&gt; bookList = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Book&gt;(Book.class));</span><br><span class="line">    <span class="keyword">return</span> books;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="批量添加修改删除"><a class="markdownIt-Anchor" href="#批量添加修改删除"></a> 批量添加/修改/删除</h4>
<p>操作表里的多条记录。使用 JdbcTemplate 中的 <code>batchUpdate</code> 方法，有两个参数：</p>
<ul>
<li>第一个参数：sql语句</li>
<li>第二个参数：<code>List&lt;Object[]&gt;</code> list集合，添加多条数据记录。</li>
</ul>
<p><strong>底层原理</strong>：遍历 list 集合，对每个数组值进行 sql 操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量添加</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchAdd</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_book values(?, ?, ?)&quot;</span>;</span><br><span class="line">    <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">    System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量修改</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batcUpdate</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;  <span class="comment">// 需要注意数组里面参数的顺序。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set bookname = ?, bstatus = ? where book_id = ?&quot;</span>;</span><br><span class="line">    <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">    System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batcDelete</span><span class="params">(List&lt;Object[]&gt; batchArgs)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_book where book_id = ?&quot;</span>;</span><br><span class="line">    <span class="type">int</span>[] ints = jdbcTemplate.batchUpdate(sql, batchArgs);</span><br><span class="line">    System.out.println(Arrays.toString(ints));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段3</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 企业开发基础 Spring5-Affair</title>
    <url>/2022/09/28/JAVA/09Spring5_Affair/</url>
    <content><![CDATA[<h1 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务</h1>
<blockquote>
<p>事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操 作都失败</p>
<p>典型场景：银行转账 张三 转账 100 元 给 李四； 张三少 100，李四多 100</p>
</blockquote>
<p><strong>事务四个特性</strong>（ACID）<a href="http://atopos-blog.cn/2022/06/06/JAVA/04JavaMySQL/">参考文章</a></p>
<ul>
<li>原子性、一致性、隔离性、持久性</li>
</ul>
<h1 id="事务操作搭建事务操作环境"><a class="markdownIt-Anchor" href="#事务操作搭建事务操作环境"></a> 事务操作（搭建事务操作环境）</h1>
<p><img src="/img/Java/09Spring5_Affair/image-20220928152656919.png" alt="image-20220928152656919" /></p>
<ol>
<li>
<p>创建 service ，搭建 dao，完成对象创建和注入关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 dao 创建两个方法：多钱和少钱的方法， 在 service 创建方法（转账的方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMony</span><span class="params">(Integer money, String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_account set money = money + ? where username = ?&quot;</span>;</span><br><span class="line">        Object[] args = &#123;money, name&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, args);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 少钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduceMoney</span><span class="params">(Integer money, String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_account set money = money - ? where username = ?&quot;</span>;</span><br><span class="line">        Object[] args = &#123;money, name&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> jdbcTemplate.update(sql, args);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转账的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// lucy 少100</span></span><br><span class="line">        accountDao.reduceMoney(<span class="number">100</span>, <span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        <span class="comment">// mary 加100</span></span><br><span class="line">        accountDao.addMony(<span class="number">100</span>, <span class="string">&quot;mary&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>上面的代码正常执行没有问题，但是如果代码执行过程中出现异常，有问题，可能会出现 lucy 少了100 但是 mary没有加100。</p>
<p>解决步骤：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转账的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accountMoney</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1.开启事务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.进行业务操作</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// lucy 少100</span></span><br><span class="line">        accountDao.reduceMoney(<span class="number">100</span>, <span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        <span class="comment">// mary 加100</span></span><br><span class="line">        accountDao.addMony(<span class="number">100</span>, <span class="string">&quot;mary&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.没有发生异常，提交事务</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 4.出现异常，回滚事务</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="事务操作"><a class="markdownIt-Anchor" href="#事务操作"></a> 事务操作</h1>
<ul>
<li>事务添加到 JavaEE 三层结构里面 Service 层（业务逻辑层）</li>
<li>在 Spring 进行事务管理操作 ；两种方式：<strong>编程式事务管理</strong>、<strong>声明式事务管理</strong>（推荐使用）</li>
<li>声明式事务管理
<ul>
<li>基于注解方式（推荐使用）</li>
<li>基于 xml 配置文件方式</li>
</ul>
</li>
<li>在 Spring 进行声明式事务管理， <strong>底层使用 AOP 原理</strong></li>
<li>Spring 事务管理 API ：提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</li>
</ul>
<h2 id="注解声明式事务管理"><a class="markdownIt-Anchor" href="#注解声明式事务管理"></a> 注解声明式事务管理⭐</h2>
<ol>
<li>
<p>在spring配置文件配置事务管理器。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span> = <span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 spring 配置文件中引入名称空间<code>xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</code>，开启事务注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启事务注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 service 类上（或者色如此vice类里面方法上）添加事务注解。</p>
<ul>
<li><code>@Transactional</code>添加在类上面，则表示这个类上的所有方法都添加了事务。</li>
<li><code>@Transactional</code>添加在类里的方法上，则表示为这个方法添加事务。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>  <span class="comment">// 事务注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> &#123;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>以上就完成了基于注解声明式事务管理。</p>
<h2 id="声明式事务管理的参数配置"><a class="markdownIt-Anchor" href="#声明式事务管理的参数配置"></a> 声明式事务管理的参数配置</h2>
<h3 id="propagation-事务传播行为"><a class="markdownIt-Anchor" href="#propagation-事务传播行为"></a> <code>propagation</code> 事务传播行为</h3>
<blockquote>
<p>多事务方法直接进行调用，这个过程中事务 是如何进行管理的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 事务1</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span>  <span class="comment">// 设置传播行为</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 调用update 方法</span></span><br><span class="line">    update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务2</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spring框架事务传播行为有七种：下面只介绍常用的两种传播行为</p>
<ul>
<li><code>REQUIRED</code>：如果有事务在运行，当前的方法就是在这个事务内运行，否则就会启动一个新的事务，并在自己的事务内运行。</li>
<li><code>REQUIRED_NEW</code>：当前的方法必须启动新事务，并在它自己的事务内运行，如果有事务正在运行，应该将他挂起。</li>
<li><code>SUPPORT</code>：如果有事务在运行，当前的方法就在这个事务内运行，否则它可以不运行在事务中。</li>
</ul>
<h3 id="ioslation-事务隔离级别"><a class="markdownIt-Anchor" href="#ioslation-事务隔离级别"></a> <code>ioslation</code> 事务隔离级别</h3>
<blockquote>
<p>事务有特性称为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题。</p>
<p>有三个读问题：脏读、不可重复读、虚（幻）读。 <a href="http://atopos-blog.cn/2022/06/06/JAVA/04JavaMySQL/">参考文章</a></p>
</blockquote>
<ul>
<li>脏读： 一个未提交事务读取到另一个未提交事务的数据。</li>
<li>不可重复读： 一个未提交事务读取到另一提交事务中修改的数据。</li>
<li>虚读： 一个未提交事务读取到另一提交事务添加数据。</li>
</ul>
<p>解决：通过设置事务隔离级别，解决三个读问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.REPEATABLE_READ)</span></span><br></pre></td></tr></table></figure>
<p>事务的隔离级别：（和MySQL数据库中的隔离级别完全对应，在MySQL中默认是<code>REPEATABLE_READ</code>）</p>
<p><img src="/img/Java/09Spring5_Affair/image-20220928192706131.png" alt="image-20220928192706131" /></p>
<h3 id="timeout超时时间"><a class="markdownIt-Anchor" href="#timeout超时时间"></a> <code>timeOut</code>超时时间</h3>
<ul>
<li>事务需要在一定时间内进行提交，如果不提交进行回滚</li>
<li>默认值是 -1（不超时），设置时间以秒单位进行计算。</li>
</ul>
<h3 id="readonly-是否只读查询"><a class="markdownIt-Anchor" href="#readonly-是否只读查询"></a> <code>readOnly</code> 是否只读(查询)</h3>
<ul>
<li>读：查询操作，写：添加修改删除操作</li>
<li>readOnly 默认值 false，表示可以查询，可以添加修改删除操作</li>
<li>设置 readOnly 值是 true，设置成 true 之后，只能查询</li>
</ul>
<h3 id="rollbackfor回滚"><a class="markdownIt-Anchor" href="#rollbackfor回滚"></a> <code>rollbackFor</code>回滚</h3>
<p>设置出现哪些异常进行事务回滚</p>
<h3 id="norollbackfor不回滚"><a class="markdownIt-Anchor" href="#norollbackfor不回滚"></a> <code>noRollbackFor</code>不回滚</h3>
<p>设置出现哪些异常不进行事务回滚</p>
<h2 id="xml声明式事务管理"><a class="markdownIt-Anchor" href="#xml声明式事务管理"></a> XML声明式事务管理</h2>
<ul>
<li>
<p>在 spring 配置文件中进行配置 ：</p>
<ol>
<li>
<p>第一步 配置事务管理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span> = <span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>第二步 配置通知</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.配置通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定哪种规则的方法上面添加事务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span>/&gt;</span>  <span class="comment">&lt;!-- 表示在accountMoney方法上面添加事务 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span> <span class="comment">&lt;!-- 这种写法也可以 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>第三步 配置切入点和切面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.配置切入点和切面,需要引入名称空间aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xzt.springaffair.service.AccountService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span> <span class="comment">&lt;!-- 将txadvice的事务作用与pt方法上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>完整配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入context名称空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启组件扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xzt.springaffair&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部属性文件配置连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建JdbcTemplate对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据源信息，使用set方法注入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span> = <span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 开启事务注解,使用注解进行事务管理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt;  --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.配置通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定哪种规则的方法上面添加事务 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span>/&gt;</span>  <span class="comment">&lt;!-- 表示在accountMoney方法上面添加事务 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置切入点和切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xzt.springaffair.service.AccountService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span> <span class="comment">&lt;!-- 将txadvice的事务作用与pt方法上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="完全注解声明式事务管理"><a class="markdownIt-Anchor" href="#完全注解声明式事务管理"></a> 完全注解声明式事务管理⭐</h2>
<p>创建配置类 <code>config.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.springaffair.config;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line">  <span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Configuration</span>  <span class="comment">// 配置类</span></span><br><span class="line">  <span class="meta">@ComponentScan(basePackages = &quot;com.xzt&quot;)</span>  <span class="comment">// 开启组件扫描</span></span><br><span class="line">  <span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span>  <span class="comment">// 生成AspectJ 代理对象 AOP</span></span><br><span class="line">  <span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启事务</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 创建数据库连接池</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span> DruidDataSource <span class="title function_">getDruidDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">          dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">          dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/user_db&quot;</span>);</span><br><span class="line">          dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">          dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> dataSource;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 创建JdbcTemplate模板对象</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">          <span class="comment">// 到IOC容器中，根据类型找到dataSource</span></span><br><span class="line">          <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">  </span><br><span class="line">          <span class="comment">// 注入DataSource</span></span><br><span class="line">          jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">          <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 创建事务管理器对象</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">          <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">          transactionManager.setDataSource(dataSource);</span><br><span class="line">          <span class="keyword">return</span> transactionManager;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Config.class);</span><br><span class="line">    <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;accountService&quot;</span>, AccountService.class); <span class="comment">// 根据配置文件获取context</span></span><br><span class="line">    accountService.accountMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段3</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 企业开发基础 Spring5-新功能</title>
    <url>/2022/09/29/JAVA/10Spring5_NewFunc/</url>
    <content><![CDATA[<h2 id="spring5-框架新功能"><a class="markdownIt-Anchor" href="#spring5-框架新功能"></a> Spring5 框架新功能</h2>
<blockquote>
<p>整个 Spring5 框架的代码基于 Java8，运行时兼容 JDK9，许多不建议使用的类和方法在代码库中删除了。</p>
</blockquote>
<h2 id="spring-5-框架自带了通用的日志封装"><a class="markdownIt-Anchor" href="#spring-5-框架自带了通用的日志封装"></a> Spring 5 框架自带了通用的日志封装</h2>
<ul>
<li>Spring5 已经移除 <code>Log4jConfigListener</code>，官方建议使用 <code>Log4j2</code></li>
<li>Spring5 框架整合 <code>Log4j2</code></li>
</ul>
<p>整合 <code>log4j2</code> 步骤</p>
<ol>
<li>
<p>引入 jar 包 : <code>log4j-api-2.11.2.jar</code> 、<code>log4j-core-2.11.2.jar</code> 、<code>log4j-slf4j-impl-2.11.2.jar</code> 、<code>slf4j-api-1.7.30.jar</code></p>
</li>
<li>
<p>创建 <code>log4j2.xml</code> (名字固定，不可变)配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--root：用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>运行时会输出对应的日志信息</p>
<p><img src="10Spring5_NewFunc/image-20220928203316265.png" alt="image-20220928203316265" /></p>
<p>示例代码：手动输出日志信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(UserLog.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;hello log4j2&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;hello log4j2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<p><img src="10Spring5_NewFunc/image-20220928203743366.png" alt="image-20220928203743366" /></p>
<h2 id="spring5-框架核心容器支持nullable-注解"><a class="markdownIt-Anchor" href="#spring5-框架核心容器支持nullable-注解"></a> Spring5 框架核心容器支持@Nullable 注解</h2>
<p><code>@Nullable</code> 注解可以使用在方法、属性、参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空</p>
<h2 id="spring5-核心容器支持函数式风格"><a class="markdownIt-Anchor" href="#spring5-核心容器支持函数式风格"></a> Spring5 核心容器支持函数式风格</h2>
<p><code>GenericApplicationContext</code> 支持 lambda 表达式相关操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数式风格创建对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGenericApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.创建 GenericApplicationContext 对象</span></span><br><span class="line">    <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericGroovyApplicationContext</span>();</span><br><span class="line">    <span class="comment">// 2.调用context的方法进行对象注册</span></span><br><span class="line">    context.refresh();</span><br><span class="line">    context.registerBean(<span class="string">&quot;account&quot;</span>, Account.class, () -&gt; <span class="keyword">new</span> <span class="title class_">Account</span>()); <span class="comment">// &quot;account&quot;对象名可以省略，</span></span><br><span class="line">    <span class="comment">// 3.获取 spring 注册的对象</span></span><br><span class="line">    <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> (Account) context.getBean(<span class="string">&quot;account&quot;</span>);</span><br><span class="line">    <span class="comment">//        Account account = (Account) context.getBean(&quot;com.xzt.springaffair.entity.Account&quot;); // 如果上面没有指定对象名，需要这样创建</span></span><br><span class="line">    System.out.println(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="spring5-支持整合-junit5"><a class="markdownIt-Anchor" href="#spring5-支持整合-junit5"></a> Spring5 支持整合 JUnit5</h2>
<h3 id="整合-junit4"><a class="markdownIt-Anchor" href="#整合-junit4"></a> 整合 JUnit4</h3>
<p><img src="10Spring5_NewFunc/image-20220928213934627.png" alt="image-20220928213934627" /></p>
<ol>
<li>引入 spring 相关测试的依赖 <code>spring-test-5.3.23.jar</code></li>
<li>创建测试类，引用注解方法方式完成</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span>  <span class="comment">// 单元测试框架</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span> <span class="comment">// 加载配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JTest4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        accountService.accountMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整合-junit5"><a class="markdownIt-Anchor" href="#整合-junit5"></a> 整合 JUnit5</h3>
<ol>
<li>
<p>需要引入 JUnit5 jar包</p>
<p><img src="10Spring5_NewFunc/image-20220928214113055.png" alt="image-20220928214113055" /></p>
</li>
<li>
<p>创建测试类，使用注解实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 写法1</span><br><span class="line">//@ExtendWith(SpringExtension.class)</span><br><span class="line">//@ContextConfiguration(&quot;classpath:bean1.xml&quot;)</span><br><span class="line"></span><br><span class="line">// 写法2 符合注解</span><br><span class="line">@SpringJUnitConfig(locations = &quot;classpath:bean1.xml&quot;)</span><br><span class="line">public class JTest5 &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountService accountService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test1() &#123;</span><br><span class="line">        accountService.accountMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="spring5-框架新功能-springwebflux"><a class="markdownIt-Anchor" href="#spring5-框架新功能-springwebflux"></a> Spring5 框架新功能 - SpringWebflux</h2>
<blockquote>
<p>Webflux是 Spring5 添加新的模块，用于 web 开发的，功能和 SpringMVC 类似的，Webflux 使用 当前一种比较流行的响应式编程出现的框架。</p>
<p>使用传统 web 框架，比如 SpringMVC，这些基于 Servlet 容器，Webflux 是一种异步非阻塞的框架，异步非阻塞的框架在 Servlet3.1 以后才支持，<strong>核心是基于 Reactor</strong> 的相关 API 实现的。</p>
</blockquote>
<p>解释什么是异步非阻塞 ：⭐</p>
<p>（1）异步和同步 （针对调用者）</p>
<ul>
<li>同步： 调用者发送请求，如果等着对方回应之后才去做其他事情就是同步</li>
<li>异步： 调用者发送请求，如果发送请求之后不等着对方回应就去做其他事情就是异步 √</li>
</ul>
<p>（2）非阻塞和阻塞 （针对被调用者）</p>
<ul>
<li>阻塞： 被调用者受到请求之后，做完请求任务之后才给出反馈就是阻塞</li>
<li>非阻塞： 被调用者受到请求之后，受到请求之后马上给出反馈然后再去做事情就是非阻塞 √</li>
</ul>
<p><strong>Webflux 特点</strong></p>
<ul>
<li><strong>非阻塞式</strong>：在有限资源下，提高系统吞吐量和伸缩性，以 Reactor 为基础实现响应式编程。</li>
<li><strong>函数式编程</strong>：Spring5 框架基于 java8，Webflux 使用 Java8 函数式编程方式实现路由请求。</li>
</ul>
<p><strong>SpringMVC 和 Webflux之间区别</strong></p>
<ul>
<li>相同：两个框架都可以使用注解方式，都运行在 Tomcat 等容器中。</li>
<li>不同：SpringMVC 采用命令式编程，Webflux 采用异步响应式编程。</li>
</ul>
<h3 id="响应式编程-java实现"><a class="markdownIt-Anchor" href="#响应式编程-java实现"></a> 响应式编程 - Java实现</h3>
<blockquote>
<p>概念：什么是响应式编程 响应式编程是一种面向 数据流 和 <strong>变化传播</strong> 的编程范式。这意味着可以在编程语言中很方便地表达静态或动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播。</p>
<p>例子：电子表格程序就是响应式编程的一个例子。单元格可以包含字面值或类似&quot;=B1+C1&quot;的公 式，而包含公式的单元格的值会依据其他单元格的值的变化而变化。</p>
</blockquote>
<p>Java8 及其之前版本是提供的观察者模式两个类 <code>Observer</code> 和 <code>Observable</code>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverDemo</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ObserverDemo</span> <span class="variable">observer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverDemo</span>();</span><br><span class="line">        <span class="comment">//添加观察者</span></span><br><span class="line">        observer.addObserver((o,arg)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生变化&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        observer.addObserver((o,arg)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到被观察者通知，准备改变&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//这里必须进行两个方法调用才可以响应！！</span></span><br><span class="line">        observer.setChanged(); <span class="comment">//监控到数据变化</span></span><br><span class="line">        observer.notifyObservers(); <span class="comment">//进行通知</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/video/BV1Vf4y127N5?p=54&amp;vd_source=2afbe26bdac7c6480d8e9221e5be8b05">继续看视频，不理解的地方</a></p>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段3</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 企业开发基础 SpringMVC</title>
    <url>/2022/10/01/JAVA/11SpringMVC/</url>
    <content><![CDATA[<p><img src="11SpringMVC/image-20220929101351636.png" alt="image-20220929101351636" /></p>
<h1 id="springmvc简介"><a class="markdownIt-Anchor" href="#springmvc简介"></a> SpringMVC简介</h1>
<h2 id="什么是mvc"><a class="markdownIt-Anchor" href="#什么是mvc"></a> 什么是MVC</h2>
<p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p>
<p>M：Model，模型层，指工程中的 JavaBean，作用是处理数据</p>
<p>JavaBean分为两类：</p>
<ul>
<li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li>
<li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li>
</ul>
<p>V：View，视图层，指工程中的 html 或 jsp 等页面，作用是与用户进行交互，展示数据</p>
<p>C：Controller，控制层，指工程中的 servlet，作用是接收请求和响应浏览器</p>
<p>MVC的工作流程：<br />
用户通过视图层 View 发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p>
<h2 id="什么是-springmvc"><a class="markdownIt-Anchor" href="#什么是-springmvc"></a> 什么是 SpringMVC</h2>
<p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p>
<p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的 <strong>首选方案</strong>。</p>
<blockquote>
<p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p>
</blockquote>
<h2 id="springmvc-的特点"><a class="markdownIt-Anchor" href="#springmvc-的特点"></a> SpringMVC 的特点</h2>
<ul>
<li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li>
<li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li>
<li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li>
<li><strong>代码清新简洁</strong>，大幅度提升开发效率</li>
<li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li>
<li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li>
</ul>
<h1 id="helloworld"><a class="markdownIt-Anchor" href="#helloworld"></a> HelloWorld</h1>
<h2 id="开发环境"><a class="markdownIt-Anchor" href="#开发环境"></a> 开发环境</h2>
<ul>
<li>IDE：idea 2022.2</li>
<li>构建工具：maven 3.8.6 <a href="https://blog.csdn.net/weixin_62661659/article/details/124241041">下载配置参考文章</a></li>
<li>服务器：tomcat9.0 <a href="https://myhub.blog.csdn.net/article/details/83582484">下载配置参考文章</a></li>
<li>Spring版本：5.3.23</li>
</ul>
<h2 id="创建-maven-工程"><a class="markdownIt-Anchor" href="#创建-maven-工程"></a> 创建 maven 工程</h2>
<h3 id="添加web模块"><a class="markdownIt-Anchor" href="#添加web模块"></a> 添加web模块</h3>
<h3 id="设置打包方式"><a class="markdownIt-Anchor" href="#设置打包方式"></a> 设置打包方式</h3>
<p>设置为war <code>&lt;packaging&gt;war&lt;/packaging&gt;</code></p>
<h3 id="引入依赖"><a class="markdownIt-Anchor" href="#引入依赖"></a> 引入依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p>
<p><img src="https://img-blog.csdnimg.cn/836b26dcd15140e486cb3a566abcc2b0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70" alt="依赖包" /></p>
<h2 id="配置webxml"><a class="markdownIt-Anchor" href="#配置webxml"></a> 配置web.xml</h2>
<p>注册 SpringMVC 的前端控制器 DispatcherServlet</p>
<h3 id="默认配置方式"><a class="markdownIt-Anchor" href="#默认配置方式"></a> 默认配置方式</h3>
<p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<code>&lt;servlet-name&gt;-servlet.xml</code>，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置springMVC的前端控制器，对浏览器发送的请求进行统一处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">    	但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="扩展配置方式"><a class="markdownIt-Anchor" href="#扩展配置方式"></a> 扩展配置方式😊</h3>
<p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置springMVC的前端控制器，对浏览器发送的请求进行统一处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置springMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">        而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">        因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">    	但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p><url-pattern>标签中使用 / 和 /* 的区别：</p>
<p>/所匹配的请求可以是/login或.html或.js或.css方式的请求路径，但是/不能匹配.jsp请求路径的请求。因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p>
<p>/*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用 /*的写法</p>
</blockquote>
<h2 id="创建请求控制器"><a class="markdownIt-Anchor" href="#创建请求控制器"></a> 创建请求控制器</h2>
<p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器。</p>
<p>请求控制器中每一个处理请求的方法成为控制器方法</p>
<p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过 <code>@Controller</code> 注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建-springmvc的配置文件"><a class="markdownIt-Anchor" href="#创建-springmvc的配置文件"></a> 创建 springMVC的配置文件</h2>
<p>配置<code>springMVC.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                        http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xzt.mvc.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">        若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">        此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="测试-helloworld"><a class="markdownIt-Anchor" href="#测试-helloworld"></a> 测试 HelloWorld</h2>
<h3 id="实现对首页的访问"><a class="markdownIt-Anchor" href="#实现对首页的访问"></a> 实现对首页的访问</h3>
<p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 返回视图名称,即需要跳转的页面去掉前缀和后缀。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置tomcat</p>
<p><img src="11SpringMVC/image-20220929143932525.png" alt="image-20220929143932525" /></p>
<p><img src="11SpringMVC/image-20220929143954394.png" alt="image-20220929143954394" /></p>
<h3 id="通过超链接跳转到指定页面"><a class="markdownIt-Anchor" href="#通过超链接跳转到指定页面"></a> 通过超链接跳转到指定页面</h3>
<p>在主页 index.html 中设置超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 添加thymeleaf的命名空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/target&#125;&quot;</span>&gt;</span>访问目标页面target.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!-- thymeleaf语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建target.html页面</p>
<p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/target&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toTarget</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2>
<p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器 DispatcherServlet 处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中 <code>@RequestMapping</code> 注解的 value 属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终<strong>转发</strong>到视图所对应页面</p>
<h1 id="requestmapping-注解"><a class="markdownIt-Anchor" href="#requestmapping-注解"></a> @RequestMapping 注解</h1>
<h2 id="requestmapping-注解的功能"><a class="markdownIt-Anchor" href="#requestmapping-注解的功能"></a> @RequestMapping 注解的功能</h2>
<p>从注解名称上我们可以看到，<code>@RequestMapping</code> 注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p>
<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>
<h2 id="requestmapping-注解的位置"><a class="markdownIt-Anchor" href="#requestmapping-注解的位置"></a> @RequestMapping 注解的位置</h2>
<ul>
<li><code>@RequestMapping</code> 标识一个类：设置映射请求的请求路径的 <strong>初始信息</strong></li>
<li><code>@RequestMapping</code> 标识一个方法：设置映射请求请求路径的 <strong>具体信息</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="requestmapping注解的value属性"><a class="markdownIt-Anchor" href="#requestmapping注解的value属性"></a> @RequestMapping注解的value属性</h2>
<ul>
<li>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</li>
<li>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</li>
<li>@RequestMapping注解的 <strong>value属性必须设置</strong>，至少通过请求地址匹配请求映射</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试RequestMapping注解的value属性---&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试RequestMapping注解的value属性---&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="requestmapping注解的method属性"><a class="markdownIt-Anchor" href="#requestmapping注解的method属性"></a> @RequestMapping注解的method属性</h2>
<ul>
<li><code>@RequestMapping</code> 注解的method属性通过请求的请求方式（get或post）匹配请求映射。</li>
<li><code>@RequestMapping</code> 注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</li>
</ul>
<p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错 <em>405：Request method ‘POST’ not supported</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试RequestMapping注解的value属性---&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p>
<ul>
<li>处理get请求的映射–&gt;@GetMapping</li>
<li>处理post请求的映射–&gt;@PostMapping</li>
<li>处理put请求的映射–&gt;@PutMapping</li>
<li>处理delete请求的映射–&gt;@DeleteMapping</li>
</ul>
<p>2、常用的请求方式有get，post，put，delete</p>
<p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p>
<p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p>
</blockquote>
<h2 id="requestmapping注解的params属性"><a class="markdownIt-Anchor" href="#requestmapping注解的params属性"></a> @RequestMapping注解的params属性💤</h2>
<ul>
<li>
<p>@RequestMapping 注解的 params 属性通过请求的请求参数匹配请求映射</p>
</li>
<li>
<p>@RequestMapping 注解的 params 属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
<ul>
<li>
<p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p>
</li>
<li>
<p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p>
</li>
<li>
<p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p>
</li>
<li>
<p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;, password=123456)&#125;&quot;</span>&gt;</span>测试RequestMapping注解的param属性---&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.GET, RequestMethod.POST&#125;,</span></span><br><span class="line"><span class="meta">    params = &#123;&quot;username&quot;, &quot;password!=123456&quot;&#125;  // 必须有username，并且password不能是123456</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!=123456” not met for actual request parameters: username={admin}, password={123456}</p>
</blockquote>
<h2 id="requestmapping注解的headers属性"><a class="markdownIt-Anchor" href="#requestmapping注解的headers属性"></a> @RequestMapping注解的headers属性💤</h2>
<ul>
<li>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</li>
<li>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系
<ul>
<li>“header”：要求请求映射所匹配的请求必须携带header请求头信息</li>
<li>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</li>
<li>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</li>
<li>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</li>
</ul>
</li>
</ul>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误SpringMVC支持路径中的占位符（重点），即资源未找到</p>
<h2 id="springmvc支持ant风格的路径"><a class="markdownIt-Anchor" href="#springmvc支持ant风格的路径"></a> SpringMVC支持ant风格的路径</h2>
<p>即模糊匹配.</p>
<ul>
<li>？：表示任意的单个字符.(不能匹配<code>\</code>或者<code>?</code>这种特殊字符,同样适用于*匹配符)</li>
<li>*：表示任意的0个或多个字符</li>
<li>**：表示任意的一层或多层目录</li>
</ul>
<p>注意：在使用**时，只能使用/**/xxx的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a?a/testAnt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAnt</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="springmvc支持路径中的占位符"><a class="markdownIt-Anchor" href="#springmvc支持路径中的占位符"></a> SpringMVC支持路径中的占位符⭐⭐</h2>
<ul>
<li>原始方式：/deleteUser?id=1</li>
<li><strong>rest方式</strong> ：/deleteUser/1</li>
</ul>
<p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的<code>@RequestMapping</code>注解的value属性中通过占位符{xxx}表示传输的数据，在通过<code>@PathVariable</code>注解，将占位符所表示的数据赋值给控制器方法的形参。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testPath/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符----&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testPath/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPath</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, <span class="meta">@PathVariable</span> (<span class="string">&quot;name&quot;</span>)</span>String name) &#123;</span><br><span class="line">    System.out.println(id + <span class="string">&quot;:&quot;</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="springmvc获取请求参数"><a class="markdownIt-Anchor" href="#springmvc获取请求参数"></a> SpringMVC获取请求参数</h1>
<h2 id="通过servletapi获取"><a class="markdownIt-Anchor" href="#通过servletapi获取"></a> 通过ServletAPI获取</h2>
<p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testServletAPI(username=&#x27;admin&#x27;, password=&#x27;123456&#x27;)&#125;&quot;</span>&gt;</span>测试使用ServletAPI请求参数<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;testServletAPI&quot;)</span></span><br><span class="line"><span class="comment">// 形参位置的request表示当前请求</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(username + <span class="string">&quot;:&quot;</span> + password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过控制器方法的形参获取请求参数"><a class="markdownIt-Anchor" href="#通过控制器方法的形参获取请求参数"></a> 通过控制器方法的形参获取请求参数</h2>
<p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParams(username=&#x27;admin&#x27;, password=&#x27;123456&#x27;)&#125;&quot;</span>&gt;</span>测试使用控制器的形参获取请求参数<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParams&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">    System.out.println(username + <span class="string">&quot; : &quot;</span> + password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置 字符串数组 或者 字符串类型的形参 接收此请求参数</p>
<p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p>
<p>若使用字符串类型的形参，此参数的值为每个数据中间 使用逗号拼接 的结果</p>
</blockquote>
<h2 id="requestparam"><a class="markdownIt-Anchor" href="#requestparam"></a> @RequestParam</h2>
<p>@RequestParam是将 <em>请求参数</em> 和控制器方法的形参创建映射关系</p>
<p>@RequestParam注解一共有三个属性：</p>
<ul>
<li>
<p><code>value</code>：指定为形参赋值的请求参数的参数名</p>
</li>
<li>
<p><code>required</code>：设置是否必须传输此请求参数，默认值为true。</p>
<p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p>
</li>
<li>
<p><code>defaultValue</code>：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为&quot;&quot;时，则使用默认值为形参赋值</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParams(user_name=&#x27;admin&#x27;, password=&#x27;123456&#x27;)&#125;&quot;</span>&gt;</span>测试使用@RewuestParam获取请求参数<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParams&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(&quot;user_name&quot;)</span> String username, // user_name 和 username相对应</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(&quot;password&quot;)</span> String password)</span> &#123;</span><br><span class="line">    System.out.println(username + <span class="string">&quot; : &quot;</span> + password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="requestheader"><a class="markdownIt-Anchor" href="#requestheader"></a> @RequestHeader</h2>
<p>@RequestHeader是将 <em>请求头信息</em> 和控制器方法的形参创建映射关系</p>
<p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h2 id="cookievalue"><a class="markdownIt-Anchor" href="#cookievalue"></a> @CookieValue</h2>
<p>@CookieValue是将 <em>cookie数据</em> 和控制器方法的形参创建映射关系</p>
<p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h2 id="通过pojo获取请求参数"><a class="markdownIt-Anchor" href="#通过pojo获取请求参数"></a> 通过POJO获取请求参数</h2>
<p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;使用实体类接收请求参数&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPojo</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决获取请求参数的乱码问题"><a class="markdownIt-Anchor" href="#解决获取请求参数的乱码问题"></a> 解决获取请求参数的乱码问题⭐</h2>
<p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>
</blockquote>
<h1 id="域对象共享数据"><a class="markdownIt-Anchor" href="#域对象共享数据"></a> 域对象共享数据</h1>
<h2 id="使用servletapi向request域对象共享数据"><a class="markdownIt-Anchor" href="#使用servletapi向request域对象共享数据"></a> 使用ServletAPI向request域对象共享数据</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;testScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- success.html 获取共享数据 --&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用modelandview向request域对象共享数据"><a class="markdownIt-Anchor" href="#使用modelandview向request域对象共享数据"></a> 使用ModelAndView向request域对象共享数据</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用model向request域对象共享数据"><a class="markdownIt-Anchor" href="#使用model向request域对象共享数据"></a> 使用Model向request域对象共享数据</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用map向request域对象共享数据"><a class="markdownIt-Anchor" href="#使用map向request域对象共享数据"></a> 使用map向request域对象共享数据</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用modelmap向request域对象共享数据"><a class="markdownIt-Anchor" href="#使用modelmap向request域对象共享数据"></a> 使用ModelMap向request域对象共享数据</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="model-modelmap-map的关系"><a class="markdownIt-Anchor" href="#model-modelmap-map的关系"></a> Model、ModelMap、Map的关系</h2>
<p>Model、ModelMap、Map类型的参数其实本质上都是 <code>BindingAwareModelMap</code> 类型的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Model</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendedModelMap</span> <span class="keyword">extends</span> <span class="title class_">ModelMap</span> <span class="keyword">implements</span> <span class="title class_">Model</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BindingAwareModelMap</span> <span class="keyword">extends</span> <span class="title class_">ExtendedModelMap</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="向session域共享数据"><a class="markdownIt-Anchor" href="#向session域共享数据"></a> 向session域共享数据</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.testSessionScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="向application域共享数据"><a class="markdownIt-Anchor" href="#向application域共享数据"></a> 向application域共享数据</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">	<span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;application.testSessionScope&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="springmvc的视图"><a class="markdownIt-Anchor" href="#springmvc的视图"></a> SpringMVC的视图</h1>
<p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p>
<p>SpringMVC视图的种类很多，默认有 <strong>转发视图</strong> 和 <strong>重定向视图</strong></p>
<p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p>
<p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p>
<h2 id="thymeleafview"><a class="markdownIt-Anchor" href="#thymeleafview"></a> ThymeleafView</h2>
<p>当控制器方法中所设置的<strong>视图名称没有任何前缀时</strong>，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过 <strong>转发</strong> 的方式实现跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testThymeleafView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="11SpringMVC/image-20221010152352997.png" alt="image-20221010152352997" /></p>
<h2 id="转发视图"><a class="markdownIt-Anchor" href="#转发视图"></a> 转发视图</h2>
<p>SpringMVC中 <strong>默认的转发视图</strong> 是InternalResourceView</p>
<p>SpringMVC中创建转发视图的情况：</p>
<p>当控制器方法中所设置的视图名称以&quot;forward:&quot;为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀&quot;forward:&quot;去掉，剩余部分作为最终路径通过转发的方式实现跳转</p>
<p>例如 <code>forward:/</code>，<code>forward:/employee</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 地址栏显示的是/testForward,页面显示的是/testThymeleafView</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testThymeleafView&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="11SpringMVC/image-20221010152612066.png" alt="image-20221010152612066" /></p>
<h2 id="重定向视图"><a class="markdownIt-Anchor" href="#重定向视图"></a> 重定向视图</h2>
<p>SpringMVC中默认的重定向视图是RedirectView</p>
<p>当控制器方法中所设置的视图名称以&quot;redirect:&quot;为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀&quot;redirect:&quot;去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>
<p>例如 <code>redirect:/</code>，<code>redirect:/employee</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 地址栏显示的是/testThymeleafView,页面显示的是/testThymeleafView</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testThymeleafView&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="11SpringMVC/image-20221010153908769.png" alt="image-20221010153908769" /></p>
<blockquote>
<p>注：</p>
<p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p>
</blockquote>
<h2 id="视图控制器view-controller"><a class="markdownIt-Anchor" href="#视图控制器view-controller"></a> 视图控制器view-controller</h2>
<p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- http://localhost:8080/springMVC/ 会跳转到index.html --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">	view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动,可以让所有的请求有效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p>
<p>&lt;mvc:annotation-driven /&gt;</p>
</blockquote>
<h1 id="restful"><a class="markdownIt-Anchor" href="#restful"></a> RESTful</h1>
<h2 id="restful简介"><a class="markdownIt-Anchor" href="#restful简介"></a> RESTful简介</h2>
<p>REST：Representational State Transfer，表现层资源状态转移。</p>
<ul>
<li>资源</li>
</ul>
<p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p>
<ul>
<li>资源的表述</li>
</ul>
<p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p>
<ul>
<li>状态转移</li>
</ul>
<p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>
<h2 id="restful的实现"><a class="markdownIt-Anchor" href="#restful的实现"></a> RESTful的实现</h2>
<p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p>
<p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p>
<p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询操作</td>
<td>getUserById?id=1</td>
<td>user/1–&gt;get请求方式</td>
</tr>
<tr>
<td>保存操作</td>
<td>saveUser</td>
<td>user–&gt;post请求方式</td>
</tr>
<tr>
<td>删除操作</td>
<td>deleteUser?id=1</td>
<td>user/1–&gt;delete请求方式</td>
</tr>
<tr>
<td>更新操作</td>
<td>updateUser</td>
<td>user–&gt;put请求方式</td>
</tr>
</tbody>
</table>
<h2 id="hiddenhttpmethodfilter"><a class="markdownIt-Anchor" href="#hiddenhttpmethodfilter"></a> HiddenHttpMethodFilter</h2>
<p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p>
<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p>
<p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p>
<ul>
<li>当前请求的请求方式必须为 <code>post</code></li>
<li>当前请求必须传输请求参数 <code>_method</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 模拟put请求 --&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p>
<p>在 web.xml 中注册<strong>HiddenHttpMethodFilter</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.配置编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.配置处理请求方式put和delete的HiddenHttpMethodFilter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：</p>
<p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p>
<p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p>
<p>原因：</p>
<ul>
<li>
<p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p>
</li>
<li>
<p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p>
</li>
<li>
<p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p>
</li>
<li>
<pre class="highlight"><code class="">String paramValue = request.getParameter(this.methodParam);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># RESTful案例</span><br><span class="line"></span><br><span class="line">## 准备工作</span><br><span class="line"></span><br><span class="line">和传统 CRUD 一样，实现对员工信息的增删改查。</span><br><span class="line"></span><br><span class="line">- 搭建环境</span><br><span class="line"></span><br><span class="line">- 准备实体类</span><br><span class="line"></span><br><span class="line"> ```java</span><br><span class="line"> package com.xzt.mvc.bean;</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line">  * @author xzt</span><br><span class="line">  * @version 1.0</span><br><span class="line">  */</span><br><span class="line"> public class Employee &#123;</span><br><span class="line">     private Integer id;</span><br><span class="line">     private String lastName;</span><br><span class="line"> </span><br><span class="line">     private String email;</span><br><span class="line">     //1 male, 0 female</span><br><span class="line">     private Integer gender;</span><br><span class="line"> </span><br><span class="line">     public Integer getId() &#123;</span><br><span class="line">         return id;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public void setId(Integer id) &#123;</span><br><span class="line">         this.id = id;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public String getLastName() &#123;</span><br><span class="line">         return lastName;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public void setLastName(String lastName) &#123;</span><br><span class="line">         this.lastName = lastName;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public String getEmail() &#123;</span><br><span class="line">         return email;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public void setEmail(String email) &#123;</span><br><span class="line">         this.email = email;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public Integer getGender() &#123;</span><br><span class="line">         return gender;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public void setGender(Integer gender) &#123;</span><br><span class="line">         this.gender = gender;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public Employee(Integer id, String lastName, String email, Integer gender) &#123;</span><br><span class="line">         super();</span><br><span class="line">         this.id = id;</span><br><span class="line">         this.lastName = lastName;</span><br><span class="line">         this.email = email;</span><br><span class="line">         this.gender = gender;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     public Employee() &#123;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</blockquote>
<ul>
<li>
<p>准备dao模拟数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.mvc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xzt.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">        employees.put(<span class="number">1001</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        employees.put(<span class="number">1002</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        employees.put(<span class="number">1003</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        employees.put(<span class="number">1004</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        employees.put(<span class="number">1005</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">            employee.setId(initId++);</span><br><span class="line">        &#125;</span><br><span class="line">        employees.put(employee.getId(), employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="功能清单"><a class="markdownIt-Anchor" href="#功能清单"></a> 功能清单</h2>
<table>
<thead>
<tr>
<th>功能</th>
<th>URL 地址</th>
<th>请求方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>访问首页√</td>
<td>/</td>
<td>GET</td>
</tr>
<tr>
<td>查询全部数据√</td>
<td>/employee</td>
<td>GET</td>
</tr>
<tr>
<td>删除√</td>
<td>/employee/2</td>
<td>DELETE</td>
</tr>
<tr>
<td>跳转到添加数据页面√</td>
<td>/toAdd</td>
<td>GET</td>
</tr>
<tr>
<td>执行保存√</td>
<td>/employee</td>
<td>POST</td>
</tr>
<tr>
<td>跳转到更新数据页面√</td>
<td>/employee/2</td>
<td>GET</td>
</tr>
<tr>
<td>执行更新√</td>
<td>/employee</td>
<td>PUT</td>
</tr>
</tbody>
</table>
<h2 id="具体功能访问首页"><a class="markdownIt-Anchor" href="#具体功能访问首页"></a> 具体功能：访问首页</h2>
<h3 id="配置view-controller"><a class="markdownIt-Anchor" href="#配置view-controller"></a> 配置view-controller</h3>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段3</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 刷题常用知识</title>
    <url>/2022/10/19/JAVA/13JavaComKnow/</url>
    <content><![CDATA[<h1 id="常用容器"><a class="markdownIt-Anchor" href="#常用容器"></a> 常用容器</h1>
<h2 id="list"><a class="markdownIt-Anchor" href="#list"></a> List</h2>
<p>接口：<code>java.util.List&lt;&gt;</code></p>
<p>实现：</p>
<ul>
<li><code>java.util.ArrayList&lt;&gt;</code> ：变长数组</li>
<li><code>java.util.LinkedList&lt;&gt;</code> ：双链表</li>
</ul>
<p>函数：</p>
<ul>
<li><code>add()</code>：在末尾添加一个元素</li>
<li><code>clear()</code>：清空</li>
<li><code>size()</code>：返回长度</li>
<li><code>isEmpty()</code>：是否为空</li>
<li><code>get(i)</code>：获取第i个元素</li>
<li><code>set(i, val)</code>：将第i个元素设置为val</li>
</ul>
<h2 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h2>
<p>类：<code>java.util.Stack&lt;&gt;</code></p>
<p>函数：</p>
<ul>
<li><code>push()</code>：压入元素</li>
<li><code>pop()</code>：弹出栈顶元素，并返回栈顶元素</li>
<li><code>peek()</code>：返回栈顶元素</li>
<li><code>size()</code>：返回长度</li>
<li><code>empty()</code>：栈是否为空</li>
<li><code>clear()</code>：清空</li>
</ul>
<h2 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h2>
<p>接口：<code>java.util.Queue&lt;&gt;</code></p>
<p>实现：</p>
<ul>
<li><code>java.util.LinkedList&lt;&gt;</code>：双链表</li>
<li><code>java.util.PriorityQueue&lt;&gt;</code>：优先队列
<ul>
<li>默认是小根堆，大根堆写法：<code>new PriorityQueue&lt;&gt;(Collections.reverseOrder())</code></li>
</ul>
</li>
</ul>
<p>函数：</p>
<ul>
<li><code>add()</code>：在队尾添加元素</li>
<li><code>remove()</code>：删除并返回队头</li>
<li><code>isEmpty()</code>：是否为空</li>
<li><code>size()</code>：返回长度</li>
<li><code>peek()</code>：返回队头</li>
<li><code>clear()</code>：清空</li>
</ul>
<h2 id="set"><a class="markdownIt-Anchor" href="#set"></a> Set</h2>
<p>接口：<code>java.util.Set&lt;K&gt;</code></p>
<p>实现：</p>
<ul>
<li><code>java.util.HashSet&lt;K&gt;</code>：哈希表</li>
<li><code>java.util.TreeSet&lt;K&gt;</code>：平衡树</li>
</ul>
<p>函数：</p>
<ul>
<li><code>add()</code>：添加元素</li>
<li><code>contains()</code>：是否包含某个元素</li>
<li><code>remove()</code>：删除元素</li>
<li><code>size()</code>：返回元素数</li>
<li><code>isEmpty()</code>：是否为空</li>
<li><code>clear()</code>：清空</li>
</ul>
<p><code>java.util.TreeSet</code>多的函数：</p>
<ul>
<li><code>ceiling(key)</code>：返回大于等于<code>key</code>的最小元素，不存在则返回<code>null</code></li>
<li><code>floor(key)</code>：返回小于等于<code>key</code>的最大元素，不存在则返回<code>null</code></li>
</ul>
<h2 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h2>
<p>接口：<code>java.util.Map&lt;K, V&gt;</code></p>
<p>实现：</p>
<ul>
<li><code>java.util.HashMap&lt;K, V&gt;</code>：哈希表</li>
<li><code>java.util.TreeMap&lt;K, V&gt;</code>：平衡树</li>
</ul>
<p>函数：</p>
<ul>
<li><code>put(key, value)</code>：添加关键字和其对应的值</li>
<li><code>get(key)</code>：返回关键字对应的值</li>
<li><code>containsKey(key)</code>：是否包含关键字</li>
<li><code>remove(key)</code>：删除关键字</li>
<li><code>size()</code>：返回元素数</li>
<li><code>isEmpty()</code>：是否为空</li>
<li><code>clear()</code>：清空</li>
<li><code>entrySet()</code>：获取Map中的所有对象的集合</li>
<li><code>Map.Entry&lt;K, V&gt;</code>：Map中的对象类型</li>
<li><code>getKey()</code>：获取关键字</li>
<li><code>getValue()</code>：获取值</li>
</ul>
<p><code>java.util.TreeMap&lt;K, V&gt;</code>多的函数：</p>
<ul>
<li><code>ceilingEntry(key)</code>：返回大于等于<code>key</code>的最小元素，不存在则返回<code>null</code></li>
<li><code>floorEntry(key)</code>：返回小于等于<code>key</code>的最大元素，不存在则返回<code>null</code></li>
</ul>
<h2 id="pair"><a class="markdownIt-Anchor" href="#pair"></a> Pair</h2>
<p>类：<code>javafx.util.Pair&lt;K, V&gt;</code></p>
<p>例如：<code>Pair&lt;String, Integer&gt; p = new Pair&lt;&gt;(&quot;a&quot;, 1)</code></p>
<p>函数：</p>
<ul>
<li><code>getKey()</code>：获取关键字</li>
<li><code>getValue()</code> ：获取值</li>
</ul>
<h2 id="优先队列"><a class="markdownIt-Anchor" href="#优先队列"></a> 优先队列</h2>
<p>接口：<code>java.util.Queue&lt;&gt;</code></p>
<p>实现：<code>java.util.PriorityQueue&lt;&gt;</code>：优先队列</p>
<ul>
<li>
<p>默认是小根堆，大根堆写法：<code>new PriorityQueue&lt;&gt;(Collections.reverseOrder())</code></p>
</li>
<li>
<p>第二种定义方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义大根堆</span></span><br><span class="line">PriorityQueue&lt;Integer&gt; queMin = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Integer&gt;((a, b) -&gt; (b - a));</span><br><span class="line"><span class="comment">// 定义小根堆</span></span><br><span class="line">PriorityQueue&lt;Integer&gt; queMax = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Integer&gt;((a, b) -&gt; (a - b));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>常用方法：</p>
<ul>
<li><code>add(e)</code>：在队尾插入元素，并调整堆结构。</li>
<li><code>offer(e)</code>：在队尾插入元素，并调整堆结构。</li>
<li><code>remove(e)</code>：获取队头元素并删除，并调整堆结构。</li>
<li><code>poll(e)</code>：获取队头元素并删除，并调整堆结构。</li>
<li><code>element()</code>：返回队头元素，不删除</li>
<li><code>peek()</code>：返回队头元素，不删除</li>
<li><code>isEmpty()</code>：判断队列是否为空</li>
<li><code>size()</code>：获取队列中的元素个数</li>
<li><code>clear()</code>：清空队列</li>
<li><code>contains(o)</code>：判断队列中是否包含指定元素</li>
<li><code>iterator()</code>：迭代器</li>
</ul>
<h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1>
<h2 id="给二维数组赋初值"><a class="markdownIt-Anchor" href="#给二维数组赋初值"></a> 给二维数组赋初值</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>[] a: arr) </span><br><span class="line">    Arrays.fill(a, Integer.MAX_VALUE);</span><br></pre></td></tr></table></figure>
<h2 id="对数组指定范围的元素进行排序"><a class="markdownIt-Anchor" href="#对数组指定范围的元素进行排序"></a> 对数组指定范围的元素进行排序</h2>
<p><code>Arrays.sort(arr, start, end)</code>：对数组中<code>[start, end)</code>元素进行排序</p>
<h2 id="数组自定义排序"><a class="markdownIt-Anchor" href="#数组自定义排序"></a> 数组自定义排序</h2>
<p>练习题目：<a href="https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/">把数组排成最小的数</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line">Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt; &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    publice <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (o1[<span class="number">0</span>] + o2[<span class="number">1</span>]) - (o2[<span class="number">0</span>] + o2[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="使用lambda表达式自定义排序规则"><a class="markdownIt-Anchor" href="#使用lambda表达式自定义排序规则"></a> 使用lambda表达式自定义排序规则</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line">Arrays.sort(arr, (o1, o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (o1[<span class="number">0</span>] + o1[<span class="number">1</span>]) - (o2[<span class="number">0</span>] + o2[<span class="number">1</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 企业开发基础 MyBatis</title>
    <url>/2022/10/11/JAVA/12MyBatis/</url>
    <content><![CDATA[<h1 id="mybatis简介"><a class="markdownIt-Anchor" href="#mybatis简介"></a> Mybatis简介</h1>
<h2 id="mybatis历史"><a class="markdownIt-Anchor" href="#mybatis历史"></a> MyBatis历史</h2>
<ul>
<li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下，iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github</li>
<li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</li>
</ul>
<h2 id="mybatis特性"><a class="markdownIt-Anchor" href="#mybatis特性"></a> MyBatis特性</h2>
<ol>
<li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li>
<li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li>
<li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li>
</ol>
<h2 id="mybatis下载"><a class="markdownIt-Anchor" href="#mybatis下载"></a> MyBatis下载</h2>
<ul>
<li><a href="https://github.com/mybatis/mybatis-3">MyBatis下载地址</a></li>
<li><img src="/img/Java/12MyBatis/MyBatis%E4%B8%8B%E8%BD%BD.png" alt="" /></li>
</ul>
<h2 id="和其它持久化层技术对比"><a class="markdownIt-Anchor" href="#和其它持久化层技术对比"></a> 和其它持久化层技术对比</h2>
<ul>
<li>JDBC
<ul>
<li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li>
<li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li>
<li>代码冗长，开发效率低</li>
</ul>
</li>
<li>Hibernate 和 JPA
<ul>
<li>操作简便，开发效率高</li>
<li>程序中的长难复杂 SQL 需要绕过框架</li>
<li>内部自动生产的 SQL，不容易做特殊优化</li>
<li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li>
<li>反射操作太多，导致数据库性能下降</li>
</ul>
</li>
<li>MyBatis
<ul>
<li>轻量级，性能出色</li>
<li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li>
<li>开发效率稍逊于HIbernate，但是完全能够接受</li>
</ul>
</li>
</ul>
<h1 id="搭建mybatis"><a class="markdownIt-Anchor" href="#搭建mybatis"></a> 搭建MyBatis</h1>
<h2 id="开发环境"><a class="markdownIt-Anchor" href="#开发环境"></a> 开发环境</h2>
<ul>
<li>IDE：idea 2022.2</li>
<li>构建工具：maven 3.8.6</li>
<li>MySQL版本：MySQL 8.0.29</li>
<li>MyBatis版本：MyBatis 3.5.7</li>
</ul>
<h2 id="创建maven工程"><a class="markdownIt-Anchor" href="#创建maven工程"></a> 创建maven工程</h2>
<ul>
<li>打包方式：jar</li>
<li>引入依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建mybatis的核心配置文件"><a class="markdownIt-Anchor" href="#创建mybatis的核心配置文件"></a> 创建MyBatis的核心配置文件</h2>
<blockquote>
<p>习惯上命名为 <code>mybatis-config.xml</code> ，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br />
核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br />
核心配置文件存放的位置是src/main/resources目录下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--设置连接数据库的环境--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--引入映射文件--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建mapper接口"><a class="markdownIt-Anchor" href="#创建mapper接口"></a> 创建mapper接口</h2>
<blockquote>
<p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xzt.mybatis.mapper;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;  </span><br><span class="line">	<span class="comment">/**  </span></span><br><span class="line"><span class="comment">	* 添加用户信息  </span></span><br><span class="line"><span class="comment">	*/</span>  </span><br><span class="line">	<span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建mybatis的映射文件"><a class="markdownIt-Anchor" href="#创建mybatis的映射文件"></a> 创建MyBatis的映射文件</h2>
<ul>
<li>相关概念：ORM（Object Relationship Mapping）对象关系映射。</li>
<li>对象：Java的实体类对象
<ul>
<li>关系：关系型数据库</li>
<li>映射：二者之间的对应关系</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>Java概念</th>
<th>数据库概念</th>
</tr>
</thead>
<tbody>
<tr>
<td>类</td>
<td>表</td>
</tr>
<tr>
<td>属性</td>
<td>字段/列</td>
</tr>
<tr>
<td>对象</td>
<td>记录/行</td>
</tr>
</tbody>
</table>
<ul>
<li>映射文件的命名规则：表所对应的实体类的类名+Mapper.xml
<ul>
<li>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</li>
<li>因此一个映射文件对应一个实体类，对应一张表的操作</li>
<li>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</li>
<li>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</li>
</ul>
</li>
<li>MyBatis中可以面向接口操作数据，要保证两个一致
<ul>
<li>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</li>
<li>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xzt.mybatis.mapper.UserMapper&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 全类名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span>  <span class="comment">&lt;!-- 方法名 --&gt;</span></span><br><span class="line">        insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="通过junit测试功能"><a class="markdownIt-Anchor" href="#通过junit测试功能"></a> 通过junit测试功能</h2>
<ul>
<li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li>
<li>SqlSessionFactory：是“生产”SqlSession的“工厂”</li>
<li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//获取sqlSession，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line">        <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line">        <span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交  </span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配映射文件中的SQL标签，并执行标签中的SQL语句</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        <span class="comment">//sqlSession.commit();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>此时需要手动提交事务，如果要自动提交事务，则在获取sqlSession对象时，使用<code>SqlSession sqlSession = sqlSessionFactory.openSession(true);</code>，传入一个Boolean类型的参数，值为true，这样就可以自动提交</li>
</ul>
<h2 id="加入log4j日志功能"><a class="markdownIt-Anchor" href="#加入log4j日志功能"></a> 加入log4j日志功能</h2>
<ol>
<li>
<p>加入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>加入log4j的配置文件</p>
<ul>
<li>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</li>
<li>日志的级别：FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) 从左到右打印的内容越来越详细</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="核心配置文件详解"><a class="markdownIt-Anchor" href="#核心配置文件详解"></a> 核心配置文件详解</h1>
<blockquote>
<p>核心配置文件中的标签必须按照固定的顺序(有的标签可以不写，但顺序一定不能乱)：<br />
properties、settings、typeAliases、typeHandlers、objectFactory、objectWrapperFactory、reflectorFactory、plugins、environments、databaseIdProvider、mappers</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//MyBatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://MyBatis.org/dtd/MyBatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件，此时就可以$&#123;属性名&#125;的方式访问属性值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        typeAlias：设置某个具体的类型的别名</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        type：需要设置别名的类型的全类名</span></span><br><span class="line"><span class="comment">        alias：设置此类型的别名，且别名不区分大小写。若不设置此属性，该类型拥有默认的别名，即类名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.bean.User&quot; alias=&quot;user&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    environments：设置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">	    default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environment：设置具体的连接数据库的环境信息</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">	        id：设置环境的唯一标识，可通过environments标签中的default设置某一个环境的id，表示默认使用的环境</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">	            type：设置事务管理方式，type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">	            type=&quot;JDBC&quot;：设置当前环境的事务管理都必须手动处理</span></span><br><span class="line"><span class="comment">	            type=&quot;MANAGED&quot;：设置事务被管理，例如spring中的AOP</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            dataSource：设置数据源</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">	            type：设置数据源的类型，type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">	            type=&quot;POOLED&quot;：使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建</span></span><br><span class="line"><span class="comment">	            type=&quot;UNPOOLED&quot;：不使用数据库连接池，即每次使用连接都需要重新创建</span></span><br><span class="line"><span class="comment">	            type=&quot;JNDI&quot;：调用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置驱动类的全类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        以包为单位，将包下所有的映射文件引入核心配置文件</span></span><br><span class="line"><span class="comment">        注意：</span></span><br><span class="line"><span class="comment">			1. 此方式必须保证mapper接口和mapper映射文件必须在相同的包下</span></span><br><span class="line"><span class="comment">			2. mapper接口要和mapper映射文件的名字一致</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><img src="/img/Java/12MyBatis/mapper%E6%8E%A5%E5%8F%A3%E5%92%8Cmapper%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%9C%A8%E5%90%8C%E4%B8%80%E5%8C%85%E4%B8%8B.png" alt="" /></li>
</ul>
<h1 id="默认的类型别名"><a class="markdownIt-Anchor" href="#默认的类型别名"></a> 默认的类型别名</h1>
<p><img src="/img/Java/12MyBatis/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D1.png" alt="" /><br />
<img src="/img/Java/12MyBatis/%E9%BB%98%E8%AE%A4%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D2.png" alt="" /></p>
<h1 id="mybatis的增删改查"><a class="markdownIt-Anchor" href="#mybatis的增删改查"></a> MyBatis的增删改查</h1>
<ol>
<li>
<p>添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>删除</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">     delete from t_user where id = 6</span><br><span class="line"> <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">     update t_user set username = &#x27;张三&#x27; where id = 5</span><br><span class="line"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询一个实体类对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where id = 2  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询集合</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>
<p>注意：</p>
<ol>
<li>查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系
<ul>
<li>resultType：自动映射，用于属性名和表中字段名一致的情况</li>
<li>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</li>
</ul>
</li>
<li>当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</li>
</ol>
</li>
</ul>
<h1 id="mybatis获取参数值的两种方式重点"><a class="markdownIt-Anchor" href="#mybatis获取参数值的两种方式重点"></a> MyBatis获取参数值的两种方式（重点）</h1>
<ul>
<li>MyBatis获取参数值的两种方式：${}和#{}</li>
<li>${}的本质就是字符串拼接，#{}的本质就是占位符赋值</li>
<li>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</li>
</ul>
<h2 id="单个字面量类型的参数"><a class="markdownIt-Anchor" href="#单个字面量类型的参数"></a> 单个字面量类型的参数</h2>
<ul>
<li>若mapper接口中的方法参数为单个的字面量类型，此时可以使用${}和#{}以任意的名称（最好见名识意）获取参数的值，注意${}需要手动加单引号</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="多个字面量类型的参数"><a class="markdownIt-Anchor" href="#多个字面量类型的参数"></a> 多个字面量类型的参数</h2>
<ul>
<li>
<p>若mapper接口中的方法参数为多个时，此时MyBatis会自动将这些参数放在一个map集合中</p>
<ol>
<li>以arg0,arg1…为键，以参数为值；</li>
<li>以param1,param2…为键，以参数为值；</li>
</ol>
</li>
<li>
<p>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号。</p>
</li>
<li>
<p>使用arg或者param都行，要注意的是，arg是从arg0开始的，param是从param1开始的</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username,String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="map集合类型的参数"><a class="markdownIt-Anchor" href="#map集合类型的参数"></a> map集合类型的参数</h2>
<ul>
<li>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByMap(Map&lt;String,Object&gt; map);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByMap</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">	Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">	map.put(<span class="string">&quot;usermane&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">	map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);</span><br><span class="line">	System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实体类类型的参数"><a class="markdownIt-Anchor" href="#实体类类型的参数"></a> 实体类类型的参数</h2>
<ul>
<li>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">12</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">	mapper.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用param标识参数"><a class="markdownIt-Anchor" href="#使用param标识参数"></a> 使用@Param标识参数</h2>
<ul>
<li>
<p>可以通过@Param注解标识mapper接口中的方法参数，此时，会将这些参数放在map集合中</p>
<ol>
<li>以@Param注解的value属性值为键，以参数为值；</li>
<li>以param1,param2…为键，以参数为值；</li>
</ol>
</li>
<li>
<p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User CheckLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;CheckLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkLoginByParam</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">	mapper.CheckLoginByParam(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2>
<ul>
<li>
<p>建议分成两种情况进行处理</p>
<ol>
<li>实体类类型的参数</li>
<li>使用@Param标识参数</li>
</ol>
</li>
</ul>
<h1 id="mybatis的各种查询功能"><a class="markdownIt-Anchor" href="#mybatis的各种查询功能"></a> MyBatis的各种查询功能</h1>
<ol>
<li>如果查询出的数据只有一条，可以通过
<ol>
<li>实体类对象接收</li>
<li>List集合接收</li>
<li>Map集合接收，结果<code>&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;</code></li>
</ol>
</li>
<li>如果查询出的数据有多条，一定不能用实体类对象接收，会抛异常TooManyResultsException，可以通过
<ol>
<li>实体类类型的LIst集合接收</li>
<li>Map类型的LIst集合接收</li>
<li>在mapper接口的方法上添加@MapKey注解</li>
</ol>
</li>
</ol>
<h2 id="查询一个实体类对象"><a class="markdownIt-Anchor" href="#查询一个实体类对象"></a> 查询一个实体类对象</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询一个list集合"><a class="markdownIt-Anchor" href="#查询一个list集合"></a> 查询一个List集合</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询单个数据"><a class="markdownIt-Anchor" href="#查询单个数据"></a> 查询单个数据</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询用户的总记录数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 在MyBatis中，对于Java中常用的类型都设置了类型别名  </span></span><br><span class="line"><span class="comment"> * 例如：java.lang.Integer--&gt;int|integer  </span></span><br><span class="line"><span class="comment"> * 例如：int--&gt;_int|_integer  </span></span><br><span class="line"><span class="comment"> * 例如：Map--&gt;map,List--&gt;list  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">	select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询一条数据为map集合"><a class="markdownIt-Anchor" href="#查询一条数据为map集合"></a> 查询一条数据为map集合</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="查询多条数据为map集合"><a class="markdownIt-Anchor" href="#查询多条数据为map集合"></a> 查询多条数据为map集合</h2>
<h3 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	结果：</span></span><br><span class="line"><span class="comment">	[&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">	&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">	&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	结果：</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">	1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">	2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">	3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="特殊sql的执行"><a class="markdownIt-Anchor" href="#特殊sql的执行"></a> 特殊SQL的执行</h1>
<h2 id="模糊查询"><a class="markdownIt-Anchor" href="#模糊查询"></a> 模糊查询</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名进行模糊查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 21:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;username&quot;) String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span>  </span><br><span class="line">	select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中<code>select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</code>是最常用的</li>
</ul>
<h2 id="批量删除"><a class="markdownIt-Anchor" href="#批量删除"></a> 批量删除</h2>
<ul>
<li>只能使用${}，如果使用#{}，则解析后的sql语句为<code>delete from t_user where id in ('1,2,3')</code>，这样是将<code>1,2,3</code>看做是一个整体，只有id为<code>1,2,3</code>的数据会被删除。正确的语句应该是<code>delete from t_user where id in (1,2,3)</code>，或者<code>delete from t_user where id in ('1','2','3')</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/26 22:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">	delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMore</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMore(<span class="string">&quot;1,2,3,8&quot;</span>);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="动态设置表名"><a class="markdownIt-Anchor" href="#动态设置表名"></a> 动态设置表名</h2>
<ul>
<li>只能使用${}，因为表名不能加单引号</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定表中的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableName </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.User&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 14:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByTable</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserByTable(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="添加功能获取自增的主键"><a class="markdownIt-Anchor" href="#添加功能获取自增的主键"></a> 添加功能获取自增的主键</h2>
<ul>
<li>
<p>使用场景</p>
</li>
<li>
<p>t_clazz(clazz_id,clazz_name)</p>
<ul>
<li>t_student(student_id,student_name,clazz_id)</li>
</ul>
<ol>
<li>添加班级信息</li>
<li>获取新添加的班级的id</li>
<li>为班级分配学生，即将某学的班级id修改为新添加的班级的id</li>
</ol>
</li>
<li>
<p>在mapper.xml中设置两个属性</p>
</li>
<li>
<p>useGeneratedKeys：设置使用自增的主键</p>
<ul>
<li>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 15:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values (null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">	<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;ton&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@321.com&quot;</span>);</span><br><span class="line">	mapper.insertUser(user);</span><br><span class="line">	System.out.println(user);</span><br><span class="line">	<span class="comment">//输出：user&#123;id=10, username=&#x27;ton&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@321.com&#x27;&#125;，自增主键存放到了user的id属性中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自定义映射resultmap"><a class="markdownIt-Anchor" href="#自定义映射resultmap"></a> 自定义映射resultMap</h1>
<h2 id="resultmap处理字段和属性的映射关系"><a class="markdownIt-Anchor" href="#resultmap处理字段和属性的映射关系"></a> resultMap处理字段和属性的映射关系</h2>
<ul>
<li>resultMap：设置自定义映射</li>
<li>属性：
<ul>
<li>id：表示自定义映射的唯一标识，不能重复</li>
<li>type：查询的数据要映射的实体类的类型</li>
<li>子标签：</li>
<li>id：设置主键的映射关系
<ul>
<li>result：设置普通字段的映射关系</li>
<li>子标签属性：</li>
<li>property：设置映射关系中实体类中的属性名
<ul>
<li>column：设置映射关系中表中的字段名</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射，即使字段名和属性名一致的属性也要映射，也就是全部属性都要列出来</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）。此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系</p>
<ol>
<li>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select eid,emp_name empName,age,sex,email from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>可以在MyBatis的核心配置文件中的<code>setting</code>标签中，设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName。<a href="#%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3">核心配置文件详解</a> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h2 id="多对一映射处理"><a class="markdownIt-Anchor" href="#多对一映射处理"></a> 多对一映射处理</h2>
<blockquote>
<p>查询员工信息以及员工所对应的部门信息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;  </span><br><span class="line">	<span class="keyword">private</span> Integer eid;  </span><br><span class="line">	<span class="keyword">private</span> String empName;  </span><br><span class="line">	<span class="keyword">private</span> Integer age;  </span><br><span class="line">	<span class="keyword">private</span> String sex;  </span><br><span class="line">	<span class="keyword">private</span> String email;  </span><br><span class="line">	<span class="keyword">private</span> Dept dept;</span><br><span class="line">	<span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="级联方式处理映射关系"><a class="markdownIt-Anchor" href="#级联方式处理映射关系"></a> 级联方式处理映射关系</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用association处理映射关系"><a class="markdownIt-Anchor" href="#使用association处理映射关系"></a> 使用association处理映射关系</h3>
<ul>
<li>association：处理多对一的映射关系</li>
<li>property：需要处理多对的映射关系的属性名</li>
<li>javaType：该属性的类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;)Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="分步查询"><a class="markdownIt-Anchor" href="#分步查询"></a> 分步查询</h3>
<h4 id="1-查询员工信息"><a class="markdownIt-Anchor" href="#1-查询员工信息"></a> 1. 查询员工信息</h4>
<ul>
<li>select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名）</li>
<li>column：设置分步查询的条件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EmpMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-查询部门信息"><a class="markdownIt-Anchor" href="#2-查询部门信息"></a> 2. 查询部门信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DeptMapper里的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，员工及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：通过did查询员工对应的部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 20:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处的resultMap仅是处理字段和属性的映射关系--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="一对多映射处理"><a class="markdownIt-Anchor" href="#一对多映射处理"></a> 一对多映射处理</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer did;</span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line">	<span class="comment">//...构造器、get、set方法等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="collection"><a class="markdownIt-Anchor" href="#collection"></a> collection</h3>
<ul>
<li>collection：用来处理一对多的映射关系</li>
<li>ofType：表示该属性对饮的集合中存储的数据的类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="分步查询-2"><a class="markdownIt-Anchor" href="#分步查询-2"></a> 分步查询</h3>
<h4 id="1-查询部门信息"><a class="markdownIt-Anchor" href="#1-查询部门信息"></a> 1. 查询部门信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> com.atguigu.mybatis.pojo.Dept</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-根据部门id查询部门中的所有员工"><a class="markdownIt-Anchor" href="#2-根据部门id查询部门中的所有员工"></a> 2. 根据部门id查询部门中的所有员工</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询，查询部门及对应的所有员工信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：根据部门id查询部门中的所有员工</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;com.atguigu.mybatis.pojo.Emp&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/2/27 22:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;did&quot;) Integer did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="延迟加载"><a class="markdownIt-Anchor" href="#延迟加载"></a> 延迟加载</h2>
<ul>
<li>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：</li>
<li>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载
<ul>
<li>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载</li>
</ul>
</li>
<li>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType=“lazy(延迟加载)|eager(立即加载)”</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">	System.out.println(emp.getEmpName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>关闭延迟加载，两条SQL语句都运行了<img src="/img/Java/12MyBatis/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%951.png" alt="" /></li>
<li>开启延迟加载，只运行获取emp的SQL语句<br />
<img src="/img/Java/12MyBatis/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%952.png" alt="" /></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">	System.out.println(emp.getEmpName());</span><br><span class="line">	System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">	System.out.println(emp.getDept());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>开启后，需要用到查询dept的时候才会调用相应的SQL语句<img src="/img/Java/12MyBatis/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E6%B5%8B%E8%AF%953.png" alt="" /></p>
</li>
<li>
<p>fetchType：当开启了全局的延迟加载之后，可以通过该属性手动控制延迟加载的效果，fetchType=“lazy(延迟加载)|eager(立即加载)”</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="动态sql"><a class="markdownIt-Anchor" href="#动态sql"></a> 动态SQL</h1>
<ul>
<li>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</li>
</ul>
<h2 id="if"><a class="markdownIt-Anchor" href="#if"></a> if</h2>
<ul>
<li>if标签可通过test属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</li>
<li>在where后面添加一个恒成立条件<code>1=1</code></li>
<li>这个恒成立条件并不会影响查询的结果
<ul>
<li>这个<code>1=1</code>可以用来拼接<code>and</code>语句，例如：当empName为null时</li>
<li>如果不加上恒成立条件，则SQL语句为<code>select * from t_emp where and age = ? and sex = ? and email = ?</code>，此时<code>where</code>会与<code>and</code>连用，SQL语句会报错
<ul>
<li>如果加上一个恒成立条件，则SQL语句为<code>select * from t_emp where 1= 1 and age = ? and sex = ? and email = ?</code>，此时不报错</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where 1=1</span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and emp_name = #&#123;empName&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and age = #&#123;age&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and sex = #&#123;sex&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and email = #&#123;email&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="where"><a class="markdownIt-Anchor" href="#where"></a> where</h2>
<ul>
<li>where和if一般结合使用：</li>
<li>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字
<ul>
<li>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and/or去掉</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			emp_name = #&#123;empName&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and age = #&#123;age&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and sex = #&#123;sex&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and email = #&#123;email&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>注意：where标签不能去掉条件后多余的and/or</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这种用法是错误的，只能去掉条件前面的and/or，条件后面的不行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">emp_name = #&#123;empName&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">	age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="trim"><a class="markdownIt-Anchor" href="#trim"></a> trim</h2>
<ul>
<li>trim用于去掉或添加标签中的内容</li>
<li>常用属性</li>
<li>prefix：在trim标签中的内容的前面添加某些内容
<ul>
<li>suffix：在trim标签中的内容的后面添加某些内容</li>
<li>prefixOverrides：在trim标签中的内容的前面去掉某些内容</li>
<li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li>
</ul>
</li>
<li>若trim中的标签都不满足条件，则trim标签没有任何效果，也就是只剩下<code>select * from t_emp</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			emp_name = #&#123;empName&#125; and</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			age = #&#123;age&#125; and</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			sex = #&#123;sex&#125; or</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			email = #&#123;email&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByCondition</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">	List&lt;Emp&gt; emps= mapper.getEmpByCondition(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">	System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/12MyBatis/trim%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="" /></p>
<h2 id="choose-when-otherwise"><a class="markdownIt-Anchor" href="#choose-when-otherwise"></a> choose、when、otherwise</h2>
<ul>
<li><code>choose、when、otherwise</code>相当于<code>if...else if..else</code></li>
<li>when至少要有一个，otherwise至多只有一个</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				emp_name = #&#123;empName&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				age = #&#123;age&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				sex = #&#123;sex&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				email = #&#123;email&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">				did = 1</span><br><span class="line">			<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpByChoose</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.getEmpByChoose(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">	System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/12MyBatis/choose%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="" /></p>
<ul>
<li>相当于<code>if a else if b else if c else d</code>，只会执行其中一个</li>
</ul>
<h2 id="foreach"><a class="markdownIt-Anchor" href="#foreach"></a> foreach</h2>
<ul>
<li>
<p>属性：</p>
</li>
<li>
<p>collection：设置要循环的数组或集合</p>
<ul>
<li>item：表示集合或数组中的每一个数据</li>
<li>separator：设置循环体之间的分隔符，分隔符前后默认有一个空格，如<code>,</code></li>
<li>open：设置foreach标签中的内容的开始符</li>
<li>close：设置foreach标签中的内容的结束符</li>
</ul>
</li>
<li>
<p>批量删除</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(Integer[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">	delete from t_emp where eid in</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">		#&#123;eid&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMoreByArray</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMoreByArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="Resources/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png" alt="" /></p>
</li>
<li>
<p>批量添加</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreByList(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">	insert into t_emp values</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">		(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertMoreByList</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">	<span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;b&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">	<span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;c&quot;</span>,<span class="number">1</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@321.com&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">	List&lt;Emp&gt; emps = Arrays.asList(emp1, emp2, emp3);</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertMoreByList(emps);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="Resources/foreach%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png" alt="" /></p>
</li>
</ul>
<h2 id="sql片段"><a class="markdownIt-Anchor" href="#sql片段"></a> SQL片段</h2>
<ul>
<li>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</li>
<li>声明sql片段：<code>&lt;sql&gt;</code>标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>引用sql片段：<code>&lt;include&gt;</code>标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="mybatis的缓存"><a class="markdownIt-Anchor" href="#mybatis的缓存"></a> MyBatis的缓存</h1>
<h2 id="mybatis的一级缓存"><a class="markdownIt-Anchor" href="#mybatis的一级缓存"></a> MyBatis的一级缓存</h2>
<ul>
<li>
<p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</p>
</li>
<li>
<p>使一级缓存失效的四种情况：</p>
<ol>
<li>不同的SqlSession对应不同的一级缓存</li>
<li>同一个SqlSession但是查询条件不同</li>
<li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li>
<li>同一个SqlSession两次查询期间手动清空了缓存</li>
</ol>
</li>
</ul>
<h2 id="mybatis的二级缓存"><a class="markdownIt-Anchor" href="#mybatis的二级缓存"></a> MyBatis的二级缓存</h2>
<ul>
<li>
<p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p>
</li>
<li>
<p>二级缓存开启的条件</p>
<ol>
<li>在核心配置文件中，设置全局配置属性cacheEnabled=“true”，默认为true，不需要设置</li>
<li>在映射文件中设置标签<cache /></li>
<li>二级缓存必须在SqlSession关闭或提交之后有效</li>
<li>查询的数据所转换的实体类类型必须实现序列化的接口</li>
</ol>
</li>
<li>
<p>使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p>
</li>
</ul>
<h2 id="二级缓存的相关配置"><a class="markdownIt-Anchor" href="#二级缓存的相关配置"></a> 二级缓存的相关配置</h2>
<ul>
<li>在mapper配置文件中添加的cache标签可以设置一些属性</li>
<li>eviction属性：缓存回收策略</li>
<li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。
<ul>
<li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。</li>
<li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</li>
<li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li>
<li>默认的是 LRU</li>
</ul>
</li>
<li>flushInterval属性：刷新间隔，单位毫秒</li>
<li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</li>
<li>size属性：引用数目，正整数</li>
<li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li>
<li>readOnly属性：只读，true/false</li>
<li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。
<ul>
<li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false</li>
</ul>
</li>
</ul>
<h2 id="mybatis缓存查询的顺序"><a class="markdownIt-Anchor" href="#mybatis缓存查询的顺序"></a> MyBatis缓存查询的顺序</h2>
<ul>
<li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用</li>
<li>如果二级缓存没有命中，再查询一级缓存</li>
<li>如果一级缓存也没有命中，则查询数据库</li>
<li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li>
</ul>
<h2 id="整合第三方缓存ehcache了解"><a class="markdownIt-Anchor" href="#整合第三方缓存ehcache了解"></a> 整合第三方缓存EHCache（了解）</h2>
<h3 id="添加依赖"><a class="markdownIt-Anchor" href="#添加依赖"></a> 添加依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="各个jar包的功能"><a class="markdownIt-Anchor" href="#各个jar包的功能"></a> 各个jar包的功能</h3>
<table>
<thead>
<tr>
<th>jar包名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>mybatis-ehcache</td>
<td>Mybatis和EHCache的整合包</td>
</tr>
<tr>
<td>ehcache</td>
<td>EHCache核心包</td>
</tr>
<tr>
<td>slf4j-api</td>
<td>SLF4J日志门面包</td>
</tr>
<tr>
<td>logback-classic</td>
<td>支持SLF4J门面接口的一个具体实现</td>
</tr>
</tbody>
</table>
<h3 id="创建ehcache的配置文件ehcachexml"><a class="markdownIt-Anchor" href="#创建ehcache的配置文件ehcachexml"></a> 创建EHCache的配置文件ehcache.xml</h3>
<ul>
<li>名字必须叫<code>ehcache.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置二级缓存的类型"><a class="markdownIt-Anchor" href="#设置二级缓存的类型"></a> 设置二级缓存的类型</h3>
<ul>
<li>在xxxMapper.xml文件中设置二级缓存类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="加入logback日志"><a class="markdownIt-Anchor" href="#加入logback日志"></a> 加入logback日志</h3>
<ul>
<li>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。创建logback的配置文件<code>logback.xml</code>，名字固定，不可改变</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="ehcache配置文件说明"><a class="markdownIt-Anchor" href="#ehcache配置文件说明"></a> EHCache配置文件说明</h3>
<table>
<thead>
<tr>
<th>属性名</th>
<th>是否必须</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>maxElementsInMemory</td>
<td>是</td>
<td>在内存中缓存的element的最大数目</td>
</tr>
<tr>
<td>maxElementsOnDisk</td>
<td>是</td>
<td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td>
</tr>
<tr>
<td>eternal</td>
<td>是</td>
<td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td>
</tr>
<tr>
<td>overflowToDisk</td>
<td>是</td>
<td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td>
</tr>
<tr>
<td>timeToIdleSeconds</td>
<td>否</td>
<td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td>
</tr>
<tr>
<td>timeToLiveSeconds</td>
<td>否</td>
<td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td>
</tr>
<tr>
<td>diskSpoolBufferSizeMB</td>
<td>否</td>
<td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td>
</tr>
<tr>
<td>diskPersistent</td>
<td>否</td>
<td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false</td>
</tr>
<tr>
<td>diskExpiryThreadIntervalSeconds</td>
<td>否</td>
<td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td>
</tr>
<tr>
<td>memoryStoreEvictionPolicy</td>
<td>否</td>
<td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出</td>
</tr>
</tbody>
</table>
<h1 id="mybatis的逆向工程"><a class="markdownIt-Anchor" href="#mybatis的逆向工程"></a> MyBatis的逆向工程</h1>
<ul>
<li>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</li>
<li>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：</li>
<li>Java实体类
<ul>
<li>Mapper接口</li>
<li>Mapper映射文件</li>
</ul>
</li>
</ul>
<h2 id="创建逆向工程的步骤"><a class="markdownIt-Anchor" href="#创建逆向工程的步骤"></a> 创建逆向工程的步骤</h2>
<h3 id="添加依赖和插件"><a class="markdownIt-Anchor" href="#添加依赖和插件"></a> 添加依赖和插件</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- MyBatis核心依赖包 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建mybatis的核心配置文件-2"><a class="markdownIt-Anchor" href="#创建mybatis的核心配置文件-2"></a> 创建MyBatis的核心配置文件</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建逆向工程的配置文件"><a class="markdownIt-Anchor" href="#创建逆向工程的配置文件"></a> 创建逆向工程的配置文件</h3>
<ul>
<li>文件名必须是：<code>generatorConfig.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="执行mbg插件的generate目标"><a class="markdownIt-Anchor" href="#执行mbg插件的generate目标"></a> 执行MBG插件的generate目标</h3>
<ul>
<li><img src="/img/Java/12MyBatis/%E6%89%A7%E8%A1%8CMBG%E6%8F%92%E4%BB%B6%E7%9A%84generate%E7%9B%AE%E6%A0%87.png" alt="" /></li>
<li>如果出现报错：<code>Exception getting JDBC Driver</code>，可能是pom.xml中，数据库驱动配置错误</li>
<li>dependency中的驱动<img src="/img/Java/12MyBatis/dependency%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png" alt="" />
<ul>
<li>mybatis-generator-maven-plugin插件中的驱动<img src="/img/Java/12MyBatis/%E6%8F%92%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%A9%B1%E5%8A%A8.png" alt="" /></li>
<li>两者的驱动版本应该相同</li>
</ul>
</li>
<li>执行结果<img src="/img/Java/12MyBatis/%E9%80%86%E5%90%91%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="" /></li>
</ul>
<h2 id="qbc"><a class="markdownIt-Anchor" href="#qbc"></a> QBC</h2>
<h3 id="查询"><a class="markdownIt-Anchor" href="#查询"></a> 查询</h3>
<ul>
<li><code>selectByExample</code>：按条件查询，需要传入一个example对象或者null；如果传入一个null，则表示没有条件，也就是查询所有数据</li>
<li><code>example.createCriteria().xxx</code>：创建条件对象，通过andXXX方法为SQL添加查询添加，每个条件之间是and关系</li>
<li><code>example.or().xxx</code>：将之前添加的条件通过or拼接其他条件<br />
<img src="/img/Java/12MyBatis/example%E7%9A%84%E6%96%B9%E6%B3%95.png" alt="" /></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line">	<span class="comment">//名字为张三，且年龄大于等于20</span></span><br><span class="line">	example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);</span><br><span class="line">	<span class="comment">//或者did不为空</span></span><br><span class="line">	example.or().andDidIsNotNull();</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="line">	emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/12MyBatis/example%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="" /></p>
<h3 id="增改"><a class="markdownIt-Anchor" href="#增改"></a> 增改</h3>
<ul>
<li><code>updateByPrimaryKey</code>：通过主键进行数据修改，如果某一个值为null，也会将对应的字段改为null</li>
<li><code>mapper.updateByPrimaryKey(new Emp(1,&quot;admin&quot;,22,null,&quot;456@qq.com&quot;,3));</code>
<ul>
<li><img src="/img/Java/12MyBatis/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C1.png" alt="" /></li>
</ul>
</li>
<li><code>updateByPrimaryKeySelective()</code>：通过主键进行选择性数据修改，如果某个值为null，则不修改这个字段</li>
<li><code>mapper.updateByPrimaryKeySelective(new Emp(2,&quot;admin2&quot;,22,null,&quot;456@qq.com&quot;,3));</code>
<ul>
<li><img src="/img/Java/12MyBatis/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C2.png" alt="" /></li>
</ul>
</li>
</ul>
<h1 id="分页插件"><a class="markdownIt-Anchor" href="#分页插件"></a> 分页插件</h1>
<h2 id="分页插件使用步骤"><a class="markdownIt-Anchor" href="#分页插件使用步骤"></a> 分页插件使用步骤</h2>
<h3 id="添加依赖-2"><a class="markdownIt-Anchor" href="#添加依赖-2"></a> 添加依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置分页插件"><a class="markdownIt-Anchor" href="#配置分页插件"></a> 配置分页插件</h3>
<ul>
<li>在MyBatis的核心配置文件（mybatis-config.xml）中配置插件</li>
<li><img src="/img/Java/12MyBatis/%E9%85%8D%E7%BD%AE%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6.png" alt="" /></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="分页插件的使用"><a class="markdownIt-Anchor" href="#分页插件的使用"></a> 分页插件的使用</h2>
<h3 id="开启分页功能"><a class="markdownIt-Anchor" href="#开启分页功能"></a> 开启分页功能</h3>
<ul>
<li>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能</li>
<li>pageNum：当前页的页码
<ul>
<li>pageSize：每页显示的条数</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">	PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">	emps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/12MyBatis/%E5%88%86%E9%A1%B5%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="" /></p>
<h3 id="分页相关数据"><a class="markdownIt-Anchor" href="#分页相关数据"></a> 分页相关数据</h3>
<h4 id="方法一直接输出"><a class="markdownIt-Anchor" href="#方法一直接输出"></a> 方法一：直接输出</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	<span class="comment">//访问第一页，每页四条数据</span></span><br><span class="line">	Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">	<span class="comment">//在查询到List集合后，打印分页数据</span></span><br><span class="line">	System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>分页相关数据：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="方法二使用pageinfo"><a class="markdownIt-Anchor" href="#方法二使用pageinfo"></a> 方法二使用PageInfo</h4>
<ul>
<li>在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据</li>
<li>list：分页之后的数据
<ul>
<li>navigatePages：导航分页的页码数</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">	<span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">	<span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">	<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">	<span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">	PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">	List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">	PageInfo&lt;Emp&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(emps,<span class="number">5</span>);</span><br><span class="line">	System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>分页相关数据：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PageInfo&#123;</span><br><span class="line">pageNum=1, pageSize=4, size=4, startRow=1, endRow=4, total=8, pages=2, </span><br><span class="line">list=Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=8, pages=2, reasonable=false, pageSizeZero=false&#125;[Emp&#123;eid=1, empName=&#x27;admin&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=2, empName=&#x27;admin2&#x27;, age=22, sex=&#x27;男&#x27;, email=&#x27;456@qq.com&#x27;, did=3&#125;, Emp&#123;eid=3, empName=&#x27;王五&#x27;, age=12, sex=&#x27;女&#x27;, email=&#x27;123@qq.com&#x27;, did=3&#125;, Emp&#123;eid=4, empName=&#x27;赵六&#x27;, age=32, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;, did=1&#125;], </span><br><span class="line">prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=5, navigateFirstPage=1, navigateLastPage=2, navigatepageNums=[1, 2]&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>其中list中的数据等同于方法一中直接输出的page数据</p>
</li>
</ul>
<h4 id="常用数据"><a class="markdownIt-Anchor" href="#常用数据"></a> 常用数据：</h4>
<ul>
<li>pageNum：当前页的页码</li>
<li>pageSize：每页显示的条数</li>
<li>size：当前页显示的真实条数</li>
<li>total：总记录数</li>
<li>pages：总页数</li>
<li>prePage：上一页的页码</li>
<li>nextPage：下一页的页码</li>
<li>isFirstPage/isLastPage：是否为第一页/最后一页</li>
<li>hasPreviousPage/hasNextPage：是否存在上一页/下一页</li>
<li>navigatePages：导航分页的页码数</li>
<li>navigatepageNums：导航分页的页码，[1,2,3,4,5]</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>阶段3</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM配置文件</title>
    <url>/2022/10/25/JAVA/14SSM_CRUD/</url>
    <content><![CDATA[<h2 id="导入包"><a class="markdownIt-Anchor" href="#导入包"></a> 导入包</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span>  <span class="comment">&lt;!-- 设置spring版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- springMVC --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring 连接数据库，事务管理器 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 管理切面 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis核心 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis整合spring的 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试，mysql驱动 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- pagehelper分页插件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- servlet-api --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 处理json数据的依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实现文件上传的依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring5和thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 内容导出下载 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置webxml"><a class="markdownIt-Anchor" href="#配置webxml"></a> 配置<code>web.xml</code></h2>
<p>需要配置的东西：</p>
<ul>
<li>配置spring的编码过滤器</li>
<li>配置处理请求方式的过滤器</li>
<li>配置springMVC的前端控制器DispatcherServlet</li>
<li>配置Spring的监听器,在服务器启动时加载spring的配置文件</li>
<li>设置spring配置文件自定义的位置和名称</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置web.xml --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.配置spring的编码过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.处理请求方式的过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置springMVC的前端控制器DispatcherServlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置springMVC配置文件自定义的位置和名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将DispatcherServlet的初始化时间提前到服务器启动时 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置Spring的监听器,在服务器启动时加载spring的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 5.设置spring配置文件自定义的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置springmvcxml"><a class="markdownIt-Anchor" href="#配置springmvcxml"></a> 配置<code>SpringMVC.xml</code></h2>
<p>在<code>resources/</code>下创建<code>springMVC.xml</code>。文件名有要求，认真看<code>web.xml</code>中的注释</p>
<p>需要配置的：</p>
<ul>
<li>组件扫描，扫描控制层</li>
<li>配置Thymeleaf视图解析器</li>
<li>配置默认的servlet处理静态资源</li>
<li>开启mvc的注解驱动</li>
<li>视图控制器</li>
<li>配置文件上传解析器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 组件扫描，扫描控制层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xzt.ssm.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置默认的servlet处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启mvc的注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置文件上传解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置spring"><a class="markdownIt-Anchor" href="#配置spring"></a> 配置Spring</h2>
<h3 id="创建springxml"><a class="markdownIt-Anchor" href="#创建springxml"></a> 创建<code>spring.xml</code></h3>
<p>在<code>resources/</code>目录下创建<code>spring.xml</code>。文件名看<code>web.xml</code></p>
<p>需要配置的东西：</p>
<ul>
<li>扫描组件(控制层除外)，除控制层以外的其他包</li>
<li>引入jdbc.properties 并 配置数据源</li>
<li>配置事务管理器</li>
<li>开启事务的注解驱动</li>
<li>配置spring整合MyBatis</li>
<li>配置mapper扫描</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描组件(控制层除外)，除控制层以外的其他包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xzt.ssm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入jdbc.properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        开启事务的注解驱动</span></span><br><span class="line"><span class="comment">        将使用注解@Transactional标识的方法或类中所有的方法进行事务管理</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring整合mybatis --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置SqlSessionFactoryBean,可以直接在spring的ioc中直接获取SqlSession --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置mybatis的核心配置文件的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据源，设置了该选项后，mybatis-config.xml 文件中的数据源就可以不要了 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置类型别名所对应的包，同样在 mybatis-config.xml 文件中的typeAliases就可以不要了--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.xzt.ssm.pojo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            设置映射文件，同样在 mybatis-config.xml 文件中的mappers就可以不要了</span></span><br><span class="line"><span class="comment">            只有映射文件的包和mapper接口的包不一致时需要设置</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        mapper扫描，扫描mapper接口。</span></span><br><span class="line"><span class="comment">        配置mapper接口的扫描，可以将指定包下的所有mapper接口通过sqlSession创建代理对象，并将这些对象交给IOC容器管理</span></span><br><span class="line"><span class="comment">        就可以在service中直接装配mapper对象了</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.xzt.ssm.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="需要用到数据库驱动"><a class="markdownIt-Anchor" href="#需要用到数据库驱动"></a> 需要用到数据库驱动</h3>
<p>在<code>resources/</code>目录下创建<code>jdbc.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<h3 id="配置log4j"><a class="markdownIt-Anchor" href="#配置log4j"></a> 配置log4j</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置mybatis和mybatis逆向工程"><a class="markdownIt-Anchor" href="#配置mybatis和mybatis逆向工程"></a> 配置MyBatis和MyBatis逆向工程</h2>
<h3 id="配置mybatis"><a class="markdownIt-Anchor" href="#配置mybatis"></a> 配置MyBatis</h3>
<p>在<code>resources/</code>目录下创建<code>mybatis-config.xml</code>，进行mybatis配置。</p>
<p>绝大部分内容都在spring配置文件中配置过了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置分页插件,同样也可以在spring.xml中配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置mybatis逆向工程可以手写"><a class="markdownIt-Anchor" href="#配置mybatis逆向工程可以手写"></a> 配置MyBatis逆向工程💡可以手写</h3>
<p>调用逆向工程配置文件，可以生成数据库中表对应的实体类、对应的mapper接口以及配置文件。</p>
<p>在<code>src/</code>目录下创建<code>mbg.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 逆向工程生成实体类和dao接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成的类、接口、配置文件中没有注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm_crud&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;qqy.2520&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定javaBean生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.xzt.crud.bean&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 指定sql映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定dao接口生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.xzt.crud.dao&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定每个表的生成资料 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Department&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="调用mybatis逆向工程配置文件"><a class="markdownIt-Anchor" href="#调用mybatis逆向工程配置文件"></a> 调用mybatis逆向工程配置文件</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 调用配置文件逆向工程生成实体类和接口和配置文件</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    List&lt;String&gt; warnings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">overwrite</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">configFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/mbg.xml&quot;</span>);</span><br><span class="line">    <span class="type">ConfigurationParser</span> <span class="variable">cp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigurationParser</span>(warnings);</span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> cp.parseConfiguration(configFile);</span><br><span class="line">    <span class="type">DefaultShellCallback</span> <span class="variable">callback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultShellCallback</span>(overwrite);</span><br><span class="line">    <span class="type">MyBatisGenerator</span> <span class="variable">myBatisGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBatisGenerator</span>(config, callback, warnings);</span><br><span class="line">    myBatisGenerator.generate(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="14SSM_CRUD/image-20221026155853567.png" alt="image-20221026155853567" /></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2022/10/27/JAVA/15Git/</url>
    <content><![CDATA[<h1 id="git-常用命令"><a class="markdownIt-Anchor" href="#git-常用命令"></a> Git 常用命令</h1>
<h2 id="设置用户签名"><a class="markdownIt-Anchor" href="#设置用户签名"></a> 设置用户签名</h2>
<ul>
<li><code>git config --global user.name 用户名</code> 设置全局用户名</li>
<li><code>git config --global user.email 邮箱</code>  设置全局邮箱</li>
</ul>
<blockquote>
<p>注意，这里设置的用户签名和将来登录GitHub（或者其他代码托管中心）的账号没有任何关系</p>
</blockquote>
<h2 id="初始化本地库"><a class="markdownIt-Anchor" href="#初始化本地库"></a> 初始化本地库</h2>
<p>基本语法：</p>
<ul>
<li><code>git init</code></li>
</ul>
<p>在相应目录下会生成<code>.git</code>目录</p>
<h2 id="查看本地库状态"><a class="markdownIt-Anchor" href="#查看本地库状态"></a> 查看本地库状态</h2>
<p><code>git status</code></p>
<h2 id="添加暂存区"><a class="markdownIt-Anchor" href="#添加暂存区"></a> 添加暂存区</h2>
<p><code>git add .</code></p>
<h2 id="提交本地库"><a class="markdownIt-Anchor" href="#提交本地库"></a> 提交本地库</h2>
<p><code>git commit -m &quot;解释&quot;</code></p>
<h2 id="历史版本"><a class="markdownIt-Anchor" href="#历史版本"></a> 历史版本</h2>
<h3 id="查看历史版本"><a class="markdownIt-Anchor" href="#查看历史版本"></a> 查看历史版本</h3>
<ul>
<li><code>git reflog</code> 查看版本信息</li>
<li><code>git log</code> 查看版本详细信息</li>
</ul>
<h3 id="穿梭历史版本"><a class="markdownIt-Anchor" href="#穿梭历史版本"></a> 穿梭历史版本</h3>
<p><code>git reset --hard 版本号</code></p>
<h1 id="git-分支操作"><a class="markdownIt-Anchor" href="#git-分支操作"></a> Git 分支操作</h1>
<h2 id="什么是分支"><a class="markdownIt-Anchor" href="#什么是分支"></a> 什么是分支</h2>
<p>​		在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。</p>
<h2 id="分支的好处"><a class="markdownIt-Anchor" href="#分支的好处"></a> 分支的好处</h2>
<p>同时并行推进多个功能开发，提高效率。</p>
<p>各个分支在开发中互不影响。</p>
<h2 id="分支的操作"><a class="markdownIt-Anchor" href="#分支的操作"></a> 分支的操作</h2>
<h3 id="查看分支"><a class="markdownIt-Anchor" href="#查看分支"></a> 查看分支</h3>
<p><code>git branch -v</code></p>
<h3 id="创建分支"><a class="markdownIt-Anchor" href="#创建分支"></a> 创建分支</h3>
<p><code>git branch 分支名</code></p>
<h3 id="修改分支"><a class="markdownIt-Anchor" href="#修改分支"></a> 修改分支</h3>
<p>修改后只对本分支的内容影响</p>
<h3 id="切换分支"><a class="markdownIt-Anchor" href="#切换分支"></a> 切换分支</h3>
<p><code>git checkout 分支名</code></p>
<h3 id="合并分支"><a class="markdownIt-Anchor" href="#合并分支"></a> 合并分支</h3>
<p>先切换回master分支上</p>
<p><code>git merge 另一个分支名</code> ：将另一个分支的内容合并到master分支上。</p>
<h3 id="产生冲突"><a class="markdownIt-Anchor" href="#产生冲突"></a> 产生冲突</h3>
<p>合并分支时，两个分支在 <strong>同一个文件的同一个位置</strong> 有两套完全不同的修改。Git无法替我们决定使用哪一个时，须要人为决定新代码的内容。</p>
<ul>
<li>手动修改产生冲突的文件并保存。</li>
<li>然后再次执行一遍<code>git add .; git commit -m &quot;注释&quot;;</code></li>
</ul>
<h1 id="git-团队协作机制"><a class="markdownIt-Anchor" href="#git-团队协作机制"></a> Git 团队协作机制</h1>
<h2 id="团队内写作"><a class="markdownIt-Anchor" href="#团队内写作"></a> 团队内写作</h2>
<ul>
<li><code>git push</code> 推送到代码托管中心</li>
<li><code>git clone</code> 复制到自己的本地库中。</li>
<li><code>git pull</code> 拉取修改后的代码</li>
</ul>
<h2 id="跨团队协作"><a class="markdownIt-Anchor" href="#跨团队协作"></a> 跨团队协作</h2>
<ul>
<li><code>git fork</code></li>
<li><code>git clone</code></li>
<li><code>git merge</code></li>
</ul>
<h1 id="github-操作"><a class="markdownIt-Anchor" href="#github-操作"></a> GitHub 操作</h1>
<h2 id="远程仓库操作"><a class="markdownIt-Anchor" href="#远程仓库操作"></a> 远程仓库操作</h2>
<h3 id="创建远程仓库别名"><a class="markdownIt-Anchor" href="#创建远程仓库别名"></a> 创建远程仓库别名</h3>
<p>基本语法</p>
<ul>
<li><code>git remote -v</code> 查看当前所有远程地址别名</li>
<li><code>git remote add 别名 https远程地址</code> 创建别名</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/aaaatopos/git-demo.git</span><br></pre></td></tr></table></figure>
<h3 id="推送本地分支到远程仓库"><a class="markdownIt-Anchor" href="#推送本地分支到远程仓库"></a> 推送本地分支到远程仓库</h3>
<p><code>git push 别名 分支名</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h3 id="拉取本地库到本地"><a class="markdownIt-Anchor" href="#拉取本地库到本地"></a> 拉取本地库到本地</h3>
<p><code>git pull 别名 分支名</code></p>
<h3 id="克隆远程仓库到本地"><a class="markdownIt-Anchor" href="#克隆远程仓库到本地"></a> 克隆远程仓库到本地</h3>
<p>克隆<code>public</code>仓库的代码不需要登录账号</p>
<p><code>git clone https远程地址</code></p>
<p>克隆会做如下操作：1、拉取代码 。2、初始化本地仓库。3、创建别名（origin）</p>
<h3 id="团队协作"><a class="markdownIt-Anchor" href="#团队协作"></a> 团队协作</h3>
<p>需要将小组成员加入到远程代码仓库，才能够有权限。</p>
<p><img src="15Git/image-20221026204128926.png" alt="image-20221026204128926" /></p>
<h2 id="ssh-免密登录"><a class="markdownIt-Anchor" href="#ssh-免密登录"></a> SSH 免密登录</h2>
<ul>
<li>使用<code>ssh-keygen -t rsa -C github邮箱地址</code> 会在电脑的用户目录下生成<code>.ssh/</code>目录。</li>
<li>复制<code>.ssh</code>目录里公钥里面的内容 <code>id_rsa.pub</code>，粘贴到对应位置即可</li>
</ul>
<p><img src="15Git/image-20221026204631799.png" alt="image-20221026204631799" /></p>
<h1 id="idea-集成-git"><a class="markdownIt-Anchor" href="#idea-集成-git"></a> IDEA 集成 Git</h1>
<h2 id="配置git忽略文件"><a class="markdownIt-Anchor" href="#配置git忽略文件"></a> 配置Git忽略文件</h2>
<ul>
<li>
<p>创建<code>.ignore</code>文件。建议是<code>git.ignore</code>。建议放在用户的家目录下。</p>
</li>
<li>
<p>然后再<code>.gitconfig</code>中添加如下内容。需要使用正斜线</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">	excludesfile = C:/Users/17741/git.ignore</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Compiled class file</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># Log file</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"># Mobile Tools for Java (</span><br><span class="line">.mtj.</span><br><span class="line"></span><br><span class="line"># Package Files</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"># virtual machine crash logs, see</span><br><span class="line">http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line"></span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target</span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure>
<h2 id="定位git程序"><a class="markdownIt-Anchor" href="#定位git程序"></a> 定位Git程序</h2>
<p><code>file -&gt; setting -&gt; version control -&gt; Git</code></p>
<p><img src="15Git/image-20221026210157243.png" alt="image-20221026210157243" /></p>
<h2 id="初始化本地仓库"><a class="markdownIt-Anchor" href="#初始化本地仓库"></a> 初始化本地仓库</h2>
<p><img src="15Git/image-20221026210507046.png" alt="image-20221026210507046" /></p>
<h2 id="上传至远程代码仓库"><a class="markdownIt-Anchor" href="#上传至远程代码仓库"></a> 上传至远程代码仓库</h2>
<p><img src="15Git/image-20221026210728603.png" alt="image-20221026210728603" /></p>
<h2 id="切换版本"><a class="markdownIt-Anchor" href="#切换版本"></a> 切换版本</h2>
<p><img src="15Git/image-20221026211010703.png" alt="image-20221026211010703" /></p>
<h2 id="创建分支-2"><a class="markdownIt-Anchor" href="#创建分支-2"></a> 创建分支</h2>
<p><img src="15Git/image-20221026211112996.png" alt="image-20221026211112996" /></p>
<h2 id="切换分支-2"><a class="markdownIt-Anchor" href="#切换分支-2"></a> 切换分支</h2>
<p><img src="15Git/image-20221026211433674.png" alt="image-20221026211433674" /></p>
<h2 id="合并分支-2"><a class="markdownIt-Anchor" href="#合并分支-2"></a> 合并分支</h2>
<h3 id="正常合并"><a class="markdownIt-Anchor" href="#正常合并"></a> 正常合并</h3>
<p><img src="15Git/image-20221026211454034.png" alt="image-20221026211454034" /></p>
<h3 id="冲突合并"><a class="markdownIt-Anchor" href="#冲突合并"></a> 冲突合并</h3>
<p>需要手动合并。合并成功后会直接自动提交。</p>
<p><img src="15Git/image-20221026211709606.png" alt="image-20221026211709606" /></p>
<h1 id="idea-连接-github"><a class="markdownIt-Anchor" href="#idea-连接-github"></a> IDEA 连接 GitHub</h1>
<h2 id="登录账号"><a class="markdownIt-Anchor" href="#登录账号"></a> 登录账号</h2>
<p><img src="15Git/image-20221027092457165.png" alt="image-20221027092457165" /></p>
<p>在GitHub中创建Token</p>
<p><img src="15Git/image-20221027092313234.png" alt="image-20221027092313234" /></p>
<p>然后复制token至IDEA中即可。</p>
<h2 id="分享项目到github"><a class="markdownIt-Anchor" href="#分享项目到github"></a> 分享项目到GitHub</h2>
<p>可以在github上创建一个新的仓库。</p>
<p><img src="15Git/image-20221027092722458.png" alt="image-20221027092722458" /></p>
<h2 id="push推送到远程仓库"><a class="markdownIt-Anchor" href="#push推送到远程仓库"></a> push推送到远程仓库</h2>
<p><img src="15Git/image-20221027092858453.png" alt="image-20221027092858453" /></p>
<p>使用Https可能会失败，需要使用ssh。点击<code>orgin -&gt; define Remote</code></p>
<p><img src="15Git/image-20221027093208261.png" alt="image-20221027093208261" /></p>
<h1 id="国内代码托管中心"><a class="markdownIt-Anchor" href="#国内代码托管中心"></a> 国内代码托管中心</h1>
<h2 id="码云-gitee"><a class="markdownIt-Anchor" href="#码云-gitee"></a> 码云 Gitee</h2>
<h3 id="创建远程仓库"><a class="markdownIt-Anchor" href="#创建远程仓库"></a> 创建远程仓库</h3>
<p>主页：<a href="https://gitee.com/">https://gitee.com/</a></p>
<p>和 GItHub 操作相同</p>
<h2 id="acgit"><a class="markdownIt-Anchor" href="#acgit"></a> AcGit</h2>
<p>主页：<a href="https://git.acwing.com/">https://git.acwing.com/</a></p>
<h1 id="gitlab"><a class="markdownIt-Anchor" href="#gitlab"></a> GitLab</h1>
<p>主页：<a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p>
<p>安装时需要服务器。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis6</title>
    <url>/2022/11/01/JAVA/16Redis6/</url>
    <content><![CDATA[<h1 id="redis-概述"><a class="markdownIt-Anchor" href="#redis-概述"></a> Redis 概述</h1>
<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2>
<ul>
<li>Redis 是一个开源的 key-value 存储系统</li>
<li>和 Memcached 类似，它支持存储的 value 类型相对更多，包括 string (字符串)、list (链表)、set (集合)、zset (sorted set –有序集合) 和 hash（哈希类型）。</li>
<li>这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</li>
<li>在此基础上，Redis 支持各种不同方式的排序。</li>
<li>与 memcached 一样，为了保证效率，数据都是缓存在内存中。</li>
<li>区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。<br />
并且在此基础上实现了 master-slave (主从) 同步。</li>
</ul>
<h2 id="应用场景"><a class="markdownIt-Anchor" href="#应用场景"></a> 应用场景</h2>
<p><strong>配合关系型数据库做高速缓存</strong></p>
<ul>
<li>高频次，热门访问的数据，降低数据库IO；</li>
<li>分布式架构，做session共享。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210618160003509.png" alt="image-20210618160003509" /></p>
<p><strong>多样的数据结构存储持久化数据</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhangc233/pic@master/img/image-20210618160101040.png" alt="image-20210618160101040" /></p>
<h2 id="相关技术"><a class="markdownIt-Anchor" href="#相关技术"></a> 相关技术</h2>
<p><strong>Redis 使用的是单线程 + 多路 IO 复用技术</strong>：</p>
<p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用 select 和 poll 函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）。</p>
<p><strong>串行 vs 多线程 + 锁（memcached） vs 单线程 + 多路 IO 复用 (Redis)</strong>（与 Memcache 三点不同：支持多数据类型，支持持久化，单线程 + 多路 IO 复用） 。</p>
<h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2>
<p>Redis 是需要安装在Linux系统中。并且要求系统中需要有C语言的环境gcc。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-6.2.7.tar.gz  <span class="comment"># 解压压缩包，压缩包从系统中下载</span></span><br><span class="line"><span class="built_in">cd</span> redis-6.2.7  <span class="comment"># 进入解压后的目录下</span></span><br><span class="line">make  <span class="comment"># 进行编译</span></span><br><span class="line">make install  <span class="comment"># 进行安装 默认安装目录 /usr/local/bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Redis 命令</span></span><br><span class="line">redis-server <span class="comment"># 启动redis服务</span></span><br><span class="line">redis-cli <span class="comment"># 通过客户端连接redis</span></span><br></pre></td></tr></table></figure>
<h1 id="redis-数据类型"><a class="markdownIt-Anchor" href="#redis-数据类型"></a> Redis 数据类型</h1>
<h2 id="redis-字符串string"><a class="markdownIt-Anchor" href="#redis-字符串string"></a> Redis 字符串String</h2>
<h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3>
<ul>
<li>String 是 Redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</li>
<li>String 类型是二进制安全的。意味着 Redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象。</li>
<li>String 类型是 Redis 最基本的数据类型，一个 Redis 中字符串 value 最多可以是 512M。</li>
</ul>
<h3 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h3>
<ul>
<li><code>set &lt;key&gt; &lt;value&gt;</code>：添加键值对指令</li>
<li><code>get &lt;key&gt;</code>：获取对应键的值</li>
<li><code>append &lt;key&gt; &lt;value&gt;</code>：将给定的value追加到原值的末尾</li>
<li><code>strlen &lt;key&gt;</code>：获得值的长度</li>
<li><code>setnx &lt;key&gt; &lt;value&gt;</code>：只有在不存在时，设置key的值</li>
<li><code>incr &lt;key&gt;</code>：将key中存储的数字加1。只能对数字进行操作。</li>
<li><code>decr &lt;key&gt;</code>：将key中存储的数字减1。</li>
<li><code>incrby/decrby &lt;key&gt; &lt;步长&gt;</code>：将key中存储的数字增减自定义的步长。</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装Python3以及pip3</title>
    <url>/2022/06/08/Ubuntu/01installPythonAndPIP/</url>
    <content><![CDATA[<h2 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h2>
<p>Ubuntu 16.04 安装后自带的是 <code>Python2.7</code> 和<code>Python3.5</code> ,如果有其他版本需要,本文章就提供一个下载安装配置的方法.</p>
<h2 id="下载-python"><a class="markdownIt-Anchor" href="#下载-python"></a> 下载 python</h2>
<p>可以在Python官网选择需要的Python版本，本文章以<code>Python3.6.13</code>来举例</p>
<p><a href="https://www.python.org/downloads/"> Python官网 </a></p>
<p><img src="/img/Ubuntu/image-20220608162801384.png" alt="image-20220608162801384" /></p>
<p>下载后缀是 <code>.tgz</code> 的软件包，下载完成后将数据包复制到自己的Ubuntu上，可以使用 <code>Xftp</code> 发送数据，这里不详细说.</p>
<p><img src="/img/Ubuntu/image-20220608162820549.png" alt="image-20220608162820549" /></p>
<p>在Ubuntu上将软件包进行解压,可以使用命令,也可以直接右键进行解压.</p>
<p><img src="/img/Ubuntu/image-20220613143027013.png" alt="image-20220613143027013" /></p>
<h2 id="配置python环境"><a class="markdownIt-Anchor" href="#配置python环境"></a> 配置Python环境</h2>
<p>进入<code>Python</code>文件夹，在<code>/user/local/</code>下创建安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /usr/local/python3</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/image-20220613143313174.png" alt="image-20220613143313174" /></p>
<p>在编译安装源码前先进行配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/python3 --with-ssl</span><br></pre></td></tr></table></figure>
<p><strong><img src="/img/Ubuntu/image-20220613143550505.png" alt="image-20220613143550505" /></strong></p>
<p>看到这个样子说明配置成功了</p>
<p><img src="/img/Ubuntu/image-20220613143725150.png" alt="image-20220613143725150" /></p>
<h2 id="编译安装python"><a class="markdownIt-Anchor" href="#编译安装python"></a> 编译安装Python</h2>
<p>然后开始编译安装<code>Python3.6</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/image-20220613143837752.png" alt="image-20220613143837752" /></p>
<p>编译安装结束，此时可能会报错，如下图，则需要安装<code>zlib*</code></p>
<p><img src="/img/Ubuntu/image-20220613144033166.png" alt="image-20220613144033166" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zlib*</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/image-20220613144148137.png" alt="image-20220613144148137" /></p>
<p>安装完成后再次进行安装编译，编译完成后可以看到成功了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/image-20220613144309700.png" alt="image-20220613144309700" /></p>
<h2 id="链接python3"><a class="markdownIt-Anchor" href="#链接python3"></a> 链接Python3</h2>
<p>将系统自带的<code>python3.5</code>备份一份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> /usr/bin/python3 /usr/bin/python3_old</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/image-20220613144526729.png" alt="image-20220613144526729" /></p>
<p>将新安装的<code>python3.6</code>链接到<code>python3</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/python3/bin/python3.6 /usr/bin/python3</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/image-20220613144628712.png" alt="image-20220613144628712" /></p>
<p>再次查看<code>python3</code>,可以看到<code>python3</code>已经是<code>3.6.13</code>了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/image-20220613144828192.png" alt="image-20220613144828192" /></p>
<h2 id="链接pip3"><a class="markdownIt-Anchor" href="#链接pip3"></a> 链接pip3</h2>
<p>同样的方法将<code>python3.6</code>自带的<code>pip3</code>链接到系统中的<code>pip3</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/image-20220613144940734.png" alt="image-20220613144940734" /></p>
<p>查看<code>pip3</code>的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/image-20220613145044825.png" alt="image-20220613145044825" /></p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>疑难杂症</tag>
        <tag>python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装LLVM7.1.0 和 Clang</title>
    <url>/2022/06/15/Ubuntu/02InstallLLVM/</url>
    <content><![CDATA[<h2 id="下载llvm710源码"><a class="markdownIt-Anchor" href="#下载llvm710源码"></a> 下载<code>llvm7.1.0</code>源码</h2>
<p><a href="https://releases.llvm.org/download.html#7.1.0"> LLVM7.1.0 源码 </a></p>
<p>在<code>LLVM</code>官网上下载，一般只需要下载这几个就可以了</p>
<p><img src="/img/Ubuntu/InstallLLVM/image-20220615094757923.png" alt="image-20220615094757923" /></p>
<p>然后将下载的压缩包传到虚拟机中，进行解压。</p>
<h2 id="llvmclang-环境搭建"><a class="markdownIt-Anchor" href="#llvmclang-环境搭建"></a> LLVM+Clang 环境搭建</h2>
<p>首先在<code>/home/user/</code>下面新建文件夹，存放刚下载的压缩包。（我这边下载的源码比较多，但是上面的四个是必须要有的）</p>
<p><img src="/img/Ubuntu/InstallLLVM/image-20220615095307426.png" alt="image-20220615095307426" /></p>
<p>进行解压，可以直接右键，也可以使用命令进行解压。解压好的如下图，</p>
<p><img src="/img/Ubuntu/InstallLLVM/image-20220615095458174.png" alt="image-20220615095458174" /></p>
<p>然后需要将所有的<code>-7.1.0.src</code>去掉。</p>
<ul>
<li>另外需要将<code>cfe-7.1.0.src</code>改名为<code>clang</code>，并将<code>clang-tools-extra</code>放在<code>./clang/tools/</code>中</li>
</ul>
<p><img src="/img/Ubuntu/InstallLLVM/image-20220615095757633.png" alt="image-20220615095757633" /></p>
<ul>
<li>将<code>clang</code>文件夹放在<code>./llvm/tools/</code>中</li>
</ul>
<p><img src="/img/Ubuntu/InstallLLVM/image-20220615095925229.png" alt="image-20220615095925229" /></p>
<ul>
<li>将<code>compiler-rt</code>放在<code>./llvm/projects/</code>中，如果下载了其他源码，也可以放在这个位置</li>
</ul>
<p><img src="/img/Ubuntu/InstallLLVM/image-20220615100040399.png" alt="image-20220615100040399" /></p>
<ul>
<li>在<code>./llvm/</code>目录下创建一个空的文件夹，命名为<code>build</code></li>
</ul>
<p><img src="/img/Ubuntu/InstallLLVM/image-20220615100146090.png" alt="image-20220615100146090" /></p>
<p>进入<code>build</code>目录下，进行后续操作。注意下面的所有操作均在<code>./llvm/build/</code>目录下进行</p>
<h2 id="使用cmake进行源码编译"><a class="markdownIt-Anchor" href="#使用cmake进行源码编译"></a> 使用cmake进行源码编译</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake ../ -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure>
<p>遇到如下情况，说明你的ubuntu还没有安装<code>cmake</code>，按照提示进行安装即可。</p>
<p><img src="/img/Ubuntu/InstallLLVM/image-20220615101035213.png" alt="image-20220615101035213" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install cmake  <span class="comment"># 安装cmake</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/InstallLLVM/image-20220615101207022.png" alt="image-20220615101207022" /></p>
<p>安装成功后继续指向上述命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake ../ -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure>
<p>看到如下提示则编译成功</p>
<p><img src="/img/Ubuntu/InstallLLVM/image-20220615121643392.png" alt="image-20220615121643392" /></p>
<h2 id="使用make编译链接源文件"><a class="markdownIt-Anchor" href="#使用make编译链接源文件"></a> 使用make编译链接源文件</h2>
<p>继续执行<code>make</code>命令，这个过程比较慢，可以开多个线程<code>-j8</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/InstallLLVM/image-20220615101644724.png" alt="image-20220615101644724" /></p>
<h2 id="进行安装"><a class="markdownIt-Anchor" href="#进行安装"></a> 进行安装</h2>
<p>编译完成后使用<code>sudo make install</code>进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<h2 id="版本查看"><a class="markdownIt-Anchor" href="#版本查看"></a> 版本查看</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">llvm-config --version</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>LLVM</tag>
        <tag>Ubuntu</tag>
        <tag>疑难杂症</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu apt-get安装时报错</title>
    <url>/2022/06/22/Ubuntu/03apt-get/</url>
    <content><![CDATA[<h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2>
<p>在Ubuntu中使用<code>apt-get</code>进行安装时产生了如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E: Could not get lock /var/lib/dpkg/lock-frontend - open (11: Resource temporarily unavailable)</span><br><span class="line">E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/apt-get/1-1.jpg" alt="1-1" /></p>
<h2 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h2>
<p>分别执行下面三条命令，执行完成后则恢复正常。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> /var/lib/dpkg/lock-frontend</span><br><span class="line">sudo <span class="built_in">rm</span> /var/lib/dpkg/lock</span><br><span class="line">sudo <span class="built_in">rm</span> /var/cache/apt/archives/lock</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/apt-get/1-2.jpg" alt="1-2" /></p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>疑难杂症</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装LLFI及所用的工具</title>
    <url>/2022/06/25/Ubuntu/05InstallLLFI/</url>
    <content><![CDATA[<h2 id="安装python3或者更高版本"><a class="markdownIt-Anchor" href="#安装python3或者更高版本"></a> 安装python3或者更高版本</h2>
<p>这部分在另一篇文章中写到了。</p>
<p><a href="http://atopos-blog.cn/2022/06/08/Ubuntu/01installPythonAndPIP/"> Ubuntu 安装Python3以及pip3 </a></p>
<h2 id="安装cmake"><a class="markdownIt-Anchor" href="#安装cmake"></a> 安装cmake</h2>
<p>直接使用<code>apt-get</code>进行安装即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install cmake</span><br></pre></td></tr></table></figure>
<h2 id="安装tcsh-shell"><a class="markdownIt-Anchor" href="#安装tcsh-shell"></a> 安装tcsh shell</h2>
<p>直接使用<code>apt-get</code>进行安装即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tcsh</span><br></pre></td></tr></table></figure>
<h2 id="安装jdk8"><a class="markdownIt-Anchor" href="#安装jdk8"></a> 安装JDK8</h2>
<p><a href="https://pan.baidu.com/s/1NC4dZJNGtBPlWR_M_pjJKA"> JDK 下载链接 </a>  【密码：pw24】</p>
<p>将下载的JDK源代码包（<code>.tar.gz</code>文件）复制到目标虚拟机，并进行解压。</p>
<p><img src="/img/Ubuntu/InstallLLFI/image-20220625161650677.png" alt="image-20220625161650677" /></p>
<p>创建需要存放java的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /usr/local/java</span><br></pre></td></tr></table></figure>
<p>讲解压后的文件移动至新创建的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> jdk1.8.0_241 /usr/local/java/</span><br></pre></td></tr></table></figure>
<p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/InstallLLFI/2.jpg" alt="2" /></p>
<p>在打开的配置文件后加上以下几行</p>
<p>注意：<code>JAVA_HOME</code>后面跟的是自己的安装路径，如果和上面的步骤一样，则不用修改。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">JAVA<span class="built_in">_</span>HOME=/usr/local/java/jdk1.8.0<span class="built_in">_</span>241</span><br><span class="line">CLASSPATH=<span class="built_in">$</span>JAVA<span class="built_in">_</span>HOME/lib/</span><br><span class="line">PATH=<span class="built_in">$</span>PATH:<span class="built_in">$</span>JAVA<span class="built_in">_</span>HOME/bin</span><br><span class="line">export PATH JAVA<span class="built_in">_</span>HOME CLASSPATH</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/InstallLLFI/3.jpg" alt="3" /></p>
<p>重新启动配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<p>查看JDK版本</p>
<p>出现如下输出则安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/InstallLLFI/4.jpg" alt="4" /></p>
<h2 id="安装llfi"><a class="markdownIt-Anchor" href="#安装llfi"></a> 安装LLFI⭐</h2>
<p>安装LLFI前务必确保前面的工具和环境配置好，否则会报错。</p>
<p><a href="https://pan.baidu.com/s/1gUs-sIg9pvBtRqjc1tzYtA"> LLFI套件下载链接 </a> 【密码：gdi9】</p>
<p>将整个文件夹复制到自己的Ubuntu虚拟机上。在虚拟机中将下载的<code>LLFI/</code>文件夹下面的四个压缩包移动至<code>./LLFI/downloads/</code>目录下并进行解压。</p>
<p>将解压的文件中的<code>clang-3.4</code>更名为<code>clang</code>并剪贴至<code>llvm-3.4/tools/</code>下，并将<code>llvm-3.4</code>更名为<code>llvmsrc</code>，将<code>LLFI-master</code>更名为<code>llfisrc</code>，将<code>PyYAML-3.11</code>更名为<code>pyyamlsrc</code>。</p>
<p>并将<code>llfisrc</code>、<code>llvmsrc</code>、<code>pyyamlsrc</code>剪贴至<code>/home/xzt/LLFI/</code>目录下（也就是<code>./downloads</code>的上层目录）</p>
<p><img src="/img/Ubuntu/InstallLLFI/image-20220626103018994.png" alt="image-20220626103018994" /></p>
<h3 id="安装pyyaml-311"><a class="markdownIt-Anchor" href="#安装pyyaml-311"></a> 安装<code>PyYAML-3.11</code></h3>
<ul>
<li>进入到<code>pyyamlsrc</code>目录下，运行如下命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 setup.py --without-libyaml install</span><br></pre></td></tr></table></figure>
<p>运行完即安装成功。</p>
<h3 id="安装llfi以及llvm-34"><a class="markdownIt-Anchor" href="#安装llfi以及llvm-34"></a> 安装<code>LLFI</code>以及<code>llvm-3.4</code></h3>
<ul>
<li>进入<code>/home/xzt/LLFI/</code>目录下，运行下面命令。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 install.py</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>疑难杂症</tag>
        <tag>LLFI</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu pip系列问题</title>
    <url>/2022/06/22/Ubuntu/04pip/</url>
    <content><![CDATA[<h2 id="问题1给pip进行换源"><a class="markdownIt-Anchor" href="#问题1给pip进行换源"></a> 问题1：给pip进行换源</h2>
<p>在<code>/home/xzt/</code>目录下创建<code>.pip/</code>目录，然后再<code>.pip/</code>下创建<code>pip.conf</code>文件。</p>
<p><img src="/img/Ubuntu/pip/image-20220622163816955.png" alt="image-20220622163816955" /></p>
<p>文件中写入如下内容即可。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">trusted-host = pypi.douban.com</span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br></pre></td></tr></table></figure>
<h2 id="问题2使用pip安装包时产生如下错误"><a class="markdownIt-Anchor" href="#问题2使用pip安装包时产生如下错误"></a> 问题2：使用pip安装包时产生如下错误</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR: Exception:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_internal/cli/base_command.py&quot;</span>, line 188, <span class="keyword">in</span> _main</span><br><span class="line">    status = self.run(options, args)</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_internal/commands/uninstall.py&quot;</span>, line 54, <span class="keyword">in</span> run</span><br><span class="line">    session = self.get_default_session(options)</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_internal/cli/req_command.py&quot;</span>, line 83, <span class="keyword">in</span> get_default_session</span><br><span class="line">    self._session = self.enter_context(self._build_session(options))</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_internal/cli/req_command.py&quot;</span>, line 93, <span class="keyword">in</span> _build_session</span><br><span class="line">    session = PipSession(</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_internal/network/session.py&quot;</span>, line 249, <span class="keyword">in</span> __init__</span><br><span class="line">    self.headers[<span class="string">&quot;User-Agent&quot;</span>] = user_agent()</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_internal/network/session.py&quot;</span>, line 132, <span class="keyword">in</span> user_agent</span><br><span class="line">    zip([<span class="string">&quot;name&quot;</span>, <span class="string">&quot;version&quot;</span>, <span class="string">&quot;id&quot;</span>], distro.linux_distribution()),</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_vendor/distro.py&quot;</span>, line 125, <span class="keyword">in</span> linux_distribution</span><br><span class="line">    <span class="built_in">return</span> _distro.linux_distribution(full_distribution_name)</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_vendor/distro.py&quot;</span>, line 681, <span class="keyword">in</span> linux_distribution</span><br><span class="line">    self.version(),</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_vendor/distro.py&quot;</span>, line 741, <span class="keyword">in</span> version</span><br><span class="line">    self.lsb_release_attr(<span class="string">&#x27;release&#x27;</span>),</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_vendor/distro.py&quot;</span>, line 903, <span class="keyword">in</span> lsb_release_attr</span><br><span class="line">    <span class="built_in">return</span> self._lsb_release_info.get(attribute, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_vendor/distro.py&quot;</span>, line 556, <span class="keyword">in</span> __get__</span><br><span class="line">    ret = obj.__dict__[self._fname] = self._f(obj)</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/site-packages/pip/_vendor/distro.py&quot;</span>, line 1014, <span class="keyword">in</span> _lsb_release_info</span><br><span class="line">    stdout = subprocess.check_output(cmd, stderr=devnull)</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/subprocess.py&quot;</span>, line 411, <span class="keyword">in</span> check_output</span><br><span class="line">    <span class="built_in">return</span> run(*popenargs, stdout=PIPE, <span class="built_in">timeout</span>=<span class="built_in">timeout</span>, check=True,</span><br><span class="line">  File <span class="string">&quot;/usr/local/python/lib/python3.8/subprocess.py&quot;</span>, line 512, <span class="keyword">in</span> run</span><br><span class="line">    raise CalledProcessError(retcode, process.args,</span><br><span class="line">subprocess.CalledProcessError: Command <span class="string">&#x27;(&#x27;</span>lsb_release<span class="string">&#x27;, &#x27;</span>-a<span class="string">&#x27;)&#x27;</span> returned non-zero <span class="built_in">exit</span> status 1.</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/pip/2-1.jpg" alt="2-1" /></p>
<h3 id="解决办法"><a class="markdownIt-Anchor" href="#解决办法"></a> 解决办法</h3>
<ul>
<li>找到<code>lsb_release.py</code>模块所在的目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo find / -name <span class="string">&#x27;lsb_release.py&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>将其复制到设置<code>python3.6</code>的系统模块加载位置，也就是报错处<code>subprocess.py</code>所在的目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span>  /usr/lib/python3/dist-packages/lsb_release.py /usr/local/python3/lib/python3.6/</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/pip/2-2.jpg" alt="2-2" /></p>
<h2 id="问题3使用pip安装matplotlib报错"><a class="markdownIt-Anchor" href="#问题3使用pip安装matplotlib报错"></a> 问题3：使用pip安装<code>matplotlib</code>报错</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Command <span class="string">&quot;/usr/local/python3/bin/python3.6 -u -c &quot;</span>import setuptools, tokenize;__file__=<span class="string">&#x27;/tmp/pip-install-x0_i3ps6/pillow/setup.py&#x27;</span>;f=getattr(tokenize, <span class="string">&#x27;open&#x27;</span>, open)(__file__);code=f.read().replace(<span class="string">&#x27;\r\n&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>);f.close();<span class="built_in">exec</span>(compile(code, __file__, <span class="string">&#x27;exec&#x27;</span>))<span class="string">&quot; install --record /tmp/pip-record-7_n87fln/install-record.txt --single-version-externally-managed --compile --user --prefix=&quot;</span> failed with error code 1 <span class="keyword">in</span> /tmp/pip-install-x0_i3ps6/pillow/</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/pip/1.jpg" alt="1" /></p>
<h3 id="解决办法-2"><a class="markdownIt-Anchor" href="#解决办法-2"></a> 解决办法</h3>
<p>先执行如下命令再进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libjpeg-dev zlib1g-dev</span><br><span class="line"></span><br><span class="line">pip3 install matplotlib --user</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/pip/2.jpg" alt="2" /></p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>疑难杂症</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>LLFI 工具学习与使用</title>
    <url>/2022/06/27/Ubuntu/06LLFIStudy/</url>
    <content><![CDATA[<h2 id="llfi使用步骤"><a class="markdownIt-Anchor" href="#llfi使用步骤"></a> LLFI使用步骤</h2>
<h3 id="complie编译生成中间代码"><a class="markdownIt-Anchor" href="#complie编译生成中间代码"></a> Complie编译生成中间代码</h3>
<p>将源文件进行编译生成<code>.ll</code>格式的中间代码。</p>
<ul>
<li>输入：源程序（<code>C/C++程序</code>）</li>
<li>输出：编译生成<code>.ll</code>文件或者<code>.bc</code>文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/LLFI-master/llvm/bin/clang -emit-llvm -S sample.c -o sample.ll</span><br><span class="line">~/LLFI-master/llvm/bin/clang -emit-llvm -c sample.c -o sample.bc</span><br></pre></td></tr></table></figure>
<h3 id="instrument工具插入回调函数"><a class="markdownIt-Anchor" href="#instrument工具插入回调函数"></a> Instrument工具插入回调函数</h3>
<p>在生成的中间代码(<code>.ll/.bc</code>文件)中插入回调函数，以进行分析和故障注入。可以在指定位置进行插入，指定位置是由<code>input.yaml</code>文件中指定要注入的故障确定。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/LLFI-master/llfi/bin/Instrucment --readable sample.ll</span><br><span class="line">~/LLFI-master/llfi/bin/Instrucment sample.bc</span><br></pre></td></tr></table></figure>
<ul>
<li>输入：编译生成的中间代码<code>.ll/.bc</code>，以及带有 <code>compileTime</code> 选项的 <code>input.yaml</code> 文件（没有在命令中体现，只需要将<code>input.yaml</code>和源代码放在同一目录下即可）</li>
<li>输出：两个 <code>.ll</code>（或 <code>.bc</code>）文件分别用于分析和故障注入。这些文件将分别称为 <code>sample-profiling.ll</code> 和 <code>sample-faultinjection.ll</code>。还会生成相应的可执行文件 <code>sample-profiling.exe</code> 和 <code>sample-faultInjection.exe</code>。</li>
</ul>
<h3 id="profiling-分析"><a class="markdownIt-Anchor" href="#profiling-分析"></a> Profiling 分析</h3>
<p>为了获取步骤2中标识的<code>.ll</code>文件中指定位置的动态执行计数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/LLFI-master/llfi/bin/Profile ./llfi/sample-profiling.exe &lt;程序参数&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>输入：分析可执行文件<code>sample-profiling.exe</code>，和程序所需要的参数</li>
<li>输出：<code>llfi-stat-profile.txt</code>，它是一个包含循环总数（即感兴趣的地方的执行实例）的文本文件，以及一个包含程序黄金输出的输出文件</li>
</ul>
<h3 id="fault-injection-故障注入"><a class="markdownIt-Anchor" href="#fault-injection-故障注入"></a> Fault Injection 故障注入</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/LLFI-master/llfi/bin/injectfault ./llfi/sample-faultinjection.exe &lt;程序参数&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>输入：<code>fault-injection</code> 可执行文件<code>sample-faultInjection.exe</code>，输入的<code>yaml</code> 文件填入运行时选项，尤其是<code>fault-injection</code> 运行次数和<code>faultinjector</code> 类型。此外，分析步骤 3 的输出。</li>
<li>输出：故障注入实验的结果，以及注入的日志文件和生成的输出文件。应用程序写入 stderr 的任何错误消息也会被记录下来。</li>
</ul>
<h2 id="inpuyyaml各指令含义"><a class="markdownIt-Anchor" href="#inpuyyaml各指令含义"></a> <code>inpuy.yaml</code>各指令含义</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaultTimeOut:</span> <span class="number">500</span> </span><br><span class="line"><span class="attr">compileOption:</span>  <span class="comment"># 定义LLFI的编译时选项</span></span><br><span class="line">    <span class="attr">instSelMethod:</span> <span class="comment"># 指令选择器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">insttype:</span></span><br><span class="line">          <span class="attr">include:</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="string">all</span></span><br><span class="line">          <span class="attr">exclude:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">ret</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">regSelMethod:</span> <span class="string">regloc</span> <span class="comment"># 寄存器选择器</span></span><br><span class="line">    <span class="attr">regloc:</span> <span class="string">dstreg</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">includeInjectionTrace:</span> <span class="comment"># 跟踪选项</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">forward</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">backward</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">tracingPropagation:</span> <span class="literal">True</span> <span class="comment"># trace dynamic instruction values.</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">tracingPropagationOption:</span></span><br><span class="line">        <span class="attr">maxTrace:</span> <span class="number">250</span> <span class="comment"># max number of instructions to trace during fault injection run</span></span><br><span class="line">        <span class="attr">debugTrace:</span> <span class="literal">True</span><span class="string">/False</span></span><br><span class="line">        <span class="attr">generateCDFG:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="attr">runOption:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">        <span class="attr">numOfRuns:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">fi_type:</span> <span class="string">bitflip</span></span><br></pre></td></tr></table></figure>
<h3 id="compileoption层次结构"><a class="markdownIt-Anchor" href="#compileoption层次结构"></a> <code>compileOption</code>层次结构</h3>
<blockquote>
<p>定义了LLFI的编译时选项，包括指令选择器、寄存器选择器、跟踪选项等。指令选择器和寄存器选择器可以用于指定故障注入的范围，通过配置这两个选择器，用户可以限制可能发生故障的潜在位置。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">compileOption:</span></span><br><span class="line">	<span class="comment">### 必须项目 ###</span></span><br><span class="line">    <span class="attr">instSelMethod:</span></span><br><span class="line">        <span class="string">&lt;content</span> <span class="string">of</span> <span class="string">inst</span> <span class="string">selector&gt;...</span></span><br><span class="line">    <span class="attr">regSelMethod:</span> <span class="string">&lt;content</span> <span class="string">of</span> <span class="string">reg</span> <span class="string">selector&gt;...</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">### 可选择项目 ###</span></span><br><span class="line">    <span class="attr">tracingPropagation:</span> <span class="literal">True</span><span class="string">/False</span></span><br><span class="line">    <span class="attr">tracingPropagationOption:</span></span><br><span class="line">		<span class="string">&lt;content</span> <span class="string">of</span> <span class="string">tracing</span> <span class="string">propagation</span> <span class="string">option&gt;</span></span><br><span class="line">	<span class="attr">includeInjectionTrace:</span></span><br><span class="line">	    <span class="bullet">-</span> <span class="string">forward</span></span><br><span class="line">	    <span class="bullet">-</span> <span class="string">backward</span></span><br></pre></td></tr></table></figure>
<h4 id="instselmethod"><a class="markdownIt-Anchor" href="#instselmethod"></a> instSelMethod</h4>
<blockquote>
<p>定义指令选择器<strong>instSelMethod</strong>是定义指令选择器的块。它位于***compileOption***的字典中。下面是这个块的结构：</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">instSelMethod:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;insttype/funcname/customInstselector&gt;:</span></span><br><span class="line">      <span class="attr">include:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&lt;inst</span> <span class="string">types/func</span> <span class="string">names/name</span> <span class="string">of</span> <span class="string">custom</span> <span class="string">inst</span> <span class="string">selector&gt;</span></span><br><span class="line">      <span class="attr">exclude:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&lt;inst</span> <span class="string">types/func</span> <span class="string">names&gt;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&lt;command</span> <span class="string">line</span> <span class="string">options</span> <span class="string">for</span> <span class="string">the</span> <span class="string">inst</span> <span class="string">selector&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LLVM</category>
        <category>LLFI</category>
      </categories>
      <tags>
        <tag>故障注入</tag>
        <tag>Ubuntu</tag>
        <tag>LLFI</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM CFG控制流图可视化</title>
    <url>/2022/07/04/Ubuntu/07drawCFG/</url>
    <content><![CDATA[<h2 id="安装组件"><a class="markdownIt-Anchor" href="#安装组件"></a> 安装组件</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y graphviz-doc libgraphviz-dev graphviz</span><br></pre></td></tr></table></figure>
<h2 id="示例程序"><a class="markdownIt-Anchor" href="#示例程序"></a> 示例程序</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// file test.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x= <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">11</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> z = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        z *= x * y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成llvm-ir文件"><a class="markdownIt-Anchor" href="#生成llvm-ir文件"></a> 生成<code>LLVM IR</code>文件</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang -S -emit-llvm test.c -o test.ll</span><br></pre></td></tr></table></figure>
<h2 id="调用控制流图"><a class="markdownIt-Anchor" href="#调用控制流图"></a> 调用控制流图</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opt -dot-callgraph test.ll  <span class="comment"># 生成.dot文件</span></span><br></pre></td></tr></table></figure>
<p><code>dot</code>文件会在当前目录下生成，不同版本的<code>llvm</code>可能<code>dot</code>文件的名字可能稍有不同，我使用的版本产生的dot文件是<code>callgraph.dot</code>。使用以下命令生成图片：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dot callgraph.dot -Tpng -o callgraph.png</span><br></pre></td></tr></table></figure>
<p><img src="/img/Ubuntu/07drawCFG/callgraph.png" alt="callgraph" /></p>
<h2 id="函数控制流图"><a class="markdownIt-Anchor" href="#函数控制流图"></a> 函数控制流图</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opt -dot-cfg test.ll</span><br></pre></td></tr></table></figure>
<p><code>dot</code>文件会在当前目录下生成，不同版本的<code>llvm</code>可能<code>dot</code>文件的名字可能稍有不同，我使用的版本产生的dot文件是<code>cfg.main.dot</code>。使用以下命令生成图片：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dot cfg.main.dot -Tpng -o cfg.main.png  <span class="comment"># 生成图片</span></span><br></pre></td></tr></table></figure>
<p>控制流图如下：</p>
<p><img src="/img/Ubuntu/07drawCFG/cfg.main.png" alt="cfg.main" /></p>
]]></content>
      <categories>
        <category>LLVM</category>
      </categories>
      <tags>
        <tag>LLVM</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04 下Anaconda的安装与使用</title>
    <url>/2022/07/21/Ubuntu/08InstallAnconda/</url>
    <content><![CDATA[<h2 id="anaconda下载与安装"><a class="markdownIt-Anchor" href="#anaconda下载与安装"></a> Anaconda下载与安装</h2>
<h3 id="下载anaconda"><a class="markdownIt-Anchor" href="#下载anaconda"></a> 下载Anaconda</h3>
<ul>
<li>官方下载地址：<a href="https://www.continuum.io/downloads">https://www.continuum.io/downloads</a></li>
<li>清华大学开源镜像地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a></li>
</ul>
<p>官方下载地址往往比较慢，这里较为推荐去清华开源镜像地址下载，选择好自己的操作系统和想要安装的软件版本就好了。</p>
<p><img src="/img/Ubuntu/08InstallAnconda/image-20220712212728662.png" alt="image-20220712212728662" /></p>
<p>这里下载了<code>Anconda3-5.3.0-Linux-x86_64.sh</code></p>
<h3 id="安装anaconda"><a class="markdownIt-Anchor" href="#安装anaconda"></a> 安装Anaconda</h3>
<ul>
<li>打开下载的文件所在位置</li>
<li>运行安装<code>.sh</code>文件命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash Anaconda3-5.3.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>然后一路按Enter键查看安装说明</li>
</ul>
<h2 id="配置清华镜像源"><a class="markdownIt-Anchor" href="#配置清华镜像源"></a> 配置清华镜像源</h2>
<p>首先，输入命令 <code>conda config --show channels</code> 能够显示出所有channels的信息，一般是defaults的源，下载速度比较慢，不太友好，清华源镜像资源包齐全，下载速度，因此常配置成清华源。</p>
<ul>
<li>编辑文件<code>gedit ~/.condarc</code>，复制下面内容至文件中</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/Paddle/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/fastai/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line"></span><br><span class="line">show_channel_urls: true</span><br><span class="line">ssl_verify: false</span><br></pre></td></tr></table></figure>
<p>配置好的镜像源写入anaconda3根目录的 <code>~/.condarc</code> 文件下，可以用命令 <code>cat ~/.condarc</code> 查看。<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华大学开源镜像 - Anaconda 镜像使用帮助</a> 中推荐生成的 <code>.condarc</code> 文件内容如下:</p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>疑难杂症</tag>
        <tag>anconda</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖项目实战</title>
    <url>/2023/02/17/JAVA/17ReggieProject/</url>
    <content><![CDATA[<h1 id="瑞吉外卖项目实战"><a class="markdownIt-Anchor" href="#瑞吉外卖项目实战"></a> 瑞吉外卖项目实战</h1>
<h1 id="第一章-项目准备"><a class="markdownIt-Anchor" href="#第一章-项目准备"></a> 第一章 项目准备</h1>
<h2 id="开发环境搭建"><a class="markdownIt-Anchor" href="#开发环境搭建"></a> 开发环境搭建</h2>
<h3 id="数据库环境搭建"><a class="markdownIt-Anchor" href="#数据库环境搭建"></a> 数据库环境搭建</h3>
<p>创建数据库reggie</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create database reggie character <span class="built_in">set</span> utf8mb4;</span><br></pre></td></tr></table></figure>
<p>运行sql文件，进行表结构的快速创建。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> sql文件绝对目录;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/17ReggieProject/image-20230216100735742.png" alt="image-20230216100735742" /></p>
<h3 id="maven环境搭建"><a class="markdownIt-Anchor" href="#maven环境搭建"></a> maven环境搭建</h3>
<p>创建项目reggie_take_out，检查maven、jre、jdk</p>
<p>maven使用本地仓库</p>
<p><img src="/img/Java/17ReggieProject/image-20230216102831905.png" alt="image-20230216102831905" /></p>
<p>maven换源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroups</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxies</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- maven自动下载的jar包，会存放到该目录下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\maven\apache-maven-3.8.6\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Repository Switchboard<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>ibiblio<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mirrors.ibiblio.org/pub/mirrors/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jboss-public-repository-group<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>JBoss Public Repository Group<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>google-maven-central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Google Maven Central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven-central.storage.googleapis.com</span><br><span class="line">            <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 中央仓库在中国的镜像 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven.net.cn<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>oneof the central mirrors in china<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.net.cn/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>编写项目配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">&lt;/img/Java/17ReggieProject xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nuaa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reggie_take_out<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org./img/Java/17ReggieProjectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;//img/Java/17ReggieProject&gt;</span><br></pre></td></tr></table></figure>
<p>配置spring配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称，可选</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">qqy.2520</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure>
<p>编写项目启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * springboot的启动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span>  <span class="comment">// 记录日志信息</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class, args);</span><br><span class="line">        log.info(<span class="string">&quot;项目启动成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="webmvc映射配置"><a class="markdownIt-Anchor" href="#webmvc映射配置"></a> webmvc映射配置</h3>
<p>编写一个配置类，实现搜索路径和静态资源的映射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * springmvc配置文件</span></span><br><span class="line"><span class="comment"> * 搜索路径与静态资源的映射配置文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span>  <span class="comment">// 注解，表示这是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始静态资源映射....&quot;</span>);</span><br><span class="line">        <span class="comment">// 路径地址和静态资源的映射</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后台系统登录功能"><a class="markdownIt-Anchor" href="#后台系统登录功能"></a> 后台系统登录功能</h2>
<h3 id="导入员工实体类"><a class="markdownIt-Anchor" href="#导入员工实体类"></a> 导入员工实体类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber;  <span class="comment">// 身份证号 对应数据库中的id_number,在配置文件中已经做了相应配置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建对应的mapper-service-controller"><a class="markdownIt-Anchor" href="#创建对应的mapper-service-controller"></a> 创建对应的mapper、service、controller</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span>  <span class="comment">// 注解，表示是dao持久层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Employee&gt; &#123;</span><br><span class="line">    <span class="comment">//mybatis-plus 封装了很多方法，所以基本不用写了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.EmployeeService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>  <span class="comment">// 注解，表示是service业务层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EmployeeMapper, Employee&gt; <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.common.R;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.EmployeeService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.DigestUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="编写服务端返回结果类"><a class="markdownIt-Anchor" href="#编写服务端返回结果类"></a> 编写服务端返回结果类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用返回结果，服务端响应的数据最终都会封装成此对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写业务逻辑"><a class="markdownIt-Anchor" href="#编写业务逻辑"></a> 编写业务逻辑</h3>
<p><img src="/img/Java/17ReggieProject/image-20230216154255440.png" alt="image-20230216154255440" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 员工登录</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request 用于获取session，保存session</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> employee 将前端传递的用户名和密码封装到Employee中，需要名称完全一致</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> employee.getUsername();</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.将密码进行md5加密处理</span></span><br><span class="line">    password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.根据页面提交的用户名username查询数据库</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(Employee::getUsername, employee.getUsername());</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.如果没有查询到则返回登录失败结果</span></span><br><span class="line">    <span class="keyword">if</span>(emp == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.密码比对，如果不一致则返回登录失败结果</span></span><br><span class="line">    <span class="keyword">if</span>(!emp.getPassword().equals(password)) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.查看员工状态，如果为已禁用状态，则返回员工已禁用结果</span></span><br><span class="line">    <span class="keyword">if</span>(emp.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.登录成功，将员工id存入session并返回登录成功结果</span></span><br><span class="line">    request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line">    <span class="keyword">return</span> R.success(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后台系统退出功能"><a class="markdownIt-Anchor" href="#后台系统退出功能"></a> 后台系统退出功能</h2>
<p>直接在controller中编写业务逻辑即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 员工推出</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request 用于清理session中的用户id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 返回给页面的结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.清理session中的用户id</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.返回结果</span></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="第二章-员工管理"><a class="markdownIt-Anchor" href="#第二章-员工管理"></a> 第二章 员工管理</h1>
<h2 id="完善登录功能"><a class="markdownIt-Anchor" href="#完善登录功能"></a> 完善登录功能</h2>
<p><strong>业务需求</strong> ：需要保证只有在登录后才可以访问主页面，未登录时则默认跳转至登录页面</p>
<p><strong>具体实现方法</strong> ：使用 <strong>拦截器</strong> 或者 <strong>过滤器</strong> ，在过滤器或者拦截器中判断用户是否已经完成登录，如果没有登录则跳转至登录页面。</p>
<p>本项目使用过滤器进行完善</p>
<p><img src="/img/Java/17ReggieProject/image-20230216164520572.png" alt="image-20230216164520572" /></p>
<p><strong>注意</strong> ：需要在springboot启动类中需要添加<code>@ServletComponentScan</code>，才能在每次项目启动时先运行过滤器。</p>
<h3 id="登录页面过滤器"><a class="markdownIt-Anchor" href="#登录页面过滤器"></a> 登录页面过滤器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.common.R;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 检查用户是否已经完成登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 路径匹配器，支持通配符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义不需要请求的请求路径</span></span><br><span class="line">    <span class="keyword">private</span> String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">            <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取本次请求的url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求：&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line">        <span class="comment">// 2.判断本次请求是否需要处理</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(requestURI);</span><br><span class="line">        <span class="comment">// 3.如果不需要处理，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (check) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;本次请求&#123;&#125;不需要处理&quot;</span>,requestURI);</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.判断登录状态，如果已经登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户&#123;&#125;已登录&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        <span class="comment">// 5.如果未登录则返回登录页面,通过输出流的方式向客户端页面响应数据</span></span><br><span class="line">        response.getWriter().write(JSON.toJSONString(R.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路径匹配，检查本次请求是否需要放行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestURI 请求路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String requestURI)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span> (match == <span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="新增员工功能"><a class="markdownIt-Anchor" href="#新增员工功能"></a> 新增员工功能</h2>
<p><img src="/img/Java/17ReggieProject/image-20230216203213257.png" alt="image-20230216203213257" /></p>
<p>编写新增员工的业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;新增员工信息：&#123;&#125;&quot;</span>, employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置初始密码，并进行md5加密处理</span></span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得当前登录用户的id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    employee.setCreateUser(empId);</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line"></span><br><span class="line">    employeeService.save(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码可能存在问题，加入新增的员工用户名如果重复，则会报异常，因此需要对异常进行处理。</p>
<h3 id="编写全局异常处理"><a class="markdownIt-Anchor" href="#编写全局异常处理"></a> 编写全局异常处理⭐</h3>
<p>通常有两种处理方式：</p>
<ul>
<li>
<p>在controller方法中加入try、catch进行异常捕获。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    employeeService.save(employee);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;新增员工失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用异常处理器进行全局异常捕获</p>
</li>
</ul>
<p><strong>使用全局异常捕获</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLIntegrityConstraintViolationException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 全局异常处理，底层是基于代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span>  <span class="comment">// 扫描有这两种注解的controller类</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span>  <span class="comment">//声明处理异常的类型</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span> &#123;</span><br><span class="line">        log.error(ex.getMessage());</span><br><span class="line">        <span class="keyword">if</span>(ex.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>)) &#123;  <span class="comment">// 异常信息中是现实字段重复，则进行相应的处理</span></span><br><span class="line">            String[] split = ex.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="员工信息分页查询"><a class="markdownIt-Anchor" href="#员工信息分页查询"></a> 员工信息分页查询</h2>
<p>代码开发流程</p>
<p><img src="/img/Java/17ReggieProject/image-20230217095651425.png" alt="image-20230217095651425" /></p>
<h3 id="配置mybatis-plus分页插件"><a class="markdownIt-Anchor" href="#配置mybatis-plus分页插件"></a> 配置mybatis-plus分页插件⭐</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 配置mybatis-plus分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 生成一个Bean对象，并交给spring管理。</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成员工信息分页查询的业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分页查询员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> page 页码</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> pageSize 每页显示的数量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name 员工名字，用于模糊查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 返回类型为R&lt;Page&gt;,因为页面接收的json数据中有records和total两个，所以用Page</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">getEmployee</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;page = &#123;&#125;, pageSize = &#123;&#125;, name = &#123;&#125;&quot;</span>, page, pageSize, name);</span><br><span class="line">    <span class="comment">// 构造分页构造器</span></span><br><span class="line">    Page&lt;Employee&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>(page, pageSize);</span><br><span class="line">    <span class="comment">// 构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加过滤条件，用于模糊查询</span></span><br><span class="line">    queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class="line">    <span class="comment">// 添加排序条件，按照更新日期降序</span></span><br><span class="line">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    employeeService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="启用禁用员工账号"><a class="markdownIt-Anchor" href="#启用禁用员工账号"></a> 启用/禁用员工账号</h2>
<h3 id="代码开发"><a class="markdownIt-Anchor" href="#代码开发"></a> 代码开发</h3>
<p><img src="/img/Java/17ReggieProject/image-20230217153830469.png" alt="image-20230217153830469" /></p>
<h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id修改员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request 用与请求session中的employee的id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee 修改后的员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(empId);</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="存在的问题"><a class="markdownIt-Anchor" href="#存在的问题"></a> 存在的问题</h3>
<p>数据库中的id值是19位的long型数据，发送给前端页面时，前端js损失了精度，只保证了前16位数字，所以修改时获取的id和数据库中的不一致。</p>
<p>解决办法是，服务端给页面响应数据时，将 long型的数据统一转为string类型。</p>
<p><img src="/img/Java/17ReggieProject/image-20230217155244810.png" alt="image-20230217155244810" /></p>
<h3 id="配置对象映射器"><a class="markdownIt-Anchor" href="#配置对象映射器"></a> 配置对象映射器⭐</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="扩展消息转换器"><a class="markdownIt-Anchor" href="#扩展消息转换器"></a> 扩展消息转换器</h3>
<p>在项目启动时就会调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 扩展mvc框架的消息转换器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建消息转换器对象</span></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">// 设置对象转换器，底层使用Jackson将java对象转为json</span></span><br><span class="line">    messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">    <span class="comment">// 将上面的消息转换器对象追加到mvc框架的转换器集合中</span></span><br><span class="line">    converters.add(<span class="number">0</span>, messageConverter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编辑员工信息"><a class="markdownIt-Anchor" href="#编辑员工信息"></a> 编辑员工信息</h2>
<p>根据员工 id查询员工信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id查询员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id 页面传过来的员工id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>  <span class="comment">// 路径中/id的需要这样接收且需要@PathVariable关键字</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id查询员工信息&quot;</span>);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (employee != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> R.success(employee);</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到对应员工信息&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="第三章-分类管理"><a class="markdownIt-Anchor" href="#第三章-分类管理"></a> 第三章 分类管理</h1>
<h2 id="公共字段自动填充"><a class="markdownIt-Anchor" href="#公共字段自动填充"></a> 公共字段自动填充</h2>
<h3 id="公共字段"><a class="markdownIt-Anchor" href="#公共字段"></a> 公共字段</h3>
<p>当若干表中存在相同字段，例如创建时间、创建人、修改时间、修改人等字段，则将这些字段称为公共字段，因此需要将这些公共字段在某个地方统一处理，来简化开发。可以使用mybatis-plus提供的公共字段自动填充功能。</p>
<h3 id="实现步骤"><a class="markdownIt-Anchor" href="#实现步骤"></a> 实现步骤</h3>
<p><img src="/img/Java/17ReggieProject/image-20230217192302097.png" alt="image-20230217192302097" /></p>
<p>步骤1：在相应的实体类中添加<code>@TableField</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相应实体类的对应属性添加</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span> <span class="comment">// 插入时填充字段</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span>  <span class="comment">// 插入和更新时填充字段</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Long updateUser;</span><br></pre></td></tr></table></figure>
<p>步骤2：自定义元数据对象处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 自定义的元数据对象处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">// 注解作用：把普通的pojo实例化到spring容器中</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充【insert】.....&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新操作，自动填充</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充【update】.....&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line"></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="功能完善"><a class="markdownIt-Anchor" href="#功能完善"></a> 功能完善⭐</h3>
<p>上述代码中<code>updateUser</code>和<code>createUser</code>两个字段的值是写死的，但是在实际中，需要获取当前执行操作的用户id。因此需要将这部分功能进行完善。</p>
<p>可以使用<code>ThreadLocal</code>来解决此类问题，它是jdk提供的一个类。</p>
<p><img src="/img/Java/17ReggieProject/image-20230217195711831.png" alt="image-20230217195711831" /></p>
<p><code>ThreadLocal</code><strong>介绍</strong></p>
<p><img src="/img/Java/17ReggieProject/image-20230217200030934.png" alt="image-20230217200030934" /></p>
<p><strong>具体实现方法</strong> ：在<code>LoginCheckFilter</code>的<code>doFilter</code>方法中获取当前登录用户的id，并调用<code>ThreadLocal</code>的<code>set</code>方法来设置当前线程局部变量的值（用户id），然后在<code>MyMetaObjectHandler</code>的<code>updateFill</code>方法中调用<code>ThreadLocal</code>的<code>get</code>方法来获得当前线程所对应的线程局部变量的值。</p>
<h4 id="实现步骤-2"><a class="markdownIt-Anchor" href="#实现步骤-2"></a> 实现步骤</h4>
<p><img src="/img/Java/17ReggieProject/image-20230217200638084.png" alt="image-20230217200638084" /></p>
<p>步骤1：编写工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 基于ThreadLocal封装工具类，用户保存和获取当前登录用户id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>步骤2：绑定当前线程的用户id</p>
<p><img src="/img/Java/17ReggieProject/image-20230217201225326.png" alt="image-20230217201225326" /></p>
<p>步骤3：取出绑定的线程id</p>
<p><img src="/img/Java/17ReggieProject/image-20230217201320877.png" alt="image-20230217201320877" /></p>
<h2 id="新增分类"><a class="markdownIt-Anchor" href="#新增分类"></a> 新增分类</h2>
<h3 id="导入实体类"><a class="markdownIt-Anchor" href="#导入实体类"></a> 导入实体类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类型 1 菜品分类 2 套餐分类</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建mapper-service-controller"><a class="markdownIt-Anchor" href="#创建mapper-service-controller"></a> 创建mapper、service、controller</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.Category;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.Category;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.mapper.CategoryMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.CategoryService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 新增分类</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> category 页面输入的分类信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;category: &#123;&#125;&quot;</span>, category);</span><br><span class="line">    <span class="comment">// 如果name字段重复，则会抛异常，会跳转至 GlobalExceptionHandler 函数中执行异常处理。</span></span><br><span class="line">    <span class="comment">// 其中创建时间，更新时间，创建人，更新人，会因为实体类中的对应字段加了注解，使用公共字段自动填充了，所以不用处理。</span></span><br><span class="line">    categoryService.save(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分类信息分页查询"><a class="markdownIt-Anchor" href="#分类信息分页查询"></a> 分类信息分页查询</h2>
<p>和之前员工信息分页查询类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分类信息分页查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> page 页码</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> pageSize 每页条数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">getCategory</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;page: &#123;&#125;, pageInfo: &#123;&#125;&quot;</span>, page, pageSize);</span><br><span class="line">    <span class="comment">// 构造分页构造器</span></span><br><span class="line">    Page&lt;Category&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>(page, pageSize);</span><br><span class="line">    <span class="comment">// 构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 绑定条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort); <span class="comment">// 升序</span></span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    categoryService.page(pageInfo, queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除分类"><a class="markdownIt-Anchor" href="#删除分类"></a> 删除分类</h2>
<h3 id="需求分析"><a class="markdownIt-Anchor" href="#需求分析"></a> 需求分析</h3>
<p>在分类管理列表页面，可以对某个分类进行删除操作；需要注意的是当分类关联了菜品或者套餐时，此分类不允许删除。</p>
<h3 id="代码实现-3"><a class="markdownIt-Anchor" href="#代码实现-3"></a> 代码实现</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id删除分类信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 页面传过来的id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;删除的id是： &#123;&#125;&quot;</span>, id);</span><br><span class="line">    categoryService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码完善"><a class="markdownIt-Anchor" href="#代码完善"></a> 代码完善⭐</h3>
<p><img src="/img/Java/17ReggieProject/image-20230219162851125.png" alt="image-20230219162851125" /></p>
<ol>
<li>创建两个实体类：菜品Dish，套餐Detmeal</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 菜品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//0 停售 1 起售</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Setmeal</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:停用 1:启用</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>实现对应的mapper、service、controller接口或者类</li>
<li>代码完善</li>
</ol>
<p>首先在<code>CategoryServiceImpl</code>中重新写<code>remove</code>函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id删除分类，删除之前需要进行判断</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加查询条件，根据分类id进行查询</span></span><br><span class="line">    dishLambdaQueryWrapper.eq(Dish::getCategoryId, id);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">    <span class="comment">// 查询当前分类是否关联了餐品，如果已经关联，抛出一个业务异常。</span></span><br><span class="line">    <span class="keyword">if</span>(count1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 已经关联菜品，抛出一个业务异常。</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下已经关联菜品，不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询当前分类是否关联了套餐，如果已经关联，抛出一个业务异常。</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加查询条件，根据分类id进行查询</span></span><br><span class="line">    setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId, id);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">    <span class="keyword">if</span>(count2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 已经关联套餐，抛出一个业务异常。</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;当前分类下已经关联套餐，不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">super</span>.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后进行异常处理，先自定义一个异常处理函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 自定义业务异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再在全局的异常处理函数<code>GlobalExceptionHandler</code>中加入方法，主要是为了将异常信息显示在页面上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * custom自定义异常处理方法，主要是将异常提示信息显示在页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span>  <span class="comment">//声明处理异常的类型</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException ex)</span> &#123;</span><br><span class="line">    log.error(ex.getMessage());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.error(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改分类"><a class="markdownIt-Anchor" href="#修改分类"></a> 修改分类</h2>
<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 修改分类信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> category 页面传递的修改后的分类信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;修改分类信息：&#123;&#125;&quot;</span>, category);</span><br><span class="line">    <span class="comment">// 不需要进行更新时间或者更新人字段设置了。</span></span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="第四章-菜品管理"><a class="markdownIt-Anchor" href="#第四章-菜品管理"></a> 第四章 菜品管理</h1>
<h2 id="文件上传下载"><a class="markdownIt-Anchor" href="#文件上传下载"></a> 文件上传下载⭐⭐</h2>
<h3 id="文件上传"><a class="markdownIt-Anchor" href="#文件上传"></a> 文件上传❗</h3>
<p>页面上传组件设置</p>
<p><img src="/img/Java/17ReggieProject/image-20230220153722730.png" alt="image-20230220153722730" /></p>
<p>服务端接收文件配置</p>
<p><img src="/img/Java/17ReggieProject/image-20230220154146798.png" alt="image-20230220154146798" /></p>
<h3 id="文件下载"><a class="markdownIt-Anchor" href="#文件下载"></a> 文件下载</h3>
<p><img src="/img/Java/17ReggieProject/image-20230220154336114.png" alt="image-20230220154336114" /></p>
<h3 id="代码实现-4"><a class="markdownIt-Anchor" href="#代码实现-4"></a> 代码实现</h3>
<p>在<code>resources/application.yml</code>中添加配置。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件保存路径</span></span><br><span class="line"><span class="attr">reggie:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\</span></span><br></pre></td></tr></table></figure>
<p>实现代码接收并保存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.common.R;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * 文件上传和下载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String basePath;  <span class="comment">// 文件上传目录，配置再resources/application.yml中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 必须和前端input框的name属性名一致</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="comment">// 当前file是一个临时文件，需要转存到指定位置，否则本次请求完成后临时文件会删除</span></span><br><span class="line">        log.info(file.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 截取文件名后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用UUID重新生成文件名，防止文件名称重复造成文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + suffix;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个目录对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basePath);</span><br><span class="line">        <span class="comment">// 判断当前目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(!dir.exists()) &#123;</span><br><span class="line">            <span class="comment">// 目录不存在，需要创建</span></span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将临时文件转存到指定位置</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回文件名称</span></span><br><span class="line">        <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 输入流，通过输入流读取文件内容</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line">            <span class="comment">// 输出流，通过输出流将文件写回，在浏览器展示图片</span></span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置响应格式</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="新增菜品"><a class="markdownIt-Anchor" href="#新增菜品"></a> 新增菜品</h2>
<p>导入<code>DishFlavor</code>菜品口味实体类。创建对应的<code>mapper</code>、<code>service</code>、<code>controller</code>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">菜品口味</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishFlavor</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味数据list</span></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>交互过程</p>
<p><img src="/img/Java/17ReggieProject/image-20230220191812865.png" alt="image-20230220191812865" /></p>
<p>步骤1：先完成菜品分类信息的显示</p>
<p><img src="/img/Java/17ReggieProject/image-20230220192639017.png" alt="image-20230220192639017" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据条件查询分类数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> category 页面传过来的分类信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Category&gt;&gt; <span class="title function_">list</span><span class="params">(Category category)</span> &#123;</span><br><span class="line">    <span class="comment">// 条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加条件</span></span><br><span class="line">    queryWrapper.eq(category.getType() != <span class="literal">null</span>, Category::getType, category.getType());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加排序条件</span></span><br><span class="line">    queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line">    List&lt;Category&gt; categories = categoryService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(categories);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>步骤2：图片上传下载，之前已经完成。</p>
<p>步骤3：菜品信息保存</p>
<p>因为前端传递的信息包含数据库中两个表，所以需要重新导入一个实体类<code>DishDto</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.Dish;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.DishFlavor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为需要操作两张表，所以需要开启<strong>事务支持</strong> ⭐，首先需要在启动类中添加<code>@EnableTransactionManagement</code>注解， 开启事务支持。然后在<code>DishServiceImpl</code> 中实现具体的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 新增菜品，同时保存对应得口味数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span>  <span class="comment">// 操作两张表，需要绑定事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存菜品得基本信息到菜品表</span></span><br><span class="line">    <span class="built_in">this</span>.save(dishDto);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dishDto.getId(); <span class="comment">// 菜品id</span></span><br><span class="line"></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line">    <span class="comment">// 给每一项绑定dishid.  Lambda表达式</span></span><br><span class="line">    flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">        item.setDishId(dishId);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存菜品口味数据到菜品口味表dishFlavor</span></span><br><span class="line">    dishFlavorService.saveBatch(dishDto.getFlavors());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="菜品信息分页查询"><a class="markdownIt-Anchor" href="#菜品信息分页查询"></a> 菜品信息分页查询</h2>
<p><img src="/img/Java/17ReggieProject/image-20230220204149489.png" alt="image-20230220204149489" /></p>
<p>代码实现⭐</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜品信息分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page     页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 每页条数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name     菜品名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">getDish</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 构造分页构造器</span></span><br><span class="line">    Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;DishDto&gt; dishDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加过滤条件</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>, DishDto::getName, name);</span><br><span class="line">    <span class="comment">// 添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行分页查询</span></span><br><span class="line">    dishService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象的拷贝,将pageInfo中除了records的所有属性拷贝至dishDtoPage中</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo, dishDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line">    List&lt;DishDto&gt; list = records.stream().map((item) -&gt;&#123;</span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将item中的属性拷贝至dishDto中</span></span><br><span class="line">        BeanUtils.copyProperties(item, dishDto);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId(); <span class="comment">// 分类id</span></span><br><span class="line">        <span class="comment">// 根据id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">        dishDto.setCategoryName(categoryName);</span><br><span class="line">        <span class="keyword">return</span> dishDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    dishDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改菜品"><a class="markdownIt-Anchor" href="#修改菜品"></a> 修改菜品</h2>
<p><img src="/img/Java/17ReggieProject/image-20230221100533035.png" alt="image-20230221100533035" /></p>
<h3 id="菜品信息回显"><a class="markdownIt-Anchor" href="#菜品信息回显"></a> 菜品信息回显</h3>
<p>需要查询两张表：<code>dish</code>和<code>dish_flavor</code>两张表，所以在<code>DishService</code>中实现这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据id查询对应的菜品信息和口味信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id 菜品id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> DishDto <span class="title function_">geByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 查询菜品基本信息</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">    BeanUtils.copyProperties(dish, dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询当前菜品对应的口味信息，从dish_flavor表查询</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId, dish.getId());</span><br><span class="line">    List&lt;DishFlavor&gt; dishFlavors = dishFlavorService.list(queryWrapper);</span><br><span class="line">    dishDto.setFlavors(dishFlavors);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dishDto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现对应<code>controller</code>层代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据菜品id查询对应的菜品信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id 菜品id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;DishDto&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> dishService.geByIdWithFlavor(id);</span><br><span class="line">    <span class="keyword">return</span> R.success(dishDto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="菜品信息修改"><a class="markdownIt-Anchor" href="#菜品信息修改"></a> 菜品信息修改</h3>
<p>同样是修改两个表，同时还需要开启事务<code>@Transactional</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 更新菜品信息，同时更新对应的口味数据，需要操作两张表，dish、dishflavor</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dishDto)</span> &#123;</span><br><span class="line">    <span class="comment">// 更新新菜品表dish</span></span><br><span class="line">    <span class="built_in">this</span>.updateById(dishDto);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dish_flavor，清理当前菜品对应的口味数据，delete操作</span></span><br><span class="line">    LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(DishFlavor::getDishId, dishDto.getId());</span><br><span class="line"></span><br><span class="line">    dishFlavorService.remove(queryWrapper);</span><br><span class="line">    <span class="comment">// dish_flavor，重新添加当前菜品对应的口味数据，insert操作</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDto.getFlavors();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给每一项绑定dishid.  Lambda表达式</span></span><br><span class="line">    flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">        item.setDishId(dishDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    dishFlavorService.saveBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>controller</code>层代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改菜品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dishDto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span>&#123;</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;菜品信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="第五章-套餐管理"><a class="markdownIt-Anchor" href="#第五章-套餐管理"></a> 第五章 套餐管理</h1>
<h2 id="新增套餐"><a class="markdownIt-Anchor" href="#新增套餐"></a> 新增套餐</h2>
<p>需要两张表<code>setmeal</code>和<code>setmeal_dish</code>表</p>
<p><img src="/img/Java/17ReggieProject/image-20230221110857196.png" alt="image-20230221110857196" /></p>
<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐菜品关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称 （冗余字段）</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品原价</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//份数</span></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.Setmeal;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDto</span> <span class="keyword">extends</span> <span class="title class_">Setmeal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SetmealDish&gt; setmealDishes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的mapper、service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.SetmealDish;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.SetmealDish;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.mapper.SetmealDishMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.SetmealDishService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealDishMapper, SetmealDish&gt; <span class="keyword">implements</span> <span class="title class_">SetmealDishService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码开发-2"><a class="markdownIt-Anchor" href="#代码开发-2"></a> 代码开发</h3>
<p><img src="/img/Java/17ReggieProject/image-20230221112539556.png" alt="image-20230221112539556" /></p>
<p>步骤1：<code>/category/list?type=2</code>在<code>CategoryController</code>中已经实现了对应的功能。</p>
<p>步骤2：<code>/category/list?type=1</code>在<code>CategoryController</code>中已经实现了对应的功能。</p>
<p>步骤3：<code>/dish/list?categoryId=</code>请求菜品分类查询对应的菜品数据并展示到菜品中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件查询对应的菜品数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line">    queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">    queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行查询</span></span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/17ReggieProject/image-20230221113625532.png" alt="image-20230221113625532" /></p>
<p>步骤4：<code>/common/upload</code>已经在<code>CommonController</code>实现了</p>
<p>步骤5：<code>/common/download</code>已经在<code>CommonController</code>实现。</p>
<p>步骤6：<code>/setmeal</code>在<code>SetmealController</code>中实现，因为需要同时向两个表中添加数据，所以需要现在<code>SetmealService</code>中实现方法。然后再<code>controller</code>中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加套餐信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存套餐的基本信息，操作setmeal，执行insert操作</span></span><br><span class="line">    <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">    setmealDishes.stream().map((item) -&gt;&#123;</span><br><span class="line">        item.setSetmealId(setmealDto.getId());</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 保存套餐和菜品的关联信息，操作setmeal_dish,执行insert操作</span></span><br><span class="line">    setmealDishService.saveBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 新增套餐</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>, setmealDto);</span><br><span class="line">    setmealService.saveWithDish(setmealDto);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;套餐添加成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="套餐信息分页查询"><a class="markdownIt-Anchor" href="#套餐信息分页查询"></a> 套餐信息分页查询</h2>
<p>实现方法和菜品页面分页查询一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 套餐信息分页查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> page 页码</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> pageSize 每页数量</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> name 套餐名字</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span>&#123;</span><br><span class="line">    <span class="comment">// 添加分页构造器</span></span><br><span class="line">    Page&lt;Setmeal&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;SetmealDto&gt; setmealDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加过滤条件</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>, Setmeal::getName, name);</span><br><span class="line">    <span class="comment">// 添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行分页查询</span></span><br><span class="line">    setmealService.page(pageInfo, queryWrapper);</span><br><span class="line">    <span class="comment">// 对象的拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo, setmealDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; records = pageInfo.getRecords();</span><br><span class="line">    List&lt;SetmealDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">        <span class="comment">// 将item中的属性拷贝至setmealDto中</span></span><br><span class="line">        BeanUtils.copyProperties(item, setmealDto);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">        <span class="comment">// 根据id查询分类对象</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">        <span class="keyword">if</span>(category != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">            setmealDto.setCategoryName(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setmealDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    setmealDtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(setmealDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除套餐"><a class="markdownIt-Anchor" href="#删除套餐"></a> 删除套餐</h2>
<p>需要删除两个表中的数据，所以需要现在service中实现具体的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除套餐，同时需要删除和套餐关联的菜品关系</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeWithDish</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    <span class="comment">// 查询套餐状态，确定是否可以删除</span></span><br><span class="line">    <span class="comment">// select count(*) from setmeal where id in (1, 2, 3, ....) and status = 1</span></span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.in(Setmeal::getId, ids);</span><br><span class="line">    queryWrapper.eq(Setmeal::getStatus, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.count(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果不能删除，抛出一个业务异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;套餐正在售卖中，不能删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果可以删除，先删除套餐表中的数据---setmeal</span></span><br><span class="line">    <span class="built_in">this</span>.removeByIds(ids);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除关系表中的数据，----setmeal_dish</span></span><br><span class="line">    <span class="comment">// delete from setmeal_dish where setmeal_id in (1, 2, 3);</span></span><br><span class="line">    LambdaQueryWrapper&lt;SetmealDish&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lambdaQueryWrapper.in(SetmealDish::getSetmealId, ids);</span><br><span class="line">    setmealDishService.remove(lambdaQueryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>controller层代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除套餐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    setmealService.removeWithDish(ids);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;套餐删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="第六章-手机验证码登录"><a class="markdownIt-Anchor" href="#第六章-手机验证码登录"></a> 第六章 手机验证码登录</h1>
<h2 id="短信发送"><a class="markdownIt-Anchor" href="#短信发送"></a> 短信发送</h2>
<h3 id="服务开启"><a class="markdownIt-Anchor" href="#服务开启"></a> 服务开启</h3>
<p><img src="/img/Java/17ReggieProject/image-20230221205010704.png" alt="image-20230221205010704" /></p>
<p>本项目使用阿里云验证码服务</p>
<p><img src="/img/Java/17ReggieProject/image-20230221210219226.png" alt="image-20230221210219226" /></p>
<h3 id="代码开发-3"><a class="markdownIt-Anchor" href="#代码开发-3"></a> 代码开发</h3>
<p>步骤1：导入<code>maven</code>坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>步骤2：调入API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发送短信</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> signName 签名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> templateCode 模板</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> phoneNumbers 手机号</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String signName, String templateCode,String phoneNumbers,String param)</span>&#123;</span><br><span class="line">		<span class="type">DefaultProfile</span> <span class="variable">profile</span> <span class="operator">=</span> DefaultProfile.getProfile(<span class="string">&quot;cn-hangzhou&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">		<span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">		<span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();</span><br><span class="line">		request.setSysRegionId(<span class="string">&quot;cn-hangzhou&quot;</span>);</span><br><span class="line">		request.setPhoneNumbers(phoneNumbers);</span><br><span class="line">		request.setSignName(signName);</span><br><span class="line">		request.setTemplateCode(templateCode);</span><br><span class="line">		request.setTemplateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span>+param+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">SendSmsResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getAcsResponse(request);</span><br><span class="line">			System.out.println(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="业务功能开发"><a class="markdownIt-Anchor" href="#业务功能开发"></a> 业务功能开发</h2>
<p><img src="/img/Java/17ReggieProject/image-20230221211919842.png" alt="image-20230221211919842" /></p>
<h3 id="交互过程梳理"><a class="markdownIt-Anchor" href="#交互过程梳理"></a> 交互过程梳理</h3>
<p><img src="/img/Java/17ReggieProject/image-20230222100818456.png" alt="image-20230222100818456" /></p>
<h3 id="代码开发-4"><a class="markdownIt-Anchor" href="#代码开发-4"></a> 代码开发</h3>
<h4 id="前期准备"><a class="markdownIt-Anchor" href="#前期准备"></a> 前期准备</h4>
<p><img src="/img/Java/17ReggieProject/image-20230222100924434.png" alt="image-20230222100924434" /></p>
<p>导入<code>user</code>表对应的实体类<code>User</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//性别 0 女 1 男</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//身份证号</span></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//头像</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态 0:禁用，1:正常</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建对应的mapper、service、controller类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.mapper.UserMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>导入工具类：短信发送工具类<code>SMSUtils</code>、随机生成验证码工具类<code>ValidateCodeUtils</code>⭐</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发送短信</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> signName 签名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> templateCode 模板</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> phoneNumbers 手机号</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String signName, String templateCode,String phoneNumbers,String param)</span>&#123;</span><br><span class="line">		<span class="type">DefaultProfile</span> <span class="variable">profile</span> <span class="operator">=</span> DefaultProfile.getProfile(<span class="string">&quot;cn-hangzhou&quot;</span>, <span class="string">&quot;LTAI5tCmkkEhE21W4tvjS1dd&quot;</span>, <span class="string">&quot;xU2cXGMutcASkZjR185QMmORRpiqSA&quot;</span>);</span><br><span class="line">		<span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">		<span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();</span><br><span class="line">		request.setSysRegionId(<span class="string">&quot;cn-hangzhou&quot;</span>);</span><br><span class="line">		request.setPhoneNumbers(phoneNumbers);</span><br><span class="line">		request.setSignName(signName);</span><br><span class="line">		request.setTemplateCode(templateCode);</span><br><span class="line">		request.setTemplateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span>+param+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">SendSmsResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getAcsResponse(request);</span><br><span class="line">			System.out.println(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机生成验证码工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidateCodeUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度为4位或者6位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">generateValidateCode</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">4</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">9999</span>);<span class="comment">//生成随机数，最大为9999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">1000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">1000</span>;<span class="comment">//保证随机数为4位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(length == <span class="number">6</span>)&#123;</span><br><span class="line">            code = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">999999</span>);<span class="comment">//生成随机数，最大为999999</span></span><br><span class="line">            <span class="keyword">if</span>(code &lt; <span class="number">100000</span>)&#123;</span><br><span class="line">                code = code + <span class="number">100000</span>;<span class="comment">//保证随机数为6位数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;只能生成4位或6位数字验证码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成指定长度字符串验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateValidateCode4String</span><span class="params">(<span class="type">int</span> length)</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rdm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">hash1</span> <span class="operator">=</span> Integer.toHexString(rdm.nextInt());</span><br><span class="line">        <span class="type">String</span> <span class="variable">capstr</span> <span class="operator">=</span> hash1.substring(<span class="number">0</span>, length);</span><br><span class="line">        <span class="keyword">return</span> capstr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修改logincheckfilter"><a class="markdownIt-Anchor" href="#修改logincheckfilter"></a> 修改<code>LoginCheckFilter</code></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义不需要请求的请求路径</span></span><br><span class="line"><span class="keyword">private</span> String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/common/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/sendMsg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在<code>doFilter</code>函数中添加用户登录状态判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4-2.判断普通用户登录状态，如果已经登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户&#123;&#125;已登录&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line"></span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>UserController</code>中添加发送验证码消息业务代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 发送手机短信验证码</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user 接受页面传过来的手机号</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotEmpty(phone)) &#123;</span><br><span class="line">        <span class="comment">// 生成随机的四位验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line">        log.info(<span class="string">&quot;code: &#123;&#125;&quot;</span>, code);</span><br><span class="line">        <span class="comment">// 调用阿里云提供的短信服务API完成发送短信</span></span><br><span class="line">        <span class="comment">//            SMSUtils.sendMessage(&quot;瑞吉外卖&quot;, &quot;SMS_270920139&quot;, phone, code);</span></span><br><span class="line">        <span class="comment">// 讲生成的验证码保存在session中</span></span><br><span class="line">        session.setAttribute(phone, code);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;手机验证码发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;手机验证码发送失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现对应的用户登录功能，需要判断数据库中是否有该用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户登录，需要判断数据库中是否有该用户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;map: &#123;&#125;&quot;</span>, map.toString());</span><br><span class="line">    <span class="comment">// 获取手机号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">    <span class="comment">// 获取验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">    <span class="comment">// 从session中获取保存的验证码</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line">    <span class="comment">// 进行验证码比对，页面提交的验证码和session中保存的验证码比对</span></span><br><span class="line">    <span class="keyword">if</span> (codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code)) &#123;</span><br><span class="line">        <span class="comment">// 如果能够比对成功,说明登录成功</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断当前手机号是否为新用户，如果是新用户则自动完成注册</span></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            user.setStatus(<span class="number">1</span>);</span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, user.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="第七章-移动端菜品管理"><a class="markdownIt-Anchor" href="#第七章-移动端菜品管理"></a> 第七章 移动端菜品管理</h1>
<h2 id="导入用户地址簿相关功能代码"><a class="markdownIt-Anchor" href="#导入用户地址簿相关功能代码"></a> 导入用户地址簿相关功能代码</h2>
<h3 id="需求分析-2"><a class="markdownIt-Anchor" href="#需求分析-2"></a> 需求分析</h3>
<p>地址簿，指的是移动端消费者用户的地址信息，用户登录成功后可以维护自己的地址信息。同一个用户可以有多个地址信息，但是只能有一个<strong>默认地址</strong>。</p>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220517170247695-608658319.png" alt="image" /></p>
<h3 id="数据模型"><a class="markdownIt-Anchor" href="#数据模型"></a> 数据模型</h3>
<p>用户的地址信息会存储在address_book表，即地址簿表中。具体表结构如下：</p>
<p><img src="/img/Java/17ReggieProject/image-20230222162355588.png" alt="image-20230222162355588" /></p>
<h3 id="导入功能代码"><a class="markdownIt-Anchor" href="#导入功能代码"></a> 导入功能代码</h3>
<p>功能代码清单:</p>
<ul>
<li>
<p>实体类AddressBook(直接从课程资料中导入即可)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址簿</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBook</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//性别 0 女 1 男</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//省级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String provinceCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//省级名称</span></span><br><span class="line">    <span class="keyword">private</span> String provinceName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//市级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String cityCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//市级名称</span></span><br><span class="line">    <span class="keyword">private</span> String cityName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//区级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String districtCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//区级名称</span></span><br><span class="line">    <span class="keyword">private</span> String districtName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//详细地址</span></span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//标签</span></span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否默认 0 否 1是</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Mapper接口AddressBookMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.AddressBook;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;AddressBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>业务层接口AddressBookService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.AddressBook;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;AddressBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>业务层实现类AddressBookServicelmpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.mapper.AddressBookMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.AddressBookService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;AddressBookMapper, AddressBook&gt; <span class="keyword">implements</span> <span class="title class_">AddressBookService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>控制层AddressBookController(直接从课程资料中导入即可)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.common.BaseContext;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.common.R;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.AddressBookService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addressBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        addressBookService.save(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line">        LambdaUpdateWrapper&lt;AddressBook&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        wrapper.set(AddressBook::getIsDefault, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 0 where user_id = ?</span></span><br><span class="line">        addressBookService.update(wrapper);</span><br><span class="line"></span><br><span class="line">        addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//SQL:update address_book set is_default = 1 where id = ?</span></span><br><span class="line">        addressBookService.updateById(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (addressBook != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询默认地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getDefault</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        queryWrapper.eq(AddressBook::getIsDefault, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? and is_default = 1</span></span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == addressBook) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;没有找到该对象&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询指定用户的全部地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;AddressBook&gt;&gt; <span class="title function_">list</span><span class="params">(AddressBook addressBook)</span> &#123;</span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        log.info(<span class="string">&quot;addressBook:&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="literal">null</span> != addressBook.getUserId(), AddressBook::getUserId, addressBook.getUserId());</span><br><span class="line">        queryWrapper.orderByDesc(AddressBook::getUpdateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SQL:select * from address_book where user_id = ? order by update_time desc</span></span><br><span class="line">        <span class="keyword">return</span> R.success(addressBookService.list(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="功能测试"><a class="markdownIt-Anchor" href="#功能测试"></a> 功能测试</h3>
<p><img src="/img/Java/17ReggieProject/image-20230222164901344.png" alt="image-20230222164901344" /></p>
<h2 id="菜品展示"><a class="markdownIt-Anchor" href="#菜品展示"></a> 菜品展示</h2>
<h3 id="需求分析-3"><a class="markdownIt-Anchor" href="#需求分析-3"></a> 需求分析</h3>
<p>用户登录成功后跳转到系统首页，在首页需要根据分类来展示菜品和套餐。如果菜品设置了口味信息需要展示 [选择规格] 按钮，否则显示 [+] 按钮。</p>
<h3 id="代码开发-5"><a class="markdownIt-Anchor" href="#代码开发-5"></a> 代码开发</h3>
<h4 id="梳理交互过程"><a class="markdownIt-Anchor" href="#梳理交互过程"></a> 梳理交互过程</h4>
<p>在开发代码之前，需要梳理一下前端页面和服务端的交互过程:</p>
<p>​	1、页面(<code>front/index.html</code>)发送ajax请求，获取分类数据（菜品分类和套餐分类)</p>
<p>​	2、页面发送ajax请求，获取第一个分类下的菜品或者套餐</p>
<p>开发菜品展示功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可。</p>
<p><strong>注意</strong>:首页加载完成后，还发送了一次ajax请求用于加载购物车数据，此处可以将这次请求的地址暂时修改一下，从静态json文件获取数据，等后续开发购物车功能时再修改回来，如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取购物车内商品的集合</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cartListApi</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="comment">// &#x27;url&#x27;: &#x27;/shoppingCart/list&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/front/cartData.json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;...data&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cartData.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;map&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>改造<code>DishController</code>中的<code>list</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询对应的菜品数据 --- 改进版</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line">        queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">        queryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);</span><br><span class="line">        <span class="comment">// 进行查询</span></span><br><span class="line">        List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新增内容，需要加上口味信息</span></span><br><span class="line">        List&lt;DishDto&gt; dishDtoList = list.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            BeanUtils.copyProperties(item, dishDto);</span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">            <span class="comment">// 根据id查询分类对象，绑定分类名称</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="keyword">if</span>(category != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绑定口味</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">            <span class="comment">// 根据id查询口味对象</span></span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            lambdaQueryWrapper.eq(DishFlavor::getDishId, dishId);</span><br><span class="line">            List&lt;DishFlavor&gt; dishFlavorList = dishFlavorService.list(lambdaQueryWrapper);</span><br><span class="line">            dishDto.setFlavors(dishFlavorList);</span><br><span class="line">            <span class="keyword">return</span> dishDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在<code>SetmealController</code>里添加<code>list</code>方法显示套餐信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据分类id查询套餐信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(setmeal.getCategoryId() != <span class="literal">null</span>, Setmeal::getCategoryId, setmeal.getCategoryId());</span><br><span class="line">    queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>, Setmeal::getStatus, setmeal.getStatus());</span><br><span class="line">    queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行效果"><a class="markdownIt-Anchor" href="#运行效果"></a> 运行效果</h3>
<p><img src="/img/Java/17ReggieProject/image-20230222172335894.png" alt="image-20230222172335894" /></p>
<h2 id="购物车"><a class="markdownIt-Anchor" href="#购物车"></a> 购物车</h2>
<h3 id="需求分析-4"><a class="markdownIt-Anchor" href="#需求分析-4"></a> 需求分析</h3>
<p>移动端用户可以将菜品或者套餐添加到购物车。对于菜品来说，如果设置了口味信息，则需要选择规格后才能加入购物车;对于套餐来说，可以直接点击 <strong>[+]</strong> 将当前套餐加入购物车。在购物车中可以修改菜品和套餐的数量,也可以清空购物车。</p>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220517170322261-1190710679.png" alt="image" /></p>
<h3 id="数据模型-2"><a class="markdownIt-Anchor" href="#数据模型-2"></a> 数据模型</h3>
<p><img src="/img/Java/17ReggieProject/image-20230222183832340.png" alt="image-20230222183832340" /></p>
<h3 id="代码开发-6"><a class="markdownIt-Anchor" href="#代码开发-6"></a> 代码开发</h3>
<h4 id="梳理交互过程-2"><a class="markdownIt-Anchor" href="#梳理交互过程-2"></a> 梳理交互过程</h4>
<p>在开发代码之前，需要梳理一下购物车操作时前端页面和服务端的交互过程:</p>
<ol>
<li>点击 <strong>[加入购物车]</strong> 或者 <strong>[+]</strong> 按钮，页面发送ajax请求，请求服务端，将菜品或者套餐添加到购物车</li>
<li>点击购物车图标，页面发送ajax请求，请求服务端查询购物车中的菜品和套餐</li>
<li>点击清空购物车按钮，页面发送ajax请求，请求服务端来执行清空购物车操作</li>
</ol>
<p>开发购物车功能，其实就是在服务端编写代码去处理前端页面发送的这3次请求即可。</p>
<h4 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h4>
<p>在开发业务功能前，先将需要用到的类和接口基本结构创建好:</p>
<ul>
<li>
<p>实体类ShoppingCart(直接从课程资料中导入即可)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCart</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味</span></span><br><span class="line">    <span class="keyword">private</span> String dishFlavor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Mapper接口ShoppingCartMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.ShoppingCart;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;ShoppingCart&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>业务层接口ShoppingCartService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.ShoppingCart;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;ShoppingCart&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>业务层实现类ShoppingCartServicelmpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.ShoppingCart;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.mapper.ShoppingCartMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.ShoppingCartService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServicelmpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShoppingCartMapper, ShoppingCart&gt; <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>控制层ShoppingCartController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.ShoppingCartService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/shoppingcart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="添加购物车"><a class="markdownIt-Anchor" href="#添加购物车"></a> 添加购物车</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加购物车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;购物车数据：&#123;&#125;&quot;</span>, shoppingCart);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置用户id，指定当前是哪个用户的购物车数据</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCart.setUserId(currentId);</span><br><span class="line">    <span class="comment">// 查询当前添加的菜品是否已经在购物车中</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId, currentId);</span><br><span class="line">    <span class="keyword">if</span>(dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 添加到购物车的是菜品</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getSetmealId, shoppingCart.getSetmealId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">cartServiceOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line">    <span class="comment">// 如果已经存在，则需要增加number</span></span><br><span class="line">    <span class="keyword">if</span>(cartServiceOne != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> cartServiceOne.getNumber();</span><br><span class="line">        cartServiceOne.setNumber(number + <span class="number">1</span>);</span><br><span class="line">        shoppingCartService.updateById(cartServiceOne);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 如果不存在，则添加到购物车，数量默认就是1</span></span><br><span class="line">        shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">        shoppingCartService.save(shoppingCart);</span><br><span class="line">        cartServiceOne = shoppingCart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(cartServiceOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="查看购物车"><a class="markdownIt-Anchor" href="#查看购物车"></a> 查看购物车</h4>
<p>把前端数据改回来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取购物车内商品的集合</span></span><br><span class="line">function <span class="title function_">cartListApi</span><span class="params">(data)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/shoppingCart/list&#x27;</span>,</span><br><span class="line">        <span class="comment">// &#x27;url&#x27;: &#x27;/front/cartData.json&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        params:&#123;...data&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看购物车业务代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看购物车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;查看购物车&quot;</span>);</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId, BaseContext.getCurrentId());</span><br><span class="line">    queryWrapper.orderByDesc(ShoppingCart::getCreateTime);</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartService.list(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="清空购物车"><a class="markdownIt-Anchor" href="#清空购物车"></a> 清空购物车</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空购物车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId, BaseContext.getCurrentId());</span><br><span class="line">    shoppingCartService.remove(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;清空购物车成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="减少菜品"><a class="markdownIt-Anchor" href="#减少菜品"></a> 减少菜品</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 减少购物车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/sub&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">sub</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> shoppingCart.getSetmealId();</span><br><span class="line">    LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    queryWrapper.eq(ShoppingCart::getUserId, BaseContext.getCurrentId());</span><br><span class="line">    <span class="keyword">if</span>(dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 操作的是菜品</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 操作的是套餐</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getSetmealId, setmealId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">one</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> one.getNumber(); <span class="comment">// 获得购物车中该菜品的数量</span></span><br><span class="line">    <span class="keyword">if</span>(number == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果购物车中只有一个菜品，则直接删除</span></span><br><span class="line">        shoppingCartService.remove(queryWrapper);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果有多个，则需要更新number即可</span></span><br><span class="line">        one.setNumber(number - <span class="number">1</span>);</span><br><span class="line">        shoppingCartService.updateById(one);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.success(one);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="用户下单"><a class="markdownIt-Anchor" href="#用户下单"></a> 用户下单</h2>
<h3 id="需求分析-5"><a class="markdownIt-Anchor" href="#需求分析-5"></a> 需求分析</h3>
<p>移动端用户将菜品或者套餐加入购物车后，可以点击购物车中的 <strong>【去结算】</strong> 按钮，页面跳转到订单确认页面，点击 <strong>【去支付】</strong> 按钮则完成下单操作。</p>
<h3 id="数据模型-3"><a class="markdownIt-Anchor" href="#数据模型-3"></a> 数据模型</h3>
<p>用户下单业务对应的数据表为<code>orders</code>表和<code>order_detail</code>表:</p>
<p>orders订单表</p>
<p><img src="/img/Java/17ReggieProject/image-20230223153359488.png" alt="image-20230223153359488" /></p>
<p>order_detail订单明细表</p>
<p><img src="/img/Java/17ReggieProject/image-20230223153430574.png" alt="image-20230223153430574" /></p>
<h3 id="代码开发-7"><a class="markdownIt-Anchor" href="#代码开发-7"></a> 代码开发</h3>
<h4 id="梳理交互过程-3"><a class="markdownIt-Anchor" href="#梳理交互过程-3"></a> 梳理交互过程</h4>
<p>在开发代码之前，需要梳理一下用户下单操作时前端页面和服务端的交互过程:</p>
<ol>
<li>在购物车中点击 <strong>【去结算】</strong> 按钮，页面跳转到订单确认页面</li>
<li>在订单确认页面，发送ajax请求，请求服务端获取当前登录用户的默认地址</li>
<li>在订单确认页面，发送ajax请求，请求服务端获取当前登录用户的购物车数据</li>
<li>在订单确认页面点击 <strong>【去支付】</strong> 按钮，发送ajax请求，请求服务端完成下单操作</li>
</ol>
<p>开发用户下单功能，其实就是在服务端编写代码去处理前端页面发送的请求即可。</p>
<h4 id="准备工作-2"><a class="markdownIt-Anchor" href="#准备工作-2"></a> 准备工作</h4>
<p>在开发业务功能前，先将需要用到的类和接口基本结构创建好:</p>
<ul>
<li>
<p>实体类Orders、OrderDetail（直接从课程资料中导入即可)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单状态 1待付款，2待派送，3已派送，4已完成，5已取消</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址id</span></span><br><span class="line">    <span class="keyword">private</span> Long addressBookId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime orderTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//结账时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime checkoutTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//支付方式 1微信，2支付宝</span></span><br><span class="line">    <span class="keyword">private</span> Integer payMethod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实收金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单明细</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetail</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单id</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味</span></span><br><span class="line">    <span class="keyword">private</span> String dishFlavor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Mapper接口OrderMapper、OrderDetailMapper</p>
</li>
<li>
<p>业务层接口OrderService、OrderDetailService</p>
</li>
<li>
<p>业务层实现类OrderServicelmpl、OrderDetailServicelmpl</p>
</li>
<li>
<p>控制层OrderController、OrderDetailController</p>
</li>
</ul>
<h4 id="代码开发-8"><a class="markdownIt-Anchor" href="#代码开发-8"></a> 代码开发</h4>
<p>在<code>OrderService</code>添加<code>submit</code>方法用于用户下单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.IdWorker;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.common.BaseContext;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.common.CustomException;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.*;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.service.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServicelmpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderMapper, Orders&gt; <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDetailService orderDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户提交订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        <span class="comment">// 查询当前用户的购物车数据</span></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId, currentId);</span><br><span class="line">        List&lt;ShoppingCart&gt; shoppingCarts = shoppingCartService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(shoppingCarts == <span class="literal">null</span> || shoppingCarts.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;购物车为空，不能下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查询用户数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(currentId);</span><br><span class="line">        <span class="comment">// 查询地址数据</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">addressBookId</span> <span class="operator">=</span> orders.getAddressBookId();</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(addressBookId);</span><br><span class="line">        <span class="keyword">if</span>(addressBook == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;用户地址信息有误，不能下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();  <span class="comment">// 获取订单号Mybatis-plus提供</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算总金额，原子操作，保证在多线程的情况下也能计算正确</span></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;OrderDetail&gt; orderDetails = shoppingCarts.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">            orderDetail.setOrderId(orderId);</span><br><span class="line">            orderDetail.setNumber(item.getNumber());</span><br><span class="line">            orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">            orderDetail.setDishId(item.getDishId());</span><br><span class="line">            orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">            orderDetail.setName(item.getName());</span><br><span class="line">            orderDetail.setImage(item.getImage());</span><br><span class="line">            orderDetail.setAmount(item.getAmount());</span><br><span class="line">            amount.addAndGet(item.getAmount().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getNumber())).intValue());</span><br><span class="line">            <span class="keyword">return</span> orderDetail;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向订单表中插入一条数据</span></span><br><span class="line">        orders.setNumber(String.valueOf(orderId));  <span class="comment">// 设置订单号</span></span><br><span class="line">        orders.setId(orderId);</span><br><span class="line">        orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">        orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">        orders.setStatus(<span class="number">2</span>);  <span class="comment">// 2带派送</span></span><br><span class="line">        orders.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount.get()));<span class="comment">//计算总金额</span></span><br><span class="line">        orders.setUserId(currentId);</span><br><span class="line">        orders.setUserName(user.getName());</span><br><span class="line">        orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">        orders.setPhone(addressBook.getPhone());</span><br><span class="line">        orders.setAddress((addressBook.getProvinceName()==<span class="literal">null</span>?<span class="string">&quot;&quot;</span>:addressBook.getProvinceName())</span><br><span class="line">                +(addressBook.getCityName()==<span class="literal">null</span>?<span class="string">&quot;&quot;</span>:addressBook.getCityName())</span><br><span class="line">                +(addressBook.getDistrictName()==<span class="literal">null</span>?<span class="string">&quot;&quot;</span>:addressBook.getDistrictName())</span><br><span class="line">                +(addressBook.getDetail()==<span class="literal">null</span>?<span class="string">&quot;&quot;</span>:addressBook.getDetail()));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.save(orders);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向订单明细表中插入多条数据</span></span><br><span class="line">        orderDetailService.saveBatch(orderDetails);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空购物车数据</span></span><br><span class="line">        shoppingCartService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>OrderController</code>的<code>submit</code>方法处理<code>post</code>请求实现上面的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户下单</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;订单数据：&#123;&#125;&quot;</span>, orders);</span><br><span class="line">    orderService.submit(orders);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;下单成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="功能测试-2"><a class="markdownIt-Anchor" href="#功能测试-2"></a> 功能测试</h3>
<p><img src="/img/Java/17ReggieProject/image-20230223162621032.png" alt="image-20230223162621032" /></p>
<p><img src="/img/Java/17ReggieProject/image-20230223162629059.png" alt="image-20230223162629059" /></p>
<h2 id="功能补充"><a class="markdownIt-Anchor" href="#功能补充"></a> 功能补充</h2>
<h3 id="用户退出"><a class="markdownIt-Anchor" href="#用户退出"></a> 用户退出</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户退出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/loginout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 清理session中保存的用户id</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="订单管理"><a class="markdownIt-Anchor" href="#订单管理"></a> 订单管理</h3>
<p>导入OrderDto需手动添加<code>private int sumNum;</code>前端会计算数量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuaa.reggie.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.OrderDetail;</span><br><span class="line"><span class="keyword">import</span> com.nuaa.reggie.entity.Orders;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrdersDto</span> <span class="keyword">extends</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderDetail&gt; orderDetails;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sumNum;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>OrderController</code>添加<code>userPage方法</code>❗</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分页查看订单信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/userPage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">getOrder</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    <span class="comment">// 构造分页构造器</span></span><br><span class="line">    Page&lt;Orders&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;OrdersDto&gt; ordersDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 绑定用户</span></span><br><span class="line">    queryWrapper.eq(Orders::getUserId, BaseContext.getCurrentId());</span><br><span class="line">    <span class="comment">// 添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Orders::getOrderTime);</span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    orderService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo, ordersDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line">    List&lt;Orders&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    List&lt;OrdersDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">OrdersDto</span> <span class="variable">ordersDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(item, ordersDto);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> item.getId();</span><br><span class="line">        <span class="comment">// 根据id 查订单详细信息</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> orderService.getById(id);</span><br><span class="line">        <span class="type">String</span> <span class="variable">number</span> <span class="operator">=</span> orders.getNumber();  <span class="comment">// 获取该订单的订单号</span></span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;OrderDetail&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(OrderDetail::getOrderId, number);</span><br><span class="line">        List&lt;OrderDetail&gt; orderDetailList = orderDetailService.list(lambdaQueryWrapper);</span><br><span class="line">        ordersDto.setOrderDetails(orderDetailList);</span><br><span class="line">        <span class="keyword">return</span>  ordersDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    ordersDtoPage.setRecords(list);</span><br><span class="line">    <span class="keyword">return</span> R.success(ordersDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/17ReggieProject/image-20230223192144378.png" alt="image-20230223192144378" /></p>
<h3 id="管理员端订单信息管理分页查询"><a class="markdownIt-Anchor" href="#管理员端订单信息管理分页查询"></a> 管理员端订单信息管理分页查询</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 管理员端订单管理分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> number</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beginTime</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String number, String beginTime, String endTime)</span> &#123;</span><br><span class="line">    <span class="comment">// 构造分页构造器</span></span><br><span class="line">    Page&lt;Orders&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    Page&lt;OrdersDto&gt; ordersDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据number进行模糊查询</span></span><br><span class="line">    queryWrapper.like(!StringUtils.isEmpty(number), Orders::getNumber, number);</span><br><span class="line">    <span class="comment">// 根据datetime进行时间范围查询</span></span><br><span class="line">    <span class="keyword">if</span>(beginTime != <span class="literal">null</span> &amp;&amp; endTime != <span class="literal">null</span>) &#123;</span><br><span class="line">        queryWrapper.ge(Orders::getOrderTime, beginTime);</span><br><span class="line">        queryWrapper.le(Orders::getOrderTime, endTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加排序条件</span></span><br><span class="line">    queryWrapper.orderByDesc(Orders::getOrderTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行分页查询</span></span><br><span class="line">    orderService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象拷贝</span></span><br><span class="line">    BeanUtils.copyProperties(pageInfo, ordersDtoPage);</span><br><span class="line"></span><br><span class="line">    List&lt;Orders&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">    List&lt;OrdersDto&gt; list = records.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="type">OrdersDto</span> <span class="variable">ordersDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersDto</span>();</span><br><span class="line"></span><br><span class="line">        BeanUtils.copyProperties(item, ordersDto);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;用户&quot;</span> + item.getUserId();</span><br><span class="line">        ordersDto.setUserName(name);</span><br><span class="line">        <span class="keyword">return</span> ordersDto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    ordersDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(ordersDtoPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/17ReggieProject/image-20230223192021209.png" alt="image-20230223192021209" /></p>
<h3 id="外卖订单派送"><a class="markdownIt-Anchor" href="#外卖订单派送"></a> 外卖订单派送</h3>
<p>在<code>OrderController</code>处理<code>post</code>请求修改<code>status</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 派送/完成订单--修改订单状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">send</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> orders.getId();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> orders.getStatus();</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(Orders::getId, id);</span><br><span class="line">    <span class="type">Orders</span> <span class="variable">one</span> <span class="operator">=</span> orderService.getOne(queryWrapper);</span><br><span class="line">    one.setStatus(status);</span><br><span class="line">    orderService.updateById(one);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;派送成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/17ReggieProject/image-20230223192700658.png" alt="image-20230223192700658" /></p>
<p><img src="/img/Java/17ReggieProject/image-20230223192731544.png" alt="image-20230223192731544" /><img src="/img/Java/17ReggieProject/image-20230223192846024.png" alt="image-20230223192846024" /></p>
<h3 id="再来一单"><a class="markdownIt-Anchor" href="#再来一单"></a> 再来一单</h3>
<p>用户可以通过该方法快速再下一单</p>
<p><img src="/img/Java/17ReggieProject/image-20230223193001095.png" alt="image-20230223193001095" /></p>
<p>因为设计两个表，所以需要再<code>OrderServiceImpl</code>中实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 再来一单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">again</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取订单id 并获取订单的详细信息</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> orders.getId();</span><br><span class="line">    <span class="type">Orders</span> <span class="variable">newOrders</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置订单号</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();</span><br><span class="line">    newOrders.setId(orderId);</span><br><span class="line">    <span class="comment">// 设置订单号</span></span><br><span class="line">    newOrders.setNumber(String.valueOf(orderId));</span><br><span class="line">    <span class="comment">// 设置下单时间</span></span><br><span class="line">    newOrders.setOrderTime(LocalDateTime.now());</span><br><span class="line">    newOrders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">    newOrders.setStatus(<span class="number">2</span>); <span class="comment">// 待派送</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加订单明细表</span></span><br><span class="line">    LambdaQueryWrapper&lt;OrderDetail&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(OrderDetail::getOrderId, id);</span><br><span class="line">    List&lt;OrderDetail&gt; list = orderDetailService.list(queryWrapper);</span><br><span class="line">    list.stream().map((item) -&gt; &#123;</span><br><span class="line">        <span class="comment">// 生成新的id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">detailId</span> <span class="operator">=</span> IdWorker.getId();</span><br><span class="line">        item.setOrderId(orderId);</span><br><span class="line">        item.setId(detailId);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向订单表中插入一条数据</span></span><br><span class="line">    <span class="built_in">this</span>.save(newOrders);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向订单明细表中插入多条数据</span></span><br><span class="line">    orderDetailService.saveBatch(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>OrderController</code>中进行调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 再来一单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orders 只传递了订单编号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/again&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">again</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;再来一单：&#123;&#125;&quot;</span>, orders);</span><br><span class="line">    orderService.again(orders);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;已成功下单&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/Java/17ReggieProject/image-20230223194942144.png" alt="image-20230223194942144" /></p>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>Project</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringBoot</tag>
        <tag>MySQL</tag>
        <tag>Spring</tag>
        <tag>MyBatis</tag>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖项目实战 - Linux入门</title>
    <url>/2023/02/23/JAVA/18Linux/</url>
    <content><![CDATA[<h1 id="linux简介"><a class="markdownIt-Anchor" href="#linux简介"></a> Linux简介</h1>
<h2 id="不同应用领域的主流操作系统"><a class="markdownIt-Anchor" href="#不同应用领域的主流操作系统"></a> 不同应用领域的主流操作系统</h2>
<ul>
<li>桌面操作系统
<ul>
<li>Windows （用户数量最多)</li>
<li>Mac OS（操作体验好，办公人士首选)</li>
<li>Linux（用户数量少)</li>
</ul>
</li>
<li>服务器操作系统
<ul>
<li>UNIX（安全、稳定、付费)</li>
<li>Linux（安全、稳定、免费、占有率高)</li>
<li>Windows Server (付费、占有率低)</li>
</ul>
</li>
<li>移动设备操作系统
<ul>
<li>Android (基于Linux 、开源，主要用于智能手机、平板电脑和智能电视)</li>
<li>ios（苹果公司开发、不开源，用于苹果公司的产品，例如: iPhone、iPad )</li>
</ul>
</li>
<li>嵌入式操作系统
<ul>
<li>Linux（机顶盒、路由器、交换机)</li>
</ul>
</li>
</ul>
<h2 id="linux发展历史"><a class="markdownIt-Anchor" href="#linux发展历史"></a> Linux发展历史</h2>
<p>Linux系统历史</p>
<ul>
<li>时间:1991年</li>
<li>地点:芬兰赫尔辛基大学</li>
<li>人物:Linus Torvalds ( 21岁)</li>
<li>语言:C语言、汇编语言</li>
<li>logo:企鹅</li>
<li>特点:免费、开源、多用户、多任务</li>
</ul>
<h3 id="linux系统版本"><a class="markdownIt-Anchor" href="#linux系统版本"></a> Linux系统版本</h3>
<p>Linux系统分为内核版和发行版</p>
<ul>
<li>内核版
<ul>
<li>由Linus Torvalds及其团队开发、维护</li>
<li>免费、开源</li>
<li>负责控制硬件</li>
</ul>
</li>
<li>发行版
<ul>
<li>基于Linux内核版进行扩展</li>
<li>由各个Linux厂商开发、维护</li>
<li>有收费版本和免费版本</li>
</ul>
</li>
</ul>
<p><strong>Linux系统发行版</strong>:</p>
<ul>
<li>ubuntu:以桌面应用为主·</li>
<li>RedHat:应用最广泛、收费</li>
<li>CentOs: RedHat的社区版、免费·</li>
<li>opensuSE:对个人完全免费、图形界面华丽</li>
<li>Fedora:功能完备、快速更新、免费</li>
<li>红旗Linux:北京中科红旗软件技术有限公司开发</li>
</ul>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164510201-1893673796.png" alt="image" /></p>
<h1 id="linux-安装"><a class="markdownIt-Anchor" href="#linux-安装"></a> Linux 安装</h1>
<h2 id="安装方式介绍"><a class="markdownIt-Anchor" href="#安装方式介绍"></a> 安装方式介绍</h2>
<p>Linux系统的安装方式</p>
<ul>
<li>物理机安装:直接将操作系统安装到服务器硬件上</li>
<li>虚拟机安装:通过虚拟机软件安装</li>
</ul>
<p><strong>虚拟机</strong>( Virtual Machine)指通过<strong>软件</strong>模拟的具有完整硬件系统功能、运行在完全隔离环境中的完整计算机系统。</p>
<p>常用虚拟机软件</p>
<ul>
<li>VMware</li>
<li>VirtualBox</li>
<li>VMLite workStation</li>
<li>Qemu</li>
<li>HopeddotVos</li>
</ul>
<h2 id="安装linux"><a class="markdownIt-Anchor" href="#安装linux"></a> 安装Linux</h2>
<p><strong>安装方式-安装VMWare</strong></p>
<p>直接双击运行资料中的VMware安装程序，根据提示完成安装即可</p>
<p><strong>安装CentOS镜像</strong></p>
<p>使用资料中提供的CentOS镜像文件来完成Linux系统的安装</p>
<h2 id="网卡设置"><a class="markdownIt-Anchor" href="#网卡设置"></a> 网卡设置</h2>
<p>由于启动服务器时未加载网卡，导致IP地址初始化失败</p>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164517145-1413567992.png" alt="image" /></p>
<p>修改网络初始化配置，设定网卡在系统启动时初始化<br />
<img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164525095-1179631425.png" alt="image" /></p>
<h2 id="安装ssh连接工具"><a class="markdownIt-Anchor" href="#安装ssh连接工具"></a> 安装SSH连接工具</h2>
<p>SSH ( Secure Shell)，建立在应用层基础上的安全协议</p>
<p>常用的SSH连接工具</p>
<ul>
<li>putty</li>
<li>secureCRT</li>
<li>xshell</li>
<li>finalshell</li>
</ul>
<p>通过SSH连接工具就可以实现从本地连接到远程的Linux服务器</p>
<h2 id="linux和windows目录结构对比"><a class="markdownIt-Anchor" href="#linux和windows目录结构对比"></a> Linux和windows目录结构对比</h2>
<p>Linux系统中的目录</p>
<ul>
<li>/是所有目录的顶点</li>
<li>目录结构像一颗倒挂的树</li>
</ul>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164532669-2029309901.png" alt="image" /></p>
<h2 id="linux目录结构"><a class="markdownIt-Anchor" href="#linux目录结构"></a> Linux目录结构</h2>
<ul>
<li>bin存放二进制可执行文件</li>
<li>boot存放系统引导时使用的各种文件</li>
<li>dev存放设备文件</li>
<li>etc存放系统配置文件</li>
<li>home存放系统用户的文件</li>
<li>lib存放程序运行所需的共享库和内核模块</li>
<li>opt额外安装的可选应用程序包所放置的位置</li>
<li>root超级用户目录</li>
<li>sbin存放二进制可执行文件，只有root用户才能访问</li>
<li>tmp存放临时文件</li>
<li>usr存放系统应用程序</li>
<li>var存放运行时需要改变数据的文件，例如日志文件</li>
</ul>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164538098-689217035.png" alt="image" /></p>
<h1 id="linux-常用命令"><a class="markdownIt-Anchor" href="#linux-常用命令"></a> Linux 常用命令</h1>
<h2 id="linux命令初体验"><a class="markdownIt-Anchor" href="#linux命令初体验"></a> Linux命令初体验</h2>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令</th>
<th>对应英文</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>ls</td>
<td>list</td>
<td>查看当前目录下的内容</td>
</tr>
<tr>
<td>2</td>
<td>pwd</td>
<td>print work directory</td>
<td>查看当前所在目录</td>
</tr>
<tr>
<td>3</td>
<td>cd [目录名]</td>
<td>change directory</td>
<td>切换目录</td>
</tr>
<tr>
<td>4</td>
<td>touch [文件名]</td>
<td>touch</td>
<td>如果文件不存在，新建文件</td>
</tr>
<tr>
<td>5</td>
<td>mkdir [目录名]</td>
<td>make directory</td>
<td>创建目录</td>
</tr>
<tr>
<td>6</td>
<td>rm [文件名]</td>
<td>remove</td>
<td>删除指定文件</td>
</tr>
</tbody>
</table>
<p><strong>使用技巧</strong></p>
<ul>
<li>Tab键自动补全</li>
<li>连续两次Tab键，给出操作提示</li>
<li>使用上下箭头快速调出曾经使用过的命令</li>
<li>使用clear命令或者Ctrl+l快捷键实现清屏</li>
</ul>
<p><strong>命令格式</strong></p>
<p><code>command 【-options】【parameter】</code></p>
<p>说明:</p>
<ul>
<li>command:命令名</li>
<li>【-options】:选项，可用来对命令进行控制，也可以省略</li>
<li>【parameter】:传给命令的参数，可以是零个、一个或者多个</li>
</ul>
<p>注意:</p>
<p>[]代表可选</p>
<p>命令名、选项、参数之间有空格进行分隔</p>
<h2 id="文件目录操作命令"><a class="markdownIt-Anchor" href="#文件目录操作命令"></a> 文件目录操作命令</h2>
<h3 id="文件目录操作命令ls"><a class="markdownIt-Anchor" href="#文件目录操作命令ls"></a> 文件目录操作命令<strong>ls</strong></h3>
<p>作用:显示指定目录下的内容</p>
<p>语法:<code>ls [-al] [dir]</code></p>
<p>说明:</p>
<ul>
<li>-a显示所有文件及目录(.开头的隐藏文件也会列出)</li>
<li>-l除文件名称外，同时将文件型态(d表示目录，-表示文件)、权限、拥有者、文件大小等信息详细列出</li>
</ul>
<p>注意:<br />
由于我们使用ls命令时经常需要加入-l选项，所以Linux为ls -l命令提供了一种简写方式，即ll</p>
<h3 id="文件目录操作命令cd"><a class="markdownIt-Anchor" href="#文件目录操作命令cd"></a> 文件目录操作命令<strong>cd</strong></h3>
<p>作用:用于切换当前工作目录，即进入指定目录</p>
<p>语法:<code>cd [dirName]</code></p>
<p>特殊说明:</p>
<ul>
<li>~表示用户的home目录</li>
<li>.表示目前所在的目录</li>
<li>…表示目前目录位置的上级目录</li>
</ul>
<p>举例:</p>
<ul>
<li>cd …<br />
切换到当前目录的上级目录</li>
<li>cd ~<br />
切换到用户的home目录</li>
<li>cd /usr/local 切换到/usr/local目录</li>
</ul>
<h3 id="文件目录操作命令cat"><a class="markdownIt-Anchor" href="#文件目录操作命令cat"></a> 文件目录操作命令<strong>cat</strong></h3>
<p>作用:用于显示文件内容</p>
<p>语法: <code>cat [-n] fileName</code></p>
<p>说明:</p>
<ul>
<li>-n :由1开始对所有输出的行数编号</li>
</ul>
<p>举例:</p>
<ul>
<li><code>cat /etc/profile</code><br />
查看/etc目录下的profile文件内容</li>
</ul>
<h3 id="文件目录操作命令more"><a class="markdownIt-Anchor" href="#文件目录操作命令more"></a> 文件目录操作命令<strong>more</strong></h3>
<p>作用:以分页的形式显示文件内容</p>
<p>语法: <code>more fileName</code></p>
<p>操作说明:</p>
<ul>
<li>回车键<br />
向下滚动一行</li>
<li>空格键<br />
向下滚动一屏</li>
<li>b<br />
返回上一屏</li>
<li>q或者Ctrl+C<br />
退出more</li>
</ul>
<p>举例:</p>
<p><code>more /etc/profile</code><br />
以分页方式显示/etc目录下的profile文件内容</p>
<h3 id="文件目录操作命令tail"><a class="markdownIt-Anchor" href="#文件目录操作命令tail"></a> 文件目录操作命令<strong>tail</strong></h3>
<p>作用:查看文件末尾的内容</p>
<p>语法:<code>tail [-f] fileName</code></p>
<p>说明:</p>
<ul>
<li>-f :动态读取文件末尾内容并显示，通常用于日志文件的内容输出</li>
</ul>
<p>举例:</p>
<ul>
<li><code>tail /etc/profile</code><br />
显示/etc目录下的profile文件末尾10行的内容</li>
<li><code>tail -20 /etc/profile</code><br />
显示/etc目录下的profile文件末尾20行的内容</li>
<li><code>tail -f /itcast/my.log</code><br />
动态读取/itcast目录下的my.log文件末尾内容并显示</li>
</ul>
<h3 id="文件目录操作命令mkdir"><a class="markdownIt-Anchor" href="#文件目录操作命令mkdir"></a> 文件目录操作命令<strong>mkdir</strong></h3>
<p>作用:创建目录</p>
<p>语法:<code>mkdir [-p] dirName</code></p>
<p>说明:</p>
<ul>
<li>-p︰确保目录名称存在，不存在的就创建一个。通过此选项，可以实现多层目录同时创建</li>
</ul>
<p>举例:</p>
<ul>
<li><code>mkdir itcast</code>　在当前目录下，建立一个名为itcast的子目录</li>
<li><code>mkdir-p itcast/test</code>　在工作目录下的itcast目录中建立一个名为test的子目录，若itcast目录不存在，则建立一个</li>
</ul>
<h3 id="文件目录操作命令rmdir"><a class="markdownIt-Anchor" href="#文件目录操作命令rmdir"></a> 文件目录操作命令rmdir</h3>
<p>作用:删除空目录</p>
<p>语法:<code>rmdir [-p] dirName</code></p>
<p>说明:</p>
<ul>
<li>-p:当子目录被删除后使父目录为空目录的话，则一并删除</li>
</ul>
<p>举例:</p>
<ul>
<li><code>rmdir itcast</code>　删除名为itcast的空目录</li>
<li><code>rmdir-p itcast/test</code>　删除itcast目录中名为test的子目录，若test目录删除后itcast目录变为空目录，则也被删除</li>
<li><code>rmdir itcast*</code>　删除名称以itcast开始的空目录</li>
</ul>
<h3 id="文件目录操作命令rm"><a class="markdownIt-Anchor" href="#文件目录操作命令rm"></a> 文件目录操作命令rm</h3>
<p>作用:删除文件或者目录</p>
<p>语法:<code>rm [-rf] name</code></p>
<p>说明:</p>
<ul>
<li>-r:将目录及目录中所有文件（目录）逐一删除，即递归删除</li>
<li>-f:无需确认，直接删除</li>
</ul>
<p>举例:</p>
<ul>
<li>rm -r itcast/删除名为itcast的目录和目录中所有文件，删除前需确认</li>
<li>rm -rf itcast/无需确认，直接删除名为itcast的目录和目录中所有文件</li>
<li>rm -f hello.txt无需确认，直接删除hello.txt文件</li>
</ul>
<h2 id="拷贝移动命令"><a class="markdownIt-Anchor" href="#拷贝移动命令"></a> 拷贝移动命令</h2>
<h3 id="拷贝移动命令cp"><a class="markdownIt-Anchor" href="#拷贝移动命令cp"></a> 拷贝移动命令cp</h3>
<p>作用:用于复制文件或目录语法:<code>cp [-r] source dest</code></p>
<p>说明:</p>
<ul>
<li>-r:如果复制的是目录需要使用此选项，此时将复制该目录下所有的子目录和文件</li>
</ul>
<p>举例:</p>
<ul>
<li>cp hello.txt itcast/<br />
将hello.txt复制到itcast目录中</li>
<li>cp hello.txt . / hi.txt<br />
将hello.txt复制到当前目录，并改名为hi.txt</li>
<li>cp -r itcast/ ./itheimal将itcast目录和目录下所有文件复制到itheima目录下</li>
<li>cp -r itcast/* ./ itheima/将itcast目录下所有文件复制到itheima目录下</li>
</ul>
<h3 id="拷贝移动命令mv"><a class="markdownIt-Anchor" href="#拷贝移动命令mv"></a> 拷贝移动命令mv</h3>
<p>作用:为文件或目录改名、或将文件或目录移动到其它位置</p>
<p>语法: <code>mv source dest</code></p>
<p>举例:</p>
<ul>
<li><code>mv hello.txt hi.txt</code><br />
将hello.txt改名为hi.txt</li>
<li><code>mv hi.txt itheima/</code><br />
将文件hi.txt移动到itheima目录中</li>
<li><code>mv hi.txt itheima/</code> hello.txt将hi.txt移动到itheima目录中，并改名为hello.txt</li>
<li><code>mv itcast/ itheima/</code>如果itheima目录不存在，将itcast目录改名为itheima</li>
<li><code>mv itcast/ itheima/</code><br />
如果itheima目录存在，将itcast目录移动到itheima目录中</li>
</ul>
<h3 id="打包压缩命令tar"><a class="markdownIt-Anchor" href="#打包压缩命令tar"></a> 打包压缩命令tar</h3>
<p>作用:对文件进行打包、解包、压缩、解压</p>
<p>语法: <code>tar [-zcxvf] fileName [files]</code></p>
<p>包文件后缀为**.tar**表示只是完成了打包，并没有压缩</p>
<p>包文件后缀为**.tar.gz**表示打包的同时还进行了压缩</p>
<p>说明:</p>
<ul>
<li>-z∶ z代表的是gzip，通过gzip命令处理文件，gzip可以对文件压缩或者解压</li>
<li>-c: c代表的是create，即创建新的包文件</li>
<li>-x: x代表的是extract，实现从包文件中还原文件</li>
<li>-v: v代表的是verbose，显示命令的执行过程</li>
<li>-f: f代表的是file，用于指定包文件的名称</li>
<li>-cvf：将文件打包并命名，后缀为<code>.tar</code></li>
<li>-zcvf：讲文件打包压缩并命名，后缀为<code>.tar.gz</code></li>
<li>-xvf：对已有的包<code>.tar</code>进行解包</li>
<li>-zxvf：对已有的压缩包<code>.tar.gz</code>进行解压缩</li>
</ul>
<h2 id="文本编辑命令vivim"><a class="markdownIt-Anchor" href="#文本编辑命令vivim"></a> 文本编辑命令vi/vim</h2>
<p>作用: vi命令是Linux系统提供的一个文本编辑工具，可以对文件内容进行编辑，类似于Windows中的记事本</p>
<p>语法: <code>vi fileName</code></p>
<p>说明:</p>
<p>1、 vim是从vi发展来的一个功能更加强大的文本编辑工具，在编辑文件时可以对文本内容进行着色，方便我们对文件进行编辑处理，所以实际工作中vim更加常用。</p>
<p>2、要使用vim命令，需要我们自己完成安装。可以使用该命令来完成安装:yum install vim</p>
<h3 id="文本编辑命令vim"><a class="markdownIt-Anchor" href="#文本编辑命令vim"></a> 文本编辑命令vim</h3>
<p>作用:对文件内容进行编辑，vim其实就是一个文本编辑器</p>
<p>语法:<code>vim fileName</code></p>
<p>说明:</p>
<p>1、在使用vim命令编辑文件时，如果指定的文件存在则直接打开此文件。如果指定的文件不存在则新建文件。</p>
<p>2、vim在进行文本编辑时共分为三种模式，分别是命令模式(Command mode)，插入模式（Insert mode)和底行模式(Last line mode)。这三种模式之间可以相互切换。我们在使用vim时一定要注意我们当前所处的是哪种模式。</p>
<p>针对vim中的三种模式说明如下:</p>
<p>1、<strong>命令模式</strong></p>
<ul>
<li>命令模式下可以查看文件内容、移动光标（上下左右箭头、gg、G)</li>
<li>通过vim命令打开文件后，默认进入命令模式</li>
<li>另外两种模式需要首先进入命令模式，才能进入彼此</li>
</ul>
<p>2、<strong>插入模式</strong></p>
<ul>
<li>插入模式下可以对文件内容进行编辑</li>
<li>在命令模式下按下[i,a,o]任意一个，可以进入插入模式。进入插入模式后，下方会出现【insert】字样</li>
<li>在插入模式下按下ESC键，回到命令模式</li>
</ul>
<p>3、<strong>底行模式</strong></p>
<ul>
<li>底行模式下可以通过命令对文件内容进行查找、显示行号、退出等操作</li>
<li>在命令模式下按下[:,/]任意一个，可以进入底行模式</li>
<li>通过/方式进入底行模式后，可以对文件内容进行查找</li>
<li>通过:方式进入底行模式后，可以输入wq（保存并退出）、q!(不保存退出） 、 set nu(显示行号)</li>
</ul>
<h2 id="查找命令"><a class="markdownIt-Anchor" href="#查找命令"></a> 查找命令</h2>
<h3 id="查找命令find"><a class="markdownIt-Anchor" href="#查找命令find"></a> 查找命令find</h3>
<p>作用:在指定目录下查找文件</p>
<p>语法:<code>find dirName -option fileName</code></p>
<p>举例:</p>
<ul>
<li><code>find . -name &quot;*.java&quot;</code><br />
在当前目录及其子目录下查找.java结尾文件</li>
<li><code>find /itcast -name &quot;*.java&quot;</code><br />
在/itcast目录及其子目录下查找.java结尾的文件</li>
</ul>
<h3 id="查找命令grep"><a class="markdownIt-Anchor" href="#查找命令grep"></a> 查找命令grep</h3>
<p>作用:从指定文件中查找指定的文本内容</p>
<p>语法: <code>grep word fileName</code></p>
<p>举例:</p>
<ul>
<li><code>grep Hello Helloworld.java</code><br />
查找Helloworld.java文件中出现的Hello字符串的位置</li>
<li><code>grep hello *.java</code><br />
查找当前目录中所有.java结尾的文件中包含hello字符串的位置</li>
</ul>
<h1 id="linux软件安装"><a class="markdownIt-Anchor" href="#linux软件安装"></a> Linux软件安装</h1>
<h2 id="软件安装方式"><a class="markdownIt-Anchor" href="#软件安装方式"></a> 软件安装方式</h2>
<ul>
<li>二进制发布包安装
<ul>
<li>软件已经针对具体平台编译打包发布，只要解压，修改配置即可</li>
</ul>
</li>
<li><code>rpm</code>安装
<ul>
<li>软件已经按照redhat的包管理规范进行打包，使用rpm命令进行安装，不能自行解决库依赖问题</li>
</ul>
</li>
<li><code>yum</code>安装
<ul>
<li>一种在线软件安装方式，本质上还是rpm安装，自动下载安装包并安装，安装过程中自动解决库依赖问题</li>
</ul>
</li>
<li>源码编译安装
<ul>
<li>软件以源码工程的形式发布，需要自己编译打包</li>
</ul>
</li>
</ul>
<h2 id="安装jdk"><a class="markdownIt-Anchor" href="#安装jdk"></a> 安装jdk</h2>
<p>操作步骤:</p>
<p>1、使用FinalShell自带的上传工具将jdk的二进制发布包上传到<code>Linux jdk-8u171-linux-×64.tar.gz</code></p>
<p>2、解压安装包，命令为<code>tar -zxvf jdk-8u171-linux-x64.tar.gz -C/usr/local</code></p>
<p>3、配置环境变量，使用<code>vim</code>命令修改<code>/etc/profile</code>文件，在文件末尾加入如下配置</p>
<ul>
<li><code>JAVA_HOME=/usr/local/jdk1.8.0_171</code></li>
<li><code>PATH=$JAVA_HOME/bin :$PATH</code></li>
</ul>
<p>4、重新加载<code>profile</code>文件，使更改的配置立即生效，命令为<code>source /etc/profile</code></p>
<p>5、检查安装是否成功，命令为<code>java -version</code></p>
<h2 id="安装tomcat"><a class="markdownIt-Anchor" href="#安装tomcat"></a> 安装Tomcat</h2>
<h3 id="操作步骤"><a class="markdownIt-Anchor" href="#操作步骤"></a> 操作步骤:</h3>
<p>1、使用FinalShell自带的上传工具将Tomcat的二进制发布包上传到Linuxapache-tomcat-7.0.57.tar.gz</p>
<p>2、解压安装包，命令为<code>tar -zxvf apache-tomcat-7.0.57.tar.gz -C/usr/local</code></p>
<p>3、进入Tomcat的bin目录启动服务，命令为<code>sh startup.sh</code>或者<code>./startup.sh</code></p>
<h3 id="验证tomcat启动是否成功有多种方式"><a class="markdownIt-Anchor" href="#验证tomcat启动是否成功有多种方式"></a> 验证Tomcat启动是否成功，有多种方式:</h3>
<ul>
<li>
<p>查看启动日志</p>
<p><code>more /usr/local/apache-tomcat-7.0.57/logs/catalina.out</code></p>
<p><code>tail -50 /usr/local/apache-tomcat-7.0.57/logs/catalina.out</code></p>
</li>
<li>
<p>查看进程 <code>ps -ef | grep tomcat</code><br />
<img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164559036-587234087.png" alt="image" /></p>
</li>
</ul>
<p><strong>注意:</strong></p>
<ul>
<li>ps命令是linux下非常强大的进程查看命令，通过ps -ef可以查看当前运行的所有进程的详细信息</li>
<li>“|”在Linux中称为管道符，可以将前一个命令的结果输出给后一个命令作为输入</li>
<li>使用ps命令查看进程时，经常配合管道符和查找命令grep一起使用，来查看特定进程</li>
</ul>
<h3 id="防火墙操作"><a class="markdownIt-Anchor" href="#防火墙操作"></a> 防火墙操作:</h3>
<ul>
<li>查看防火墙状态(<code>systemctl status firewalld</code>、<code>firewall-cmd --state</code>)</li>
<li>暂时关闭防火墙(<code>systemctl stop firewalld</code>)</li>
<li>永久关闭防火墙(<code>systemctl disable firewalld</code>)</li>
<li>开启防火墙(<code>systemctl start firewalld</code>)</li>
<li><strong>开放指定端口</strong>(<code>firewall-cmd --zone=public --add-port=8080/tcp --permanent</code>)</li>
<li>关闭指定端口(<code>firewall-cmd --zone=public --remove-port=8080/tcp --permanent</code>)</li>
<li><strong>立即生效</strong>(<code>firewall-cmd --reload</code>)</li>
<li>查看开放的端口(<code>firewall-cmd --zone=public --list-ports</code>)</li>
</ul>
<p><strong>注意:</strong></p>
<p>1、systemctl是管理Linux中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作</p>
<p>2、firewall-cmd是Linux中专门用于控制防火墙的命令</p>
<p>3、为了保证系统安全，服务器的防火墙不建议关闭</p>
<h3 id="停止tomcat服务的方式"><a class="markdownIt-Anchor" href="#停止tomcat服务的方式"></a> 停止Tomcat服务的方式:</h3>
<ul>
<li>
<p>运行Tomcat的bin目录中提供的停止服务的脚本文件<code>shutdown.sh</code></p>
<p><code>sh shutdown.sh</code></p>
<p><code>./shutdown.sh</code></p>
</li>
<li>
<p>结束Tomcat进程<br />
查看Tomcat进程，获得进程id<br />
<img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164615590-1183764675.png" alt="image" /><br />
执行命令结束进程<code>kill -9 7742</code></p>
</li>
</ul>
<p><strong>注意:</strong><br />
kill命令是Linux提供的用于结束进程的命令，-9表示强制结束</p>
<h2 id="安装mysql"><a class="markdownIt-Anchor" href="#安装mysql"></a> 安装MySQL</h2>
<p>1、检测当前系统中是否安装MySQL数据库</p>
<ul>
<li><code>rpm -qa</code><br />
查询当前系统中安装的所有软件</li>
<li><code>rpm -qa l grep mysql</code><br />
查询当前系统中安装的名称带mysql的软件</li>
<li><code>rpm -qa l grep mariadb</code><br />
查询当前系统中安装的名称带mariadb的软件<br />
<img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164632289-1107734166.png" alt="image" /></li>
</ul>
<p>RPM（ Red-Hat Package Manager ）RPM软件包管理器，是红帽Linux用于管理和安装软件的工具</p>
<p><strong>注意</strong>：如果当前系统中已经安装有MySQL数据库，安装将失败。CentoS7自带mariadb，与My5QL数据库冲突</p>
<p>2、卸载已经安装的冲突软件</p>
<ul>
<li><code>rpm -e --nodeps 软件名称</code> 卸载软件</li>
<li><code>rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64</code></li>
</ul>
<p>3、将资料中提供的MySQL安装包上传到Linux并解压</p>
<ul>
<li><code>mkdir /usr/local/mysql</code></li>
<li><code>tar -zxvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz -C /usr/local/mysql</code></li>
</ul>
<p>4、按照顺序安装rpm软件包</p>
<ul>
<li>
<p><code>rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm</code></p>
</li>
<li>
<p><code>rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm</code></p>
</li>
<li>
<p><code>rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm</code></p>
</li>
<li>
<p><code>rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm</code></p>
</li>
<li>
<p><code>rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm</code></p>
</li>
<li>
<p><code>yum install net-tools</code></p>
</li>
<li>
<p><code>rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm</code></p>
<p>说明1:安装过程中提示缺少net-tools依赖，使用yum安装</p>
<p>说明2:可以通过指令升级现有软件及系统内核</p>
</li>
<li>
<p><code>yum update</code></p>
</li>
</ul>
<h3 id="启动mysql"><a class="markdownIt-Anchor" href="#启动mysql"></a> 启动mysql</h3>
<ul>
<li><code>systemctl status mysqld</code><br />
查看mysql服务状态</li>
<li><code>systemctl start mysqld</code><br />
启动mysql服务<br />
<img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164641114-1683153309.png" alt="image" /></li>
</ul>
<p>说明:可以设置开机时启动mysql服务，避免每次开机启动mysql</p>
<ul>
<li><code>systemctl enable mysqld</code><br />
开机启动mysql服务</li>
<li><code>netstat -tunlp</code><br />
查看已经启动的服务</li>
<li><code>netstat -tunlp | grep mysql</code></li>
<li><code>ps -ef | grep mysql</code><br />
查看mysql进程</li>
</ul>
<h3 id="登录mysql数据库查阅临时密码"><a class="markdownIt-Anchor" href="#登录mysql数据库查阅临时密码"></a> 登录MySQL数据库，查阅临时密码</h3>
<ul>
<li><code>cat /var/log/mysqld.log</code><br />
查看文件内容</li>
<li><code>cat /var/log/mysqld.log | grep password</code><br />
查看文件内容中包含password的行信息</li>
</ul>
<h3 id="登录mysql修改密码开放访问权限"><a class="markdownIt-Anchor" href="#登录mysql修改密码开放访问权限"></a> 登录MySQL，修改密码，开放访问权限</h3>
<ul>
<li><code>mysql -urpot -p</code><br />
登录mysql（使用临时密码登录)</li>
</ul>
<h4 id="修改密码"><a class="markdownIt-Anchor" href="#修改密码"></a> 修改密码</h4>
<ul>
<li><code>set global validate_password_length=4;</code><br />
设置密码长度最低位数</li>
<li><code>set global validate_password_policy=LOW;</code><br />
设置密码安全等级低，便于密码可以修改成root</li>
<li><code>set password = password('root');</code><br />
设置密码为root</li>
</ul>
<h4 id="开启访问权限"><a class="markdownIt-Anchor" href="#开启访问权限"></a> 开启访问权限</h4>
<ul>
<li><code>grant all on *.* to 'root'@'%' identified by 'root';</code></li>
<li><code>flush privileges;</code></li>
</ul>
<p>8、测试Mysql数据库是否正常工作</p>
<ul>
<li><code>show databases;</code></li>
</ul>
<h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3>
<p>使用windows上的数据库管理工具进行连接</p>
<p><img src="18Linux/image-20230224112555071.png" alt="image-20230224112555071" /></p>
<p><img src="18Linux/image-20230224112635773.png" alt="image-20230224112635773" /></p>
<h2 id="安装lrzsz"><a class="markdownIt-Anchor" href="#安装lrzsz"></a> 安装lrzsz</h2>
<p>用于文件上传和下载</p>
<p><strong>操作步骤:</strong></p>
<p>1、搜索lrzsz安装包，命令为 <code>yum list lrzsz</code></p>
<p>2、使用yum命令在线安装，命令为<code>yum install lrzsz.x86_64</code></p>
<p><strong>注意：</strong> Yum(全称为Yellow dog Updater, Modified)是一个在Fedora和RedHat以及CentoS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p>
<h1 id="项目部署"><a class="markdownIt-Anchor" href="#项目部署"></a> 项目部署</h1>
<h2 id="手工部署项目"><a class="markdownIt-Anchor" href="#手工部署项目"></a> 手工部署项目</h2>
<p>一、在IDEA中开发SpringBoot项目并打成jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>pom文件必须加入上面代码</p>
<p>二、将jar包上传到Linux服务器</p>
<ul>
<li><code>mkdir /usr/local/app</code>创建目录，将项目jar包放到此目录</li>
</ul>
<p>三、启动Spring程序<br />
<img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164657090-508266715.png" alt="image" /></p>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164651066-1125429480.png" alt="image" /></p>
<p>四、检查防火墙，确保8080端口对外开放，访问SpringBoot项目</p>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164701736-1278145242.png" alt="image" /></p>
<p>五、改为后台运行SpringBoot程序，并将日志输出到日志文件目前程序运行的问题⭐</p>
<ul>
<li>线上程序不会采用控制台霸屏的形式运行程序，而是将程序在后台运行</li>
<li>线上程序不会将日志输出到控制台，而是输出到日志文件，方便运维查阅信息</li>
</ul>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164708361-1366414462.png" alt="image" /></p>
<p>六、停止SpringBoot程序<br />
<img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164714373-1729045522.png" alt="image" /></p>
<h2 id="通过shell脚本自动部署项目"><a class="markdownIt-Anchor" href="#通过shell脚本自动部署项目"></a> 通过shell脚本自动部署项目</h2>
<p>操作步骤:</p>
<ul>
<li>1、在Linux中安装Git</li>
<li>2、使用Git克隆代码</li>
<li>3、在Linux中安装maven</li>
<li>4、编写Shell脚本（拉取代码、编译、打包、启动）</li>
<li>5、为用户授予执行Shell脚本的权限</li>
<li>6、执行Shell脚本</li>
</ul>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164722000-1572884584.png" alt="image" /></p>
<h3 id="在linux中安装git"><a class="markdownIt-Anchor" href="#在linux中安装git"></a> 在Linux中安装Git</h3>
<ul>
<li>yum list git<br />
列出git安装包</li>
<li>yum install git<br />
在线安装git</li>
</ul>
<h3 id="使用git克隆代码"><a class="markdownIt-Anchor" href="#使用git克隆代码"></a> 使用Git克隆代码</h3>
<ul>
<li><code>cd /usr/local/</code></li>
<li><code>git clone 仓库</code></li>
</ul>
<h3 id="在linux中安装maven"><a class="markdownIt-Anchor" href="#在linux中安装maven"></a> 在Linux中安装maven</h3>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164728977-1234910859.png" alt="image" /></p>
<h3 id="将资料中提供的shell脚本文件复制到linux-bootstartsh"><a class="markdownIt-Anchor" href="#将资料中提供的shell脚本文件复制到linux-bootstartsh"></a> 将资料中提供的Shell脚本文件复制到Linux (<a href="http://bootStart.sh">bootStart.sh</a>)</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">echo =================================</span><br><span class="line">echo  自动化部署脚本启动</span><br><span class="line">echo =================================</span><br><span class="line"></span><br><span class="line">echo 停止原来运行中的工程</span><br><span class="line">APP_NAME=reggie</span><br><span class="line"></span><br><span class="line">tpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ $&#123;tpid&#125; ]; then</span><br><span class="line">    echo &#x27;Stop Process...&#x27;</span><br><span class="line">    kill -15 $tpid</span><br><span class="line">fi</span><br><span class="line">sleep 2</span><br><span class="line">tpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ $&#123;tpid&#125; ]; then</span><br><span class="line">    echo &#x27;Kill Process!&#x27;</span><br><span class="line">    kill -9 $tpid</span><br><span class="line">else</span><br><span class="line">    echo &#x27;Stop Success!&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo 准备从Git仓库拉取最新代码</span><br><span class="line">cd /usr/local/helloworld</span><br><span class="line"></span><br><span class="line">echo 开始从Git仓库拉取最新代码</span><br><span class="line">git pull</span><br><span class="line">echo 代码拉取完成</span><br><span class="line"></span><br><span class="line">echo 开始打包</span><br><span class="line">output=`mvn clean package -Dmaven.test.skip=true`</span><br><span class="line"></span><br><span class="line">cd target</span><br><span class="line"></span><br><span class="line">echo 启动项目</span><br><span class="line">nohup java -jar helloworld-1.0-SNAPSHOT.jar &amp;&gt; helloworld.log &amp;</span><br><span class="line">echo 项目启动完成</span><br></pre></td></tr></table></figure>
<ul>
<li>Shell脚本(shell script)，是一种Linux系统中的脚本程序。</li>
<li>使用Shell脚本编程跟JavaScript、Java编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了.</li>
<li>对于Shell脚本编写不作为本课程重点内容，直接使用课程资料中提供的脚本文件bootStart.sh即可。</li>
</ul>
<h3 id="为用户授权"><a class="markdownIt-Anchor" href="#为用户授权"></a> 为用户授权</h3>
<p><code>chmod</code>（英文全拼: change mode）命令是控制用户对文件的权限的命令</p>
<p>Linux中的权限分为:读®、写(w)、执行(x)三种权限</p>
<p>Linux的文件调用权限分为三级︰文件所有者（Owner)、用户组（Group)、其它用户(Other Users)</p>
<p>只有文件的所有者和超级用户可以修改文件或目录的权限</p>
<p>要执行Shell脚本需要有对此脚本文件的执行权限，如果没有则不能执行</p>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164739518-66571149.png" alt="image" /></p>
<p>chmod命令可以使用八进制数来指定权限</p>
<p><strong>举例</strong>:</p>
<ul>
<li><code>chmod 777 bootStart.sh</code>为所有用户授予读、写、执行权限</li>
<li><code>chmod 755 bootStart.sh</code>为文件拥有者授予读、写、执行权限，同组用户和其他用户授予读、执行权限</li>
<li><code>chmod 210 bootstart.sh</code>为文件拥有者授予写权限，同组用户授予执行权限，其他用户没有任何权限</li>
</ul>
<p><strong>注意</strong>:三位数字分别代表不同用户的权限/</p>
<ul>
<li>第1位表示文件拥有者的权限</li>
<li>第2位表示同组用户的权限</li>
<li>第3位表示其他用户的权限</li>
</ul>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164747415-1856910097.png" alt="image" /></p>
<h3 id="设置静态ip"><a class="markdownIt-Anchor" href="#设置静态ip"></a> 设置静态ip</h3>
<p>修改文件/etc/sysconfig/network-scripts/ifcfg-ens33，内容如下:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line"><span class="attr">PROXY_METHOD</span>=<span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">BROWSER_ONLY</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">&quot;static&quot;</span><span class="comment">#使用静态IP地址，默认为dhcp</span></span><br><span class="line"><span class="attr">IPADDR</span>=<span class="string">&quot;192.168.138.100&quot;</span><span class="comment">#设置的静态IP地址</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="string">&quot;255.255.255.0&quot;</span><span class="comment">#子网掩码</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="string">&quot;192.168.138.2&quot;</span><span class="comment">#网关地址</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="string">&quot;192.168.138. 2&quot;</span><span class="comment">#DNS服务器</span></span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="string">&quot;yes &quot;</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line"><span class="attr">NAME</span>=<span class="string">&quot;ens33&quot;</span></span><br><span class="line"><span class="attr">UUID</span>=<span class="string">&quot;95b614cd-79b0-4755-be8d-99f1cca7271b&quot;</span></span><br><span class="line"><span class="attr">DEVICE</span>=<span class="string">&quot;ens33&quot;</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="string">&quot;yes&quot;</span><span class="comment">#是否开机启用</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220522164757410-1051230850.png" alt="image" /></p>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>Project</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringBoot</tag>
        <tag>MySQL</tag>
        <tag>Spring</tag>
        <tag>MyBatis</tag>
        <tag>SSM</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖项目实战 - 优化篇01</title>
    <url>/2023/02/28/JAVA/19ReggieProject02/</url>
    <content><![CDATA[<h1 id="第八章-缓存优化"><a class="markdownIt-Anchor" href="#第八章-缓存优化"></a> 第八章 缓存优化</h1>
<p><strong>问题说明</strong></p>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220523173028609-449458851.png" alt="image" /></p>
<p>用户数量多，系统访问量大频繁访问数据库，系统性能下降，用户体验差</p>
<h2 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h2>
<h3 id="maven坐标"><a class="markdownIt-Anchor" href="#maven坐标"></a> maven坐标</h3>
<p>在项目的<code>pom.xml</code>文件中导入<code>spring data redis</code>的maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h3>
<p>在项目的application.yml中加入redis相关配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">172.17</span><span class="number">.2</span><span class="number">.94</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root@123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="配置类"><a class="markdownIt-Anchor" href="#配置类"></a> 配置类</h3>
<p>在项目中加入配置类<code>RedisConfig</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object,Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//默认的Key序列化器为: JdkSerializationRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory( connectionFactory) ;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以用<code>StringRedisTemplate</code>就不用配置类</p>
<h3 id="linux启动redis"><a class="markdownIt-Anchor" href="#linux启动redis"></a> linux启动redis</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/redis-4.0.0/src/redis-server /usr/local/redis-4.0.0/redis.conf</span><br></pre></td></tr></table></figure>
<h2 id="缓存短信验证码"><a class="markdownIt-Anchor" href="#缓存短信验证码"></a> 缓存短信验证码</h2>
<h3 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路"></a> 实现思路</h3>
<p>前面我们已经实现了移动端手机验证码登录，随机生成的验证码我们是保存在HttpSession中的。现在需要改造为将验证码缓存在Redis中，具体的实现思路如下:</p>
<ol>
<li>
<p>在服务端<code>UserController</code>中注入<code>RedisTemplate</code>对象，用于操作<code>Redis</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在服务端UserController的sendMsg方法中，将随机生成的验证码缓存到Redis中，并设置有效期为5分钟</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将生成的验证码缓存到Redis中，并且设置有效期为5分钟</span></span><br><span class="line">redisTemplate.opsForValue().set(phone, code, <span class="number">5</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在服务端UserController的login方法中，从Redis中获取缓存的验证码，如果登录成功则删除Redis中的验证码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从Redis中获取缓存的验证码</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> redisTemplate.opsForValue().get(phone);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录业务代码....</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果用户登录成功，则删除Redis中缓存的验证码</span></span><br><span class="line">redisTemplate.delete(phone);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="缓存菜品数据"><a class="markdownIt-Anchor" href="#缓存菜品数据"></a> 缓存菜品数据</h2>
<h3 id="实现思路-2"><a class="markdownIt-Anchor" href="#实现思路-2"></a> 实现思路</h3>
<p>前面我们已经实现了移动端菜品查看功能，对应的服务端方法为DishController的list方法，此方法会根据前端提交的查询条件进行数据库查询操作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。</p>
<p>具体的实现思路如下:</p>
<ol>
<li>
<p>改造<code>DishController</code>的<code>list</code>方法，先从Redis中获取菜品数据，如果有则直接返回，无需查询数据库;如果没有则查询数据库，并将查询到的菜品数据放入Redis。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;DishDto&gt; dishDtoList = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 动态的构造key</span></span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_&quot;</span> + dish.getStatus();</span><br><span class="line"><span class="comment">// 从Redis中获取缓存数据，</span></span><br><span class="line">dishDtoList = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(dishDtoList != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果存在，直接返回，无需查询数据库</span></span><br><span class="line">    <span class="keyword">return</span> R.success(dishDtoList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果不存在，需要查询数据库，</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 将查询到的菜品数据缓存到Redis</span></span><br><span class="line">redisTemplate.opsForValue().set(key, dishDtoList, <span class="number">60</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>改造<code>DishController</code>的<code>save</code>和<code>update</code>方法，加入清理缓存的逻辑。保证数据库中的数据和Redis中的数据一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一：清理所有菜品缓存数据</span></span><br><span class="line"><span class="comment">//Set keys = redisTemplate.keys(&quot;dish_*&quot;);</span></span><br><span class="line"><span class="comment">//redisTemplate.delete(keys);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：清理某个分类下面的菜品缓存数据</span></span><br><span class="line">String key=<span class="string">&quot;dish_&quot;</span> + dishDto.getCategoryId() + <span class="string">&quot;_&quot;</span> + dishDto.getStatus();</span><br><span class="line">redisTemplate.delete(key);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意</strong>：在使用缓存过程中，要注意<strong>保证数据库中的数据和缓存中的数据一致</strong>，如果数据库中的数据发生变化，需要及时清理缓存数据。</p>
<h2 id="spring-cache"><a class="markdownIt-Anchor" href="#spring-cache"></a> Spring Cache</h2>
<h3 id="spring-cache介绍"><a class="markdownIt-Anchor" href="#spring-cache介绍"></a> Spring Cache介绍</h3>
<p>Spring cache是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能。</p>
<p>Spring Cache提供了一层抽象，底层可以切换不同的cache实现。具体就是通过<code>CacheManager</code>接口来统一不同的缓存技术。</p>
<p><code>CacheManager</code>是Spring提供的各种缓存技术抽象接口。</p>
<p>针对不同的缓存技术需要实现不同的<code>CacheManager</code>:<br />
<img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220523173040674-859737708.png" alt="image" /></p>
<h3 id="spring-cache常用注解"><a class="markdownIt-Anchor" href="#spring-cache常用注解"></a> Spring Cache常用注解</h3>
<p><img src="https://img2022.cnblogs.com/blog/2592691/202205/2592691-20220523173043578-1055601938.png" alt="image" /></p>
<p>在spring boot项目中，使用缓存技术只需在项目中导入相关缓存技术的依赖包，并在启动类上使用<code>@EnableCaching</code>开启缓存支持即可。</p>
<p>例如，使用Redis作为缓存技术，只需要导入<code>Spring data Redis</code>的maven坐标即可。</p>
<h3 id="spring-cache使用方式"><a class="markdownIt-Anchor" href="#spring-cache使用方式"></a> Spring Cache使用方式</h3>
<p>在<code>Spring Boot</code>项目中使用<code>Spring Cache</code>的操作步骤(使用redis缓存技术);</p>
<p>1、导入maven坐标</p>
<ul>
<li><code>spring-boot-starter-data-redis</code>、<code>spring-boot-starter-cache</code></li>
</ul>
<p>2、配置<code>application.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">1800000</span><span class="comment">#设置缓存有效期</span></span><br></pre></td></tr></table></figure>
<p>3、在启动类上加入<code>@EnableCaching</code>注解，开启缓存注解功能</p>
<p>4、在Controller的方法上加入<code>@Cacheable</code>、<code>@CacheEvict</code>等注解，进行缓存操作</p>
<h2 id="缓存套餐数据"><a class="markdownIt-Anchor" href="#缓存套餐数据"></a> 缓存套餐数据</h2>
<h3 id="实现思路-3"><a class="markdownIt-Anchor" href="#实现思路-3"></a> 实现思路</h3>
<p>前面我们已经实现了移动端套餐查看功能，对应的服务端方法为SetmealController的list方法，此方法会根据前端提交的查询条件进行数据库查询操作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。</p>
<p>具体的实现思路如下:</p>
<ol>
<li>导入<code>Spring Cache</code>和Redis相关maven坐标</li>
<li>在<code>application.yml</code>中配置缓存数据的过期时间</li>
<li>在启动类上加入<code>@EnableCaching</code>注解，开启缓存注解功能</li>
<li>在<code>SetmealController</code>的list方法上加入<code>@Cacheable</code>注解</li>
<li>在<code>SetmealController</code>的<code>save</code>和<code>delete</code>方法上加入<code>@CacheEvic</code>t注解</li>
</ol>
<h3 id="代码改造"><a class="markdownIt-Anchor" href="#代码改造"></a> 代码改造</h3>
<p>在<code>pom.xml</code>文件中导入maven坐标:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在<code>application.yml</code>中配置缓存数据过期时间:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">time-to-live:</span> <span class="number">1800000</span> <span class="comment">#设置缓存数据过期时间</span></span><br></pre></td></tr></table></figure>
<p>在启动类<code>@EnableCaching</code>注解</p>
<p>在list方法上添加注解，实现在redis里添加缓存：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = <span class="string">&quot;setmealCache&quot;</span>,key = <span class="string">&quot;#setmeal.categoryId+&#x27;_&#x27;+#setmeal.status&quot;</span>)</span></span><br></pre></td></tr></table></figure>
<p>在update，add，delete方法上添加注解，清除缓存：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改后讲setmealCache分类下的所有缓存全部删除</span></span><br><span class="line"><span class="meta">@CacheEvict(value = <span class="string">&quot;setmealCache&quot;</span>,allEntries = true)</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：要让R实现Serializable接口（序列化），注解才能生效</p>
<h1 id="第九章-读写分离"><a class="markdownIt-Anchor" href="#第九章-读写分离"></a> 第九章 读写分离</h1>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>Project</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringBoot</tag>
        <tag>MySQL</tag>
        <tag>Spring</tag>
        <tag>MyBatis</tag>
        <tag>SSM</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Hot100</title>
    <url>/2023/03/02/LeetCode/LeetCodeHot100/</url>
    <content><![CDATA[<h2 id="第一题两数之和"><a class="markdownIt-Anchor" href="#第一题两数之和"></a> 第一题：两数之和</h2>
<p><a href="https://leetcode.cn/problems/two-sum/?favorite=2cktkvj"> 两数之和 </a></p>
<h3 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h3>
<p><code>数组</code>、<code>哈希表</code></p>
<h3 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h3>
<div class="tabs" id="c++"><ul class="nav-tabs"><li class="tab active"><a href="#c++-1">C++</a></li><li class="tab"><a href="#c++-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="c++-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; arr;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j&lt; nums.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j] == target)&#123;</span><br><span class="line">                    arr.<span class="built_in">push_back</span>(i);</span><br><span class="line">                    arr.<span class="built_in">push_back</span>(j);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="c++-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] <span class="built_in">twoSum</span>(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] + nums[j] == target) </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">int</span>[]&#123;i, j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
</search>
